{"version":3,"sources":["Components/HomeComponents/PropertyType.tsx","Components/HomeComponents/PropertyTypeList.tsx","Components/NavComponents/PickRangeDay.tsx","Components/NavComponents/PopDetail.tsx","Components/NavComponents/SearchBar.tsx","Images/HomeBG.webp","ColorModeSwitcher.tsx","logo.svg","Logo.tsx","Components/Authentication.tsx","Components/NavComponents/Navbar.tsx","Pages/HomePage.tsx","Components/SingleRoomComponents/MyRoomBadge.tsx","Pages/SingleRoom.tsx","Pages/ErrorPage.tsx","Components/FilterComponents/RoomCard.tsx","Components/FilterComponents/RoomCardList.tsx","Pages/RoomsPage.tsx","Components/NavComponents/Footer.tsx","App.tsx","reportWebVitals.ts","serviceWorker.ts","index.tsx"],"names":["PropertyType","to","alignItems","p","maxW","maxH","width","height","src","objectFit","mt","fontWeight","as","lineHeight","isTruncated","color","fontSize","settings","dots","infinite","speed","slidesToShow","slidesToScroll","initialSlide","swipeToSlide","responsive","breakpoint","PropertyTypeList","defaultDate","from","undefined","enteredTo","PickRangeDay","updateDate","React","useState","state","setState","useEffect","isSelectingFirstDay","day","isBeforeFirstDay","DateUtils","isDayBefore","handleResetClick","selected","disabled","before","Date","now","modifiers","start","end","style","backdropFilter","alignSelf","flexDir","modifiersStyles","backgroundColor","disable","numberOfMonths","fromMonth","onDayClick","today","s","disabledDays","onDayMouseEnter","selectedDays","justifyContent","toLocaleDateString","onClick","PopDetail","adult","children","bedRoom","updatePeople","align","spacing","mr","border","borderColor","variant","borderRadius","mx","defaultValue","adultNum","childrenNum","SearchBar","form","setForm","display","lg","pointerEvents","placeholder","size","closeOnBlur","w","_focusVisible","px","toDateString","flexWrap","left","bg","bgColor","room","console","log","minW","ml","ColorModeSwitcher","props","toggleColorMode","useColorMode","text","useColorModeValue","SwitchIcon","FaMoon","FaSun","marginLeft","icon","aria-label","spin","keyframes","Logo","forwardRef","ref","animation","usePrefersReducedMotion","img","boxSize","logo","defaultCountries","Authentication","country","countries","setCountries","d","onChange","e","f","target","value","isRequired","map","c","index","phone","my","rounded","type","title","Navbar","useDisclosure","isOpen","onOpen","onClose","marginBottom","HomePage","minH","background","BG","pt","fontFamily","opacity","position","mb","defaultRoomBadges","id","description","MyRoomBadge","setIcon","badge","setBadge","foundBadge","find","b","RiUserStarLine","RiStarLine","alignContent","m","defaultRoom","name","thumbnailUrl","images","thumbnailAlt","roomIntroduction","location","rating","rateCounter","formattedPrice","services","roomBadges","defaultOwner","SingleRoom","useParams","slug","roomQuant","bookInfo","setBookInfo","owner","setOwner","bookFromDate","bookToDate","Array","fill","_","i","colorRendering","leftIcon","overflow","gap","h","templateRows","templateColumns","image","colSpan","rowSpan","loading","boxShadow","base","top","float","zIndex","borderWidth","borderTopLeftRadius","borderTopRightRadius","borderBottomRadius","colorScheme","letterSpacing","textTransform","length","sm","md","ErrorPage","RoomCard","alt","rooms","RoomCardList","columns","r","RoomsPage","Footer","href","myTheme","extendTheme","components","Button","defaultProps","App","basename","theme","flex","exact","path","component","flexShrink","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.6b5c7079.chunk.js","sourcesContent":["import { Box, Flex, Image, Square, VStack } from '@chakra-ui/react';\r\nimport React from 'react'\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst PropertyType = () => {\r\n    return (\r\n        <Link to=\"/rooms\">\r\n            <VStack alignItems=\"start\" p=\"4\">\r\n                <Box maxW=\"sm\" maxH=\"sm\">\r\n                    <Image width=\"inherit\" height=\"inherit\" src=\"https://bit.ly/2Z4KKcF\" objectFit=\"cover\"></Image>\r\n                </Box>\r\n\r\n                <Box\r\n                    mt=\"1\"\r\n                    fontWeight=\"semibold\"\r\n                    as=\"h4\"\r\n                    lineHeight=\"tight\"\r\n                    isTruncated\r\n                >\r\n                    Apartment\r\n            </Box>\r\n                <Box>\r\n                    <Box as=\"span\" color=\"gray.500\" fontSize=\"md\">\r\n                        100+ rooms\r\n          </Box>\r\n                </Box>\r\n            </VStack>\r\n        </Link>\r\n    )\r\n}\r\n\r\nexport default PropertyType;","import { Flex, Grid, Spacer } from '@chakra-ui/react';\r\nimport React from 'react'\r\nimport Slider, { Settings } from 'react-slick';\r\nimport PropertyType from './PropertyType';\r\nimport \"slick-carousel/slick/slick.css\";\r\nimport \"slick-carousel/slick/slick-theme.css\";\r\n\r\nvar settings: Settings = {\r\n    dots: true,\r\n    infinite: true,\r\n    speed: 500,\r\n    slidesToShow: 4,\r\n    slidesToScroll: 1,\r\n    initialSlide: 0,\r\n    swipeToSlide: true,\r\n    responsive: [\r\n        {\r\n            breakpoint: 1024,\r\n            settings: {\r\n                slidesToShow: 4,\r\n                slidesToScroll: 1,\r\n                infinite: true,\r\n                dots: true\r\n            }\r\n        },\r\n        {\r\n            breakpoint: 600,\r\n            settings: {\r\n                slidesToShow: 3,\r\n                slidesToScroll: 1,\r\n                initialSlide: 2\r\n            }\r\n        },\r\n        {\r\n            breakpoint: 480,\r\n            settings: {\r\n                slidesToShow: 1,\r\n                slidesToScroll: 1\r\n            }\r\n        }\r\n    ]\r\n};\r\n\r\nconst PropertyTypeList = () => {\r\n    return (\r\n        <div>\r\n            <Slider {...settings}>\r\n                <PropertyType></PropertyType>\r\n                <PropertyType></PropertyType>\r\n                <PropertyType></PropertyType>\r\n                <PropertyType></PropertyType>\r\n                <PropertyType></PropertyType>\r\n            </Slider>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default PropertyTypeList;","import { Box, Button, Center, Flex } from '@chakra-ui/react';\r\nimport React from 'react'\r\nimport DayPicker from 'react-day-picker';\r\nimport { DateUtils } from \"react-day-picker\";\r\nimport 'react-day-picker/lib/style.css';\r\ntype PickRangeDayState = {\r\n    from?: Date;\r\n    to?: Date;\r\n    enteredTo?: Date; // keep track of the last day for mouseEnter\r\n}\r\n\r\ntype PickRangeDayProps = {\r\n    from?: Date,\r\n    to?: Date,\r\n    updateDate: (from?: Date, to?: Date) => void,\r\n}\r\n\r\nconst defaultDate: PickRangeDayState = {\r\n    from: undefined,\r\n    to: undefined,\r\n    enteredTo: undefined\r\n}\r\n\r\nconst PickRangeDay: React.FC<PickRangeDayProps> = ({ from, to, updateDate }) => {\r\n    const [state, setState] = React.useState<PickRangeDayState>({ from: from, to: to });\r\n\r\n    React.useEffect(() => {\r\n        updateDate(state.from, state.to);\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [state.from, state.to]);\r\n\r\n    const isSelectingFirstDay = (day: Date, from?: Date, to?: Date) => {\r\n        const isBeforeFirstDay = from && DateUtils.isDayBefore(day, from);\r\n        const isRangeSelected = from && to;\r\n        return !from || isBeforeFirstDay || isRangeSelected;\r\n    }\r\n\r\n    const handleDayMouseEnter = (day: Date) => {\r\n        const { from, to } = state;\r\n        if (!isSelectingFirstDay(day, from, to)) {\r\n            setState(s => ({\r\n                ...s,\r\n                enteredTo: day,\r\n            }));\r\n        }\r\n    }\r\n\r\n    const handleDayClick = (day: Date) => {\r\n        const today = new Date(Date.now());\r\n        if (day < today) return;\r\n        const { from, to } = state;\r\n        if (from && to && day >= from && day <= to) {\r\n            handleResetClick();\r\n            return;\r\n        }\r\n        if (isSelectingFirstDay(day, from, to)) {\r\n            setState({\r\n                from: day,\r\n                to: undefined,\r\n                enteredTo: undefined,\r\n            });\r\n        } else {\r\n            setState(s => ({\r\n                ...s,\r\n                to: day,\r\n                enteredTo: day,\r\n            }));\r\n        }\r\n    }\r\n\r\n    const handleResetClick = () => {\r\n        setState(defaultDate);\r\n    }\r\n\r\n    const selected = [state.from, { from: state.from, to: state.enteredTo }];\r\n\r\n    const disabled = {\r\n        before: new Date(Date.now())\r\n    }\r\n\r\n    const modifiers = {\r\n        start: state.from,\r\n        end: state.enteredTo,\r\n    }\r\n\r\n    const modifierStyles = {\r\n        start: {\r\n            backgroundColor: '#19456b',\r\n        },\r\n        end: {\r\n            backgroundColor: '#19456b',\r\n        },\r\n        disable: {\r\n            backgroundColor: '#ffffff',\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Box style={{ backdropFilter: \"blur(5px)\" }} alignSelf=\"stretch\">\r\n            <Flex alignItems=\"stretch\" flexDir=\"column\">\r\n                <DayPicker\r\n                    modifiersStyles={modifierStyles}\r\n                    numberOfMonths={2}\r\n                    fromMonth={state.from}\r\n                    modifiers={modifiers as any}\r\n                    onDayClick={handleDayClick}\r\n                    disabledDays={disabled}\r\n                    onDayMouseEnter={handleDayMouseEnter}\r\n                    selectedDays={selected as any}>\r\n                </DayPicker>\r\n            </Flex>\r\n            <Flex justifyContent=\"center\" alignItems=\"center\">\r\n                {!state.from && !state.to && 'Please select the first day.'}\r\n                {state.from && !state.to && 'Please select the last day.'}\r\n                {state.from &&\r\n                    state.to &&\r\n                    `Selected from ${state.from.toLocaleDateString()} to\r\n                ${state.to.toLocaleDateString()}`}{' '}\r\n                {state.from && state.to && (\r\n                    <Button onClick={handleResetClick}>\r\n                        Reset\r\n                    </Button>\r\n                )}\r\n            </Flex>\r\n        </Box>\r\n    )\r\n}\r\n\r\nexport default PickRangeDay;","import { Box, Flex, VStack, Text, Spacer, Square, Button, StackDivider } from '@chakra-ui/react';\r\nimport React from 'react';\r\n\r\ntype PopDetailState = {\r\n    adult: number;\r\n    children: number;\r\n    bedRoom: number;\r\n}\r\n\r\ninterface PopDetailProps extends PopDetailState {\r\n    updatePeople: (adult: number, children: number, room: number) => void;\r\n}\r\n\r\nconst PopDetail: React.FC<PopDetailProps> = ({ adult, children, bedRoom, updatePeople }) => {\r\n    return (\r\n        <div>\r\n            <Box p=\"4\" style={{ backdropFilter: \"blur(5px)\" }}>\r\n                <VStack align=\"stretch\" spacing={4}>\r\n                    <Flex alignItems=\"center\">\r\n                        <Text mr=\"auto\" fontSize=\"md\">Adult</Text>\r\n                        <Square border=\"1px\" borderColor=\"yellow.400\">\r\n                            <Button variant=\"ghost\" borderRadius=\"0\" disabled={adult <= 1 ? true : false}\r\n                                onClick={() => updatePeople(--adult, children, bedRoom)}>-</Button>\r\n                        </Square>\r\n                        <Text mx=\"4\" fontSize=\"md\">{adult}</Text>\r\n                        <Square border=\"1px\" borderColor=\"yellow.400\">\r\n                            <Button variant=\"ghost\" borderRadius=\"0\"\r\n                                onClick={() => updatePeople(++adult, children, bedRoom)}>+</Button>\r\n                        </Square>\r\n                    </Flex>\r\n                    <Flex alignItems=\"center\">\r\n                        <Text mr=\"auto\" fontSize=\"md\">Children</Text>\r\n                        <Square border=\"1px\" borderColor=\"yellow.400\">\r\n                            <Button variant=\"ghost\" borderRadius=\"0\" disabled={children <= 0 ? true : false}\r\n                                onClick={() => updatePeople(adult, --children, bedRoom)}>-</Button>\r\n                        </Square>\r\n                        <Text mx=\"4\" fontSize=\"md\">{children}</Text>\r\n                        <Square border=\"1px\" borderColor=\"yellow.400\">\r\n                            <Button variant=\"ghost\" borderRadius=\"0\"\r\n                                onClick={() => updatePeople(adult, ++children, bedRoom)}>+</Button>\r\n                        </Square>\r\n                    </Flex>\r\n                    <Flex alignItems=\"center\">\r\n                        <Text mr=\"auto\" fontSize=\"md\">Room</Text>\r\n                        <Square border=\"1px\" borderColor=\"yellow.400\">\r\n                            <Button variant=\"ghost\" borderRadius=\"0\" disabled={bedRoom <= 1 ? true : false}\r\n                                onClick={() => updatePeople(adult, children, --bedRoom)}>-</Button>\r\n                        </Square>\r\n                        <Text mx=\"4\" fontSize=\"md\">{bedRoom}</Text>\r\n                        <Square border=\"1px\" borderColor=\"yellow.400\">\r\n                            <Button variant=\"ghost\" borderRadius=\"0\"\r\n                                onClick={() => updatePeople(adult, children, ++bedRoom)}>+</Button>\r\n                        </Square>\r\n                    </Flex>\r\n                </VStack>\r\n            </Box>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default PopDetail;","import { Box, Button, Center, Flex, Input, InputGroup, InputLeftElement, Popover, PopoverContent, PopoverTrigger } from '@chakra-ui/react';\r\nimport React from 'react';\r\nimport { BsSearch } from 'react-icons/bs';\r\n// import 'react-day-picker/lib/style.css';\r\nimport PickRangeDay from './PickRangeDay';\r\nimport PopDetail from './PopDetail';\r\n\r\ntype SearchBarProps = {\r\n    country?: string;\r\n    city?: string;\r\n    from?: Date;\r\n    to?: Date;\r\n    adultNum?: number;\r\n    childrenNum?: number;\r\n    bedRoom?: number;\r\n}\r\n\r\nconst defaultValue: SearchBarProps = {\r\n    adultNum: 1,\r\n    childrenNum: 0,\r\n    bedRoom: 1\r\n}\r\n\r\nconst SearchBar = () => {\r\n    const [form, setForm] = React.useState<SearchBarProps>(defaultValue);\r\n\r\n    const UpdateDate = (from?: Date, to?: Date) => {\r\n        setForm(s => ({\r\n            ...s,\r\n            from: from,\r\n            to: to\r\n        }))\r\n    }\r\n\r\n    const UpdatePeople = (adult: number, children: number, room: number) => {\r\n        setForm(s => ({\r\n            ...s,\r\n            childrenNum: children,\r\n            adultNum: adult,\r\n            bedRoom: room\r\n        }))\r\n        console.log(adult, children, room);\r\n    }\r\n\r\n    return (<div>\r\n        <Box p=\"2\" border=\"1px\" borderColor=\"yellow.400\">\r\n            <Flex display={{ lg: \"flex\" }} alignItems=\"center\">\r\n                <InputGroup>\r\n                    <InputLeftElement pointerEvents=\"none\" children={<Center alignSelf=\"center\"><BsSearch /></Center>} />\r\n                    <Input placeholder=\"Country\" size=\"lg\" borderRadius=\"0\" />\r\n                </InputGroup>\r\n                <Popover closeOnBlur={true}>\r\n                    <PopoverTrigger>\r\n                        <Button variant=\"outline\" w={[\"100%\", \"100%\", \"100%\", \"150%\"]} size=\"lg\" _focusVisible={{ border: \"0\" }} borderRadius=\"0\" px=\"2\">{form?.from?.toDateString() || \"From\"} - {form?.to?.toDateString() || \"To\"}</Button>\r\n                    </PopoverTrigger>\r\n                    <PopoverContent flexWrap=\"nowrap\" alignItems=\"center\" w={[\"100%\", \"100%\", \"200%\", \"200%\"]} left={[\"0%\", \"0%\", \"-50%\", \"-50%\"]} borderRadius=\"0\" bg=\"inherit\" bgColor=\"rgba(66, 153, 225, 0.8)\">\r\n                        <PickRangeDay updateDate={UpdateDate} />\r\n                    </PopoverContent>\r\n                </Popover>\r\n                <Popover>\r\n                    <PopoverTrigger>\r\n                        <Button variant=\"outline\" w={[\"100%\", \"100%\", \"100%\", \"150%\"]} size=\"lg\" borderRadius=\"0\" px=\"2\">{form.adultNum + ' adult(s) - ' + form.childrenNum + ' child(s) - ' + form.bedRoom + ' room(s)'}</Button>\r\n                    </PopoverTrigger>\r\n                    <PopoverContent flexWrap=\"nowrap\" borderRadius=\"0\" bg=\"inherit\" bgColor=\"rgba(66, 153, 225, 0.8)\">\r\n                        <PopDetail updatePeople={UpdatePeople} adult={form.adultNum!} bedRoom={form.bedRoom!} children={form.childrenNum!}></PopDetail>\r\n                    </PopoverContent>\r\n                </Popover>\r\n                <Button alignSelf=\"center\" size=\"lg\" minW=\"100px\" ml={[0, 0, 0, 2]} mt={[2, 2, 2, 0]} w={[\"100%\", \"100%\", \"100%\", \"30%\"]} borderRadius=\"0\">Search</Button>\r\n            </Flex>\r\n        </Box>\r\n    </div>)\r\n}\r\n\r\nexport default SearchBar;","export default __webpack_public_path__ + \"static/media/HomeBG.c3c3859c.webp\";","import * as React from \"react\"\r\nimport {\r\n  useColorMode,\r\n  useColorModeValue,\r\n  IconButton,\r\n  IconButtonProps,\r\n} from \"@chakra-ui/react\"\r\nimport { FaMoon, FaSun } from \"react-icons/fa\"\r\n\r\ntype ColorModeSwitcherProps = Omit<IconButtonProps, \"aria-label\">\r\n\r\nexport const ColorModeSwitcher: React.FC<ColorModeSwitcherProps> = (props) => {\r\n  const { toggleColorMode } = useColorMode()\r\n  const text = useColorModeValue(\"dark\", \"light\")\r\n  const SwitchIcon = useColorModeValue(FaMoon, FaSun)\r\n\r\n  return (\r\n    <IconButton\r\n      size=\"md\"\r\n      fontSize=\"lg\"\r\n      variant=\"ghost\"\r\n      color=\"current\"\r\n      marginLeft=\"2\"\r\n      onClick={toggleColorMode}\r\n      icon={<SwitchIcon />}\r\n      aria-label={`Switch to ${text} mode`}\r\n      {...props}\r\n    />\r\n  )\r\n}\r\n","export default __webpack_public_path__ + \"static/media/logo.314a949b.svg\";","import * as React from \"react\"\r\nimport {\r\n  chakra,\r\n  keyframes,\r\n  ImageProps,\r\n  forwardRef,\r\n  usePrefersReducedMotion,\r\n} from \"@chakra-ui/react\"\r\nimport logo from \"./logo.svg\"\r\n\r\nconst spin = keyframes`\r\n  from { transform: rotate(0deg); }\r\n  to { transform: rotate(360deg); }\r\n`\r\n\r\nexport const Logo = forwardRef<ImageProps, \"img\">((props, ref) => {\r\n  const prefersReducedMotion = usePrefersReducedMotion()\r\n\r\n  const animation = prefersReducedMotion\r\n    ? undefined\r\n    : `${spin} infinite 20s linear`\r\n\r\n  return <chakra.img animation={animation} boxSize=\"30px\" src={logo} ref={ref} {...props} />\r\n})\r\n","import { Box, Button, FormControl, Input, InputGroup, Select, VStack } from '@chakra-ui/react';\r\nimport React from 'react'\r\nimport { FaArrowRight } from 'react-icons/fa';\r\n\r\ntype ActionType =\r\n    | { type: \"RegisterPhone\"; country: string; phone: string }\r\n    | { type: \"CheckPincode\"; pincode: number }\r\n    | { type: \"RegisterDetail\"; name: string; email: string; password: string }\r\n\r\n\r\ntype AuthenticationState = {\r\n    country?: string;\r\n    phone?: string;\r\n    pincode?: number;\r\n    name?: string;\r\n    email?: string;\r\n    password?: string;\r\n}\r\n\r\nconst reducer = (state: AuthenticationState, action: ActionType) => {\r\n    switch (action.type) {\r\n        case 'RegisterPhone':\r\n            return {\r\n                ...state,\r\n                country: action.country,\r\n                phone: action.phone\r\n            }\r\n            break;\r\n        case 'CheckPincode':\r\n            break;\r\n        case 'RegisterDetail':\r\n            break;\r\n\r\n        default:\r\n            break;\r\n    }\r\n}\r\n\r\nconst getRandomInt = (min: number, max: number) => {\r\n    min = Math.ceil(min);\r\n    max = Math.floor(max);\r\n    return Math.floor(Math.random() * (max - min) + min);\r\n}\r\n\r\nconst fetchPincode = async (phone: number) => {\r\n    setTimeout(() => {\r\n        return getRandomInt(1000, 9999);\r\n    }, 1000);\r\n}\r\n\r\nconst Authentication = () => {\r\n    const [form, setForm] = React.useState<AuthenticationState>({ country: \"Russia\" });\r\n    const [countries, setCountries] = React.useState<string[]>();\r\n\r\n    // fetching countries\r\n    React.useEffect(() => {\r\n        setCountries(defaultCountries);\r\n    }, [])\r\n\r\n    // React.useEffect(() => {\r\n    //     console.log(form.country);\r\n    // })\r\n\r\n    return (\r\n        <FormControl d=\"flex\" flexDir=\"column\">\r\n            <Select onChange={(e) => { setForm(f => ({ ...f, country: e.target.value })) }} size=\"lg\" isRequired placeholder=\"Choose your country\">\r\n                {countries?.map((c, index) => {\r\n                    return <option value={c} key={index}>{c}</option>\r\n                })}\r\n            </Select>\r\n            <Input placeholder=\"Phone number\" size=\"lg\" value={form.phone} onChange={(e) => setForm((f) => ({ ...f, phone: e.target.value }))} />\r\n            <Button my=\"3\" w=\"30%\" rounded=\"full\" type=\"submit\" alignSelf=\"center\" title=\"Next step\"><FaArrowRight /></Button>\r\n        </FormControl>\r\n    )\r\n}\r\n\r\nconst defaultCountries: string[] = [\r\n    \"Russia\", \"Vietnam\"\r\n]\r\n\r\nexport default Authentication;","import React from 'react';\r\nimport { Box, Button, Center, Flex, Heading, HStack, Modal, ModalBody, ModalCloseButton, ModalContent, ModalHeader, ModalOverlay, Spacer, useDisclosure } from '@chakra-ui/react';\r\nimport { ColorModeSwitcher } from '../../ColorModeSwitcher';\r\nimport { Logo } from \"../../Logo\";\r\nimport { Link } from 'react-router-dom';\r\nimport Authentication from '../Authentication';\r\n\r\nconst Navbar = () => {\r\n    const { isOpen, onOpen, onClose } = useDisclosure();\r\n\r\n    return (\r\n        <Box marginBottom={[\"5%\"]}>\r\n            <Flex justifyContent=\"center\" alignItems=\"center\">\r\n                <Link to=\"/\">\r\n                    <HStack spacing={4}>\r\n                        <Center>\r\n                            <Logo />\r\n                        </Center>\r\n                        <Heading size=\"md\">NiceHostels.com</Heading>\r\n                    </HStack>\r\n                </Link>\r\n                <Spacer />\r\n                <HStack spacing={4}>\r\n                    <ColorModeSwitcher />\r\n                    <Button variant=\"ghost\" onClick={onOpen}>Login</Button>\r\n                    <Button variant=\"solid\" onClick={onOpen}>Register</Button>\r\n                </HStack>\r\n            </Flex>\r\n\r\n            <Modal isOpen={isOpen} onClose={onClose}>\r\n                <ModalOverlay />\r\n                <ModalContent minW=\"40%\">\r\n                    <ModalHeader alignSelf=\"center\">Authentication</ModalHeader>\r\n                    <ModalCloseButton />\r\n                    <ModalBody>\r\n                        <Box w=\"100%\">\r\n                            <Authentication></Authentication>\r\n                        </Box>\r\n                    </ModalBody>\r\n                </ModalContent>\r\n            </Modal>\r\n\r\n        </Box>\r\n    )\r\n}\r\n\r\nexport default Navbar;","import React from 'react'\r\nimport PropertyTypeList from '../Components/HomeComponents/PropertyTypeList'\r\nimport SearchBar from '../Components/NavComponents/SearchBar';\r\nimport { Box, DarkMode } from \"@chakra-ui/react\"\r\nimport BG from \"../Images/HomeBG.webp\";\r\nimport Navbar from '../Components/NavComponents/Navbar';\r\n\r\nconst px = \"10%\";\r\n\r\nconst HomePage = () => {\r\n    return (\r\n        <Box>\r\n            <Box minH={[\"50vh\", \"75vh\", \"85vh\"]} style={{ background: \"url('\" + BG + \"') center/cover no-repeat\" }}>\r\n                <Box px={px} pt=\"5\">\r\n                    <Navbar></Navbar>\r\n                    <SearchBar />\r\n                    <Box as=\"h1\" fontFamily=\"mono\" opacity=\"0.5\" fontWeight=\"bold\" fontSize={[\"3xl\", \"4xl\", \"6xl\", \"8xl\"]}\r\n                        position=\"relative\" mt={[\"5vh\", \"10vh\", \"20vh\", \"30vh\"]}>EXPLORE AROUND</Box>\r\n                </Box>\r\n            </Box>\r\n            <Box px={px} mt=\"10\">\r\n                <Box as=\"h2\" fontWeight=\"bold\" fontSize=\"4xl\" mb=\"5\">\r\n                    LIVE ANYWHERE\r\n                </Box>\r\n                <PropertyTypeList></PropertyTypeList>\r\n            </Box>\r\n        </Box>\r\n    )\r\n}\r\nexport default HomePage;","import { Box, Icon, HStack, VStack, Center } from '@chakra-ui/react'\r\nimport React from 'react'\r\nimport { IconType } from 'react-icons'\r\nimport { RiStarLine, RiUserStarLine } from \"react-icons/ri\";\r\n\r\ntype MyRoomBadgeProps = {\r\n    id: string;\r\n}\r\n\r\nconst MyRoomBadge: React.FC<MyRoomBadgeProps> = ({ id }) => {\r\n    const [icon, setIcon] = React.useState<IconType>();\r\n    const [badge, setBadge] = React.useState<RoomBadge>();\r\n\r\n    React.useEffect(() => {\r\n        let foundBadge = defaultRoomBadges.find(b => b.id === id);\r\n        setBadge(foundBadge);\r\n        switch (id) {\r\n            case \"1\":\r\n                setIcon(RiUserStarLine);\r\n                break;\r\n\r\n            default:\r\n                setIcon(RiStarLine);\r\n                break;\r\n        }\r\n    }, [id])\r\n\r\n    return (\r\n        <HStack alignContent=\"center\" spacing=\"0\" mb=\"2\">\r\n            <Icon d=\"flex\" boxSize=\"10\" alignItems=\"center\" justifyContent=\"center\" mt=\"2\" ml=\"2\">{icon}</Icon>\r\n            <VStack alignItems=\"start\" spacing=\"0\">\r\n                <Box as=\"h4\" fontSize=\"md\" fontWeight=\"semibold\">{badge?.title}</Box>\r\n                <Box as=\"h5\" fontSize=\"sm\" m=\"0\">{badge?.description}</Box>\r\n            </VStack>\r\n        </HStack>\r\n    )\r\n}\r\n\r\nexport const defaultRoomBadges: RoomBadge[] = [\r\n    {\r\n        id: \"1\",\r\n        title: \"Helpful owner\",\r\n        description: \"Owner provides best services\"\r\n    },\r\n    {\r\n        id: \"2\",\r\n        title: \"Extra clean\",\r\n        description: \"Owner follows our strict policies of enhanced clealiness\"\r\n    },\r\n    {\r\n        id: \"3\",\r\n        title: \"Not smoking\",\r\n        description: \"Owner does not allow smoking inside\"\r\n    },\r\n    {\r\n        id: \"4\",\r\n        title: \"Free cancelation\",\r\n        description: \"You can cancel with full refund in 24 hours\"\r\n    }\r\n]\r\n\r\nexport default MyRoomBadge;","import { Box, Button, Divider, Grid, GridItem, Spacer, Image, Popover, PopoverContent, PopoverTrigger, HStack, Flex, VStack, Avatar } from '@chakra-ui/react';\r\nimport { userInfo } from 'os';\r\nimport React from 'react'\r\nimport { BsStarFill, BsStar, BsHeart } from 'react-icons/bs';\r\nimport { Link, useParams } from 'react-router-dom';\r\nimport Navbar from '../Components/NavComponents/Navbar';\r\nimport PickRangeDay from '../Components/NavComponents/PickRangeDay';\r\nimport PopDetail from '../Components/NavComponents/PopDetail';\r\nimport SearchBar from '../Components/NavComponents/SearchBar';\r\nimport MyRoomBadge, { defaultRoomBadges } from '../Components/SingleRoomComponents/MyRoomBadge';\r\n\r\ntype SlugProps = {\r\n    slug: string;\r\n}\r\n\r\ninterface RoomType extends RoomCardType {\r\n    images: string[];\r\n    roomIntroduction: string;\r\n    roomBadges?: RoomBadge[];\r\n}\r\n\r\ntype SingleRoomProps = {\r\n    room: RoomType;\r\n}\r\n\r\ntype OwnerInfo = {\r\n    id: string;\r\n    name: string;\r\n}\r\n\r\ntype BookingInfo = {\r\n    roomId?: string;\r\n    userId?: string;\r\n    bookFromDate?: Date;\r\n    bookToDate?: Date;\r\n    children: number;\r\n    adult: number;\r\n    roomQuant: number;\r\n}\r\n\r\nconst GetRoomById = (id: string) => {\r\n}\r\n\r\nconst SingleRoom: React.FC = () => {\r\n    const { slug } = useParams<SlugProps>();\r\n    const [bookInfo, setBookInfo] = React.useState<BookingInfo>({ adult: 1, children: 0, roomQuant: 1 });\r\n    const [owner, setOwner] = React.useState<OwnerInfo>();\r\n\r\n    React.useEffect(() => {\r\n        setOwner(defaultOwner);\r\n    }, [])\r\n\r\n    const updateDate = (from?: Date, to?: Date) => {\r\n        setBookInfo(s => ({\r\n            ...s,\r\n            bookFromDate: from,\r\n            bookToDate: to\r\n        }));\r\n    }\r\n\r\n    const updatePeople = (adult: number, children: number, room: number) => {\r\n        setBookInfo((s) => ({\r\n            ...s,\r\n            adult: adult,\r\n            children: children,\r\n            roomQuant: room\r\n        }));\r\n    }\r\n\r\n    const room = defaultRoom;\r\n\r\n    return (\r\n        <Box mx=\"10%\" mt=\"5\">\r\n            <Navbar></Navbar>\r\n            <Divider my=\"5\" />\r\n\r\n            {/* title */}\r\n            <Box as=\"h2\" fontSize=\"3xl\" fontWeight=\"semibold\">{room.name}</Box>\r\n\r\n            {/* rating, location, like button */}\r\n            <Box d=\"flex\" mt=\"1\">\r\n                <Box d=\"flex\" alignItems=\"center\">\r\n                    {Array(5).fill(\"\").map((_, i) => {\r\n                        return (i < room.rating - 1 ? <BsStarFill colorRendering=\"teal.400\" /> : <BsStar />)\r\n                    })}\r\n\r\n                    <Box as=\"span\" ml=\"2\" color=\"gray.500\">{room.rating} reviews</Box>\r\n\r\n                    <Box mx=\"4\">&bull;</Box>\r\n\r\n                    <Link to=\"/\">\r\n                        <Button variant=\"link\">{room.location}</Button>\r\n                    </Link>\r\n                </Box>\r\n\r\n                <Spacer />\r\n\r\n                <Button variant=\"ghost\" size=\"sm\" leftIcon={<BsHeart />}>Like</Button>\r\n            </Box>\r\n\r\n            {/* image display */}\r\n            <Box borderRadius=\"lg\" overflow=\"hidden\" mt=\"4\">\r\n                <Grid gap=\"2\" h=\"40%\" maxH=\"450px\" objectFit=\"cover\"\r\n                    templateRows=\"repeat(2, 1fr)\"\r\n                    templateColumns=\"repeat(4, 1fr)\">\r\n\r\n                    {/* <GridItem colSpan={2} rowSpan={2} overflow=\"hidden\" >\r\n                        <Image src={room.images[0]} h=\"auto\" height=\"100%\" w=\"100%\" objectFit=\"cover\"></Image>\r\n                    </GridItem> */}\r\n\r\n                    {room.images.map((image, i) => {\r\n                        return (\r\n                            <GridItem colSpan={i === 0 ? 2 : 1} rowSpan={i === 0 ? 2 : 1} overflow=\"hidden\" >\r\n                                <Image src={image} h=\"auto\" height=\"100%\" w=\"100%\" objectFit=\"cover\" loading=\"lazy\"></Image>\r\n                            </GridItem>\r\n                        )\r\n                    })}\r\n\r\n                    {/* <GridItem colSpan={1} rowSpan={1} overflow=\"hidden\" >\r\n                        <Image src={room.images[1]} h=\"auto\" height=\"100%\" w=\"100%\" objectFit=\"cover\"></Image>\r\n                    </GridItem>\r\n                    <GridItem colSpan={1} rowSpan={1} overflow=\"hidden\" >\r\n                        <Image src={room.images[2]} h=\"auto\" height=\"100%\" w=\"100%\" objectFit=\"cover\"></Image>\r\n                    </GridItem>\r\n                    <GridItem colSpan={1} rowSpan={1} overflow=\"hidden\" >\r\n                        <Image src={room.images[3]} h=\"auto\" height=\"100%\" w=\"100%\" objectFit=\"cover\"></Image>\r\n                    </GridItem>\r\n                    <GridItem colSpan={1} rowSpan={1} overflow=\"hidden\" >\r\n                        <Image src={room.images[4]} h=\"auto\" height=\"100%\" w=\"100%\" objectFit=\"cover\"></Image>\r\n                    </GridItem> */}\r\n                </Grid>\r\n            </Box>\r\n\r\n            {/* info  */}\r\n            <Box mt=\"4\" d={[\"flex\", \"flex\", \"flex\", \"block\"]} flexDir=\"column-reverse\">\r\n                {/* floating form */}\r\n                <Box w={[\"100%\", \"100%\", \"100%\", \"35%\"]} boxShadow=\"2xl\" mt={{ base: \"4\", lg: \"0\" }} top=\"30%\" float={{ lg: \"right\" }} position={{ lg: \"sticky\" }}\r\n                    borderRadius=\"lg\"\r\n                    display=\"inline-flex\" flexDir=\"column\" zIndex={1} borderWidth=\"thin\"\r\n                    p=\"4\" alignContent=\"center\" justifyContent=\"center\">\r\n                    <Flex alignItems=\"baseline\">\r\n                        <Box as=\"h2\" fontFamily=\"mono\" fontSize=\"3xl\" fontWeight=\"semibold\">{room.formattedPrice}\r\n                        </Box>\r\n                        <Box as=\"span\" color=\"gray.500\">\r\n                            /per night\r\n                        </Box>\r\n                        <Spacer />\r\n                        <Box d=\"flex\" alignItems=\"center\">\r\n                            {Array(5).fill(\"\").map((_, i) => {\r\n                                return (i < room.rating - 1 ? <BsStarFill colorRendering=\"teal.400\" /> : <BsStar />)\r\n                            })}\r\n                        </Box>\r\n                    </Flex>\r\n\r\n                    <Box mt=\"4\">\r\n                        <Popover closeOnBlur={true}>\r\n                            <PopoverTrigger>\r\n                                <HStack spacing=\"0\">\r\n                                    <Button variant=\"outline\" borderTopLeftRadius=\"lg\"\r\n                                        size=\"lg\" w=\"100%\"\r\n                                        _focusVisible={{ border: \"0\" }}\r\n                                        borderRadius=\"0\">\r\n                                        {bookInfo?.bookFromDate?.toDateString() || \"From\"}\r\n                                    </Button>\r\n                                    <Button variant=\"outline\" borderTopRightRadius=\"lg\"\r\n                                        size=\"lg\" w=\"100%\"\r\n                                        _focusVisible={{ border: \"0\" }}\r\n                                        borderRadius=\"0\">\r\n                                        {bookInfo?.bookToDate?.toDateString() || \"To\"}\r\n                                    </Button>\r\n                                </HStack>\r\n                            </PopoverTrigger>\r\n                            <PopoverContent flexWrap=\"nowrap\" alignItems=\"center\" w={[\"100%\", \"100%\", \"200%\", \"200%\"]} left={[\"0%\", \"0%\", \"-50%\", \"-50%\"]} borderRadius=\"0\" bg=\"inherit\" bgColor=\"rgba(66, 153, 225, 0.8)\">\r\n                                <PickRangeDay updateDate={updateDate} />\r\n                            </PopoverContent>\r\n                        </Popover>\r\n                        <Popover>\r\n                            <PopoverTrigger>\r\n                                <Button variant=\"outline\" w=\"100%\" size=\"lg\" borderRadius=\"0\" borderBottomRadius=\"lg\" px=\"2\">{bookInfo.adult + ' adult(s) - ' + bookInfo.children + ' child(s) - ' + bookInfo.roomQuant + ' room(s)'}</Button>\r\n                            </PopoverTrigger>\r\n                            <PopoverContent flexWrap=\"nowrap\" borderRadius=\"0\" bg=\"inherit\" bgColor=\"rgba(66, 153, 225, 0.8)\">\r\n                                <PopDetail updatePeople={updatePeople} adult={bookInfo.adult} bedRoom={bookInfo.roomQuant} children={bookInfo.children}></PopDetail>\r\n                            </PopoverContent>\r\n                        </Popover>\r\n                    </Box>\r\n\r\n                    <Button variant=\"solid\" colorScheme=\"green\" alignSelf=\"stretch\" mt=\"4\">Check for reservation</Button>\r\n                </Box>\r\n\r\n                {/* Detail information about this room */}\r\n                <Box height=\"1000px\" w={[\"100%\", \"100%\", \"100%\", \"60%\"]}>\r\n                    {/* name, avatar */}\r\n                    <Flex alignItems=\"center\">\r\n                        <VStack alignItems=\"start\">\r\n                            <Box as=\"h1\" fontSize=\"2xl\" fontWeight=\"semibold\" >{\"Owner: \" + owner?.name}</Box>\r\n                            <HStack>\r\n                                {room.services.map(s => {\r\n                                    return (\r\n                                        <Box\r\n                                            color=\"gray.500\"\r\n                                            fontWeight=\"semibold\"\r\n                                            letterSpacing=\"wide\"\r\n                                            fontSize=\"xs\"\r\n                                            textTransform=\"uppercase\"\r\n                                            ml=\"2\"\r\n                                            isTruncated\r\n                                        >{s} {room.services[room.services.length - 1] !== s && <>&bull;</>} </Box>\r\n                                    )\r\n                                })}\r\n                            </HStack>\r\n                        </VStack>\r\n\r\n                        <Spacer />\r\n                        <Avatar name={owner?.name}></Avatar>\r\n                    </Flex>\r\n                    <Divider my=\"3\" />\r\n\r\n                    {/* room badges */}\r\n                    {room.roomBadges?.map((b, i) => {\r\n                        return <MyRoomBadge id={b.id} key={i}></MyRoomBadge>\r\n                    })}\r\n                    <Divider my=\"3\" />\r\n\r\n                    {/* room introduction */}\r\n                    <Box as=\"h5\" fontWeight=\"semibold\" fontSize=\"2xl\">More about room</Box>\r\n                    <Box as=\"p\">{room.roomIntroduction}</Box>\r\n                    <Divider my=\"3\" />\r\n\r\n                    {/* another datepicker here */}\r\n                    <Box w=\"100%\" display={{ base: \"none\", sm: \"block\", md: \"block\" }}>\r\n                        <PickRangeDay updateDate={updateDate}></PickRangeDay>\r\n                    </Box>\r\n                </Box>\r\n            </Box>\r\n\r\n            <Box height=\"1000px\" bg=\"yellow.600\" mt=\"4\"></Box>\r\n        </Box>\r\n    )\r\n}\r\n\r\nconst badges: RoomBadge[] = defaultRoomBadges;\r\n\r\nconst defaultRoom: RoomType = {\r\n    id: \"random-id-12321\",\r\n    name: \"Crystal palace\",\r\n    thumbnailUrl: \"https://bit.ly/2Z4KKcF\",\r\n    images: [\"https://picsum.photos/1100/1000\", \"https://picsum.photos/700/1200\",\r\n        \"https://picsum.photos/1000/1000\", \"https://picsum.photos/1200/1000\",\r\n        \"https://picsum.photos/1100/900\"],\r\n    thumbnailAlt: \"rear view house with pool\",\r\n    roomIntroduction: \"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Vestibulum congue eros id ligula porta, id fermentum ligula semper. Pellentesque eget pulvinar justo. Phasellus eu risus dolor. Aliquam mollis urna vel lectus ornare, nec ultricies augue gravida. Nunc dignissim diam vel massa cursus condimentum. Nulla pharetra molestie nunc, ac hendrerit felis posuere a. Sed finibus magna ut nibh luctus, ac dapibus mauris cursus. Sed eu porttitor lacus. Nulla venenatis erat quis orci consectetur efficitur. Phasellus nisl nisl, luctus et sapien nec, dictum feugiat felis. Nam nec ullamcorper mi, eu vulputate justo. Nullam nibh ipsum, dictum at commodo nec, molestie et ipsum. Aliquam sit amet tincidunt augue, sit amet consectetur mi.\",\r\n    description: \"Best place in town\",\r\n    location: \"Dark side, the moon\",\r\n    rating: 4.5,\r\n    rateCounter: 23,\r\n    formattedPrice: \"2021.00$\",\r\n    services: [\"Pet\", \"Kitchen\", \"Breakfast\", \"Wifi\"],\r\n    roomBadges: badges,\r\n}\r\n\r\n\r\n\r\nconst defaultOwner: OwnerInfo = {\r\n    id: \"1234\",\r\n    name: \"Ivanov Ivan Ivanovich\",\r\n}\r\n\r\nexport default SingleRoom;","import React from 'react'\r\n\r\nconst ErrorPage = () => {\r\n    return (\r\n        <div>\r\n            Hello from error page\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ErrorPage;","import { Badge, Box, Image } from '@chakra-ui/react';\r\nimport React from 'react';\r\nimport { BsStar, BsStarFill } from 'react-icons/bs';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst defaultRoom: RoomCardType = {\r\n    id: \"random-id-12321\",\r\n    name: \"Crystal palace\",\r\n    thumbnailUrl: \"https://bit.ly/2Z4KKcF\",\r\n    thumbnailAlt: \"rear view house with pool\",\r\n    description: \"Best place in town\",\r\n    location: \"Dark side, the moon\",\r\n    rating: 4.5,\r\n    rateCounter: 23,\r\n    formattedPrice: \"2021.00$\",\r\n    services: [\"Pet\", \"Kitchen\", \"Breakfast\", \"Wifi\"]\r\n}\r\n\r\ntype RoomCardProps = {\r\n    room: RoomCardType;\r\n}\r\n\r\nconst RoomCard: React.FC<RoomCardProps> = ({ room, children }) => {\r\n    return (\r\n        <Link to={\"/room/\" + room.id}>\r\n            <Box overflow=\"hidden\" borderWidth=\"1px\" borderRadius=\"lg\">\r\n                <Image src={room.thumbnailUrl} alt={room.thumbnailAlt} />\r\n                <Box p=\"4\">\r\n                    <Box d=\"flex\" alignItems=\"baseline\">\r\n                        <Badge borderRadius=\"full\" px=\"2\" colorScheme=\"teal\">\r\n                            New\r\n                        </Badge>\r\n                        {room.services.map(s => {\r\n                            return (\r\n                                <Box\r\n                                    color=\"gray.500\"\r\n                                    fontWeight=\"semibold\"\r\n                                    letterSpacing=\"wide\"\r\n                                    fontSize=\"xs\"\r\n                                    textTransform=\"uppercase\"\r\n                                    ml=\"2\"\r\n                                    isTruncated\r\n                                >{s} {room.services[room.services.length - 1] !== s && <>&bull;</>} </Box>\r\n                            )\r\n                        })}\r\n                    </Box>\r\n\r\n                    <Box\r\n                        mt=\"1\"\r\n                        fontWeight=\"semibold\"\r\n                        as=\"h4\"\r\n                        lineHeight=\"tight\"\r\n                        isTruncated\r\n                    >\r\n                        {room.name}\r\n                    </Box>\r\n                    <Box\r\n                        as=\"h3\"\r\n                        lineHeight=\"tight\"\r\n                        isTruncated\r\n                    >\r\n                        {room.description}\r\n                    </Box>\r\n                    <Box d='flex' justifyContent=\"space-between\">\r\n                        <Box as=\"h4\" fontSize=\"3xl\">\r\n                            {room.formattedPrice}\r\n                        </Box>\r\n\r\n                        <Box d=\"flex\" alignItems=\"center\">\r\n                            {Array(5).fill(\"\").map((_, i) => {\r\n                                return (i < room.rating - 1 ? <BsStarFill colorRendering=\"teal.400\" /> : <BsStar />)\r\n                            })}\r\n                        </Box>\r\n                    </Box>\r\n                </Box>\r\n            </Box>\r\n        </Link>\r\n    )\r\n}\r\n\r\nexport default RoomCard;","import { SimpleGrid } from '@chakra-ui/react'\r\nimport React from 'react'\r\nimport RoomCard from './RoomCard'\r\n\r\nconst RoomCardList = () => {\r\n    return (\r\n        <SimpleGrid spacing=\"8\" columns={[1, 1, 2, 2, 3]}>\r\n            {rooms.map((r, index) => {\r\n                return (\r\n                    <RoomCard key={index} room={r}></RoomCard>\r\n                )\r\n            })}\r\n        </SimpleGrid>\r\n    )\r\n}\r\n\r\nconst defaultRoom: RoomCardType = {\r\n    id: \"random-id-12321\",\r\n    name: \"Crystal palace\",\r\n    thumbnailUrl: \"https://picsum.photos/1100/1000?random=1\",\r\n    thumbnailAlt: \"rear view house with pool\",\r\n    description: \"Best place in town\",\r\n    location: \"Dark side, the moon\",\r\n    rating: 4.5,\r\n    rateCounter: 23,\r\n    formattedPrice: \"2021.00$\",\r\n    services: [\"Pet\", \"Kitchen\", \"Breakfast\", \"Wifi\"]\r\n}\r\n\r\nconst rooms: Array<RoomCardType> = [\r\n    { ...defaultRoom, thumbnailUrl: \"https://picsum.photos/1100/1000?random=1\" },\r\n    { ...defaultRoom, thumbnailUrl: \"https://picsum.photos/1100/1000?random=2\" },\r\n    { ...defaultRoom, thumbnailUrl: \"https://picsum.photos/1100/1000?random=3\" },\r\n    { ...defaultRoom, thumbnailUrl: \"https://picsum.photos/1100/1000?random=4\" },\r\n    { ...defaultRoom, thumbnailUrl: \"https://picsum.photos/1100/1000?random=5\" },\r\n]\r\n\r\nexport default RoomCardList;","import { Box, Divider } from '@chakra-ui/react';\r\nimport React from 'react'\r\nimport { useParams } from 'react-router-dom';\r\nimport RoomCardList from '../Components/FilterComponents/RoomCardList';\r\nimport Navbar from '../Components/NavComponents/Navbar';\r\nimport SearchBar from '../Components/NavComponents/SearchBar';\r\n\r\ntype RoomTypeSlugProps = {\r\n    slug: string;\r\n}\r\n\r\nconst RoomsPage = () => {\r\n    const { slug } = useParams<RoomTypeSlugProps>();\r\n\r\n\r\n    return (\r\n        <Box mx=\"10%\" mt=\"5\">\r\n            <Navbar></Navbar>\r\n            <SearchBar></SearchBar>\r\n            <Divider my=\"10\" />\r\n            <Box as=\"h3\" mb=\"5\" fontSize=\"4xl\" fontWeight=\"bold\" >Find place that fits you most...</Box>\r\n            <RoomCardList></RoomCardList>\r\n            {slug}\r\n        </Box>\r\n    )\r\n}\r\n\r\nexport default RoomsPage;","import { Box, Center, Divider } from '@chakra-ui/react'\r\nimport React from 'react'\r\nimport { BsHeartFill } from 'react-icons/bs';\r\n\r\ntype FooterProps = {\r\n    height?: string\r\n}\r\n\r\nconst Footer: React.FC<FooterProps> = ({ height }) => {\r\n    return (\r\n        <Box mt=\"10\" mb=\"5\">\r\n            <Divider mb=\"5\" boxShadow=\"lg\" />\r\n            <Center as=\"h4\">\r\n                {\"Proudly made with\"}\r\n                <>&nbsp;</>\r\n                <BsHeartFill />\r\n                <>&nbsp;</>\r\n                {\"by\"}\r\n                <>&nbsp;</>\r\n                <Box as=\"a\" href=\"https://github.com/haihaibeo\">Hai</Box>\r\n            </Center>\r\n        </Box>\r\n    )\r\n}\r\n\r\nexport default Footer;","import * as React from \"react\"\r\nimport {\r\n  ChakraProvider,\r\n  Box,\r\n  extendTheme,\r\n} from \"@chakra-ui/react\"\r\nimport { HashRouter as Router, Route, Switch } from 'react-router-dom'\r\nimport HomePage from \"./Pages/HomePage\";\r\nimport SingleRoom from \"./Pages/SingleRoom\";\r\nimport ErrorPage from \"./Pages/ErrorPage\";\r\nimport RoomsPage from \"./Pages/RoomsPage\";\r\nimport \"./App.css\";\r\nimport { mode } from \"@chakra-ui/theme-tools\";\r\nimport \"slick-carousel/slick/slick.css\";\r\nimport \"slick-carousel/slick/slick-theme.css\";\r\nimport Footer from \"./Components/NavComponents/Footer\";\r\n// theme.components.Button.baseStyle.borderRadius = \"0\";\r\n\r\nconst myTheme = extendTheme({\r\n  components: {\r\n    Button: {\r\n      defaultProps: {\r\n      }\r\n    },\r\n  }\r\n})\r\n\r\n\r\nexport const App = () => (\r\n  <Router basename=\"/\">\r\n    <ChakraProvider theme={myTheme}>\r\n\r\n      <Box d=\"flex\" flexDir=\"column\" minH=\"100vh\">\r\n        <Box flex=\"1\">\r\n          <Switch>\r\n            <Route exact path=\"/\" component={HomePage} />\r\n            <Route exact path=\"/room/:slug\" component={SingleRoom} />\r\n            <Route exact path=\"/rooms/:slug\" component={RoomsPage} />\r\n            <Route exact path=\"/rooms/\" component={RoomsPage} />\r\n            <Route component={ErrorPage} />\r\n          </Switch>\r\n        </Box>\r\n\r\n        <Box flexShrink={0}>\r\n          <Footer />\r\n        </Box>\r\n      </Box>\r\n\r\n    </ChakraProvider>\r\n  </Router>\r\n)\r\n","import { ReportHandler } from \"web-vitals\"\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry)\r\n      getFID(onPerfEntry)\r\n      getFCP(onPerfEntry)\r\n      getLCP(onPerfEntry)\r\n      getTTFB(onPerfEntry)\r\n    })\r\n  }\r\n}\r\n\r\nexport default reportWebVitals\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://cra.link/PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === \"localhost\" ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === \"[::1]\" ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\r\n    ),\r\n)\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void\r\n}\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return\r\n    }\r\n\r\n    window.addEventListener(\"load\", () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config)\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            \"This web app is being served cache-first by a service \" +\r\n              \"worker. To learn more, visit https://cra.link/PWA\",\r\n          )\r\n        })\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config)\r\n      }\r\n    })\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then((registration) => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing\r\n        if (installingWorker == null) {\r\n          return\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === \"installed\") {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                \"New content is available and will be used when all \" +\r\n                  \"tabs for this page are closed. See https://cra.link/PWA.\",\r\n              )\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration)\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It is the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log(\"Content is cached for offline use.\")\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration)\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    })\r\n    .catch((error) => {\r\n      console.error(\"Error during service worker registration:\", error)\r\n    })\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { \"Service-Worker\": \"script\" },\r\n  })\r\n    .then((response) => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get(\"content-type\")\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then((registration) => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload()\r\n          })\r\n        })\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config)\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        \"No internet connection found. App is running in offline mode.\",\r\n      )\r\n    })\r\n}\r\n\r\nexport function unregister() {\r\n  if (\"serviceWorker\" in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then((registration) => {\r\n        registration.unregister()\r\n      })\r\n      .catch((error) => {\r\n        console.error(error.message)\r\n      })\r\n  }\r\n}\r\n","import { ColorModeScript } from \"@chakra-ui/react\"\r\nimport * as React from \"react\";\r\nimport ReactDOM from \"react-dom\"\r\nimport { App } from \"./App\"\r\nimport reportWebVitals from \"./reportWebVitals\"\r\nimport * as serviceWorker from \"./serviceWorker\"\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <ColorModeScript />\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\"),\r\n)\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://cra.link/PWA\r\nserviceWorker.unregister()\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals()\r\n"],"sourceRoot":""}