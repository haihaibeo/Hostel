[{"E:\\Repos\\hostel-chakra\\Hostel\\src\\index.tsx":"1","E:\\Repos\\hostel-chakra\\Hostel\\src\\reportWebVitals.ts":"2","E:\\Repos\\hostel-chakra\\Hostel\\src\\serviceWorker.ts":"3","E:\\Repos\\hostel-chakra\\Hostel\\src\\App.tsx":"4","E:\\Repos\\hostel-chakra\\Hostel\\src\\Pages\\SingleRoom.tsx":"5","E:\\Repos\\hostel-chakra\\Hostel\\src\\Pages\\ErrorPage.tsx":"6","E:\\Repos\\hostel-chakra\\Hostel\\src\\ColorModeSwitcher.tsx":"7","E:\\Repos\\hostel-chakra\\Hostel\\src\\Logo.tsx":"8","E:\\Repos\\hostel-chakra\\Hostel\\src\\Pages\\HomePage.tsx":"9","E:\\Repos\\hostel-chakra\\Hostel\\src\\Pages\\RoomsPage.tsx":"10","E:\\Repos\\hostel-chakra\\Hostel\\src\\Components\\HomeComponents\\PropertyTypeList.tsx":"11","E:\\Repos\\hostel-chakra\\Hostel\\src\\Components\\NavComponents\\SearchBar.tsx":"12","E:\\Repos\\hostel-chakra\\Hostel\\src\\Components\\NavComponents\\Navbar.tsx":"13","E:\\Repos\\hostel-chakra\\Hostel\\src\\Components\\FilterComponents\\RoomCardList.tsx":"14","E:\\Repos\\hostel-chakra\\Hostel\\src\\Components\\NavComponents\\PickRangeDay.tsx":"15","E:\\Repos\\hostel-chakra\\Hostel\\src\\Components\\NavComponents\\PopDetail.tsx":"16","E:\\Repos\\hostel-chakra\\Hostel\\src\\Components\\FilterComponents\\RoomCard.tsx":"17","E:\\Repos\\hostel-chakra\\Hostel\\src\\Components\\NavComponents\\Footer.tsx":"18","E:\\Repos\\hostel-chakra\\Hostel\\src\\Components\\SingleRoomComponents\\MyRoomBadge.tsx":"19","e:\\Repos\\hostel-chakra\\Hostel\\src\\index.tsx":"20","e:\\Repos\\hostel-chakra\\Hostel\\src\\reportWebVitals.ts":"21","e:\\Repos\\hostel-chakra\\Hostel\\src\\serviceWorker.ts":"22","e:\\Repos\\hostel-chakra\\Hostel\\src\\App.tsx":"23","e:\\Repos\\hostel-chakra\\Hostel\\src\\Pages\\HomePage.tsx":"24","e:\\Repos\\hostel-chakra\\Hostel\\src\\Pages\\SingleRoom.tsx":"25","e:\\Repos\\hostel-chakra\\Hostel\\src\\Pages\\RoomsPage.tsx":"26","e:\\Repos\\hostel-chakra\\Hostel\\src\\Pages\\ErrorPage.tsx":"27","e:\\Repos\\hostel-chakra\\Hostel\\src\\Components\\NavComponents\\Footer.tsx":"28","e:\\Repos\\hostel-chakra\\Hostel\\src\\Components\\NavComponents\\SearchBar.tsx":"29","e:\\Repos\\hostel-chakra\\Hostel\\src\\Components\\NavComponents\\PickRangeDay.tsx":"30","e:\\Repos\\hostel-chakra\\Hostel\\src\\Components\\NavComponents\\Navbar.tsx":"31","e:\\Repos\\hostel-chakra\\Hostel\\src\\Components\\NavComponents\\PopDetail.tsx":"32","e:\\Repos\\hostel-chakra\\Hostel\\src\\Components\\HomeComponents\\PropertyTypeList.tsx":"33","e:\\Repos\\hostel-chakra\\Hostel\\src\\Components\\SingleRoomComponents\\MyRoomBadge.tsx":"34","e:\\Repos\\hostel-chakra\\Hostel\\src\\Components\\FilterComponents\\RoomCardList.tsx":"35","e:\\Repos\\hostel-chakra\\Hostel\\src\\Logo.tsx":"36","e:\\Repos\\hostel-chakra\\Hostel\\src\\ColorModeSwitcher.tsx":"37","e:\\Repos\\hostel-chakra\\Hostel\\src\\Components\\FilterComponents\\RoomCard.tsx":"38","E:\\Repos\\hostel-chakra\\Hostel\\src\\Components\\RegisterButton.tsx":"39","E:\\Repos\\hostel-chakra\\Hostel\\src\\Components\\RegisterForm.tsx":"40","E:\\Repos\\hostel-chakra\\Hostel\\src\\Contexts\\AuthContext.tsx":"41","E:\\Repos\\hostel-chakra\\Hostel\\src\\Components\\LoginForm.tsx":"42","E:\\Repos\\hostel-chakra\\Hostel\\src\\Pages\\ProfilePage.tsx":"43","E:\\Repos\\hostel-chakra\\Hostel\\src\\Pages\\PublishRoomPage.tsx":"44","E:\\Repos\\hostel-chakra\\Hostel\\src\\API.ts":"45","E:\\Repos\\hostel-chakra\\Hostel\\src\\Pages\\PreviewRoomPage.tsx":"46","E:\\Repos\\hostel-chakra\\Hostel\\src\\Pages\\RegisterHostPage.tsx":"47","E:\\Repos\\hostel-chakra\\Hostel\\src\\Pages\\OwnerListProperty.tsx":"48","E:\\Repos\\hostel-chakra\\Hostel\\src\\Components\\FloatingForm.tsx":"49"},{"size":345,"mtime":1617925710355,"results":"50","hashOfConfig":"51"},{"size":431,"mtime":1612286281167,"results":"52","hashOfConfig":"51"},{"size":5404,"mtime":1612286281167,"results":"53","hashOfConfig":"51"},{"size":6480,"mtime":1623108670996,"results":"54","hashOfConfig":"51"},{"size":11922,"mtime":1623282424010,"results":"55","hashOfConfig":"51"},{"size":1605,"mtime":1620688917447,"results":"56","hashOfConfig":"51"},{"size":773,"mtime":1612286281164,"results":"57","hashOfConfig":"51"},{"size":614,"mtime":1612286281165,"results":"58","hashOfConfig":"51"},{"size":1892,"mtime":1620780799066,"results":"59","hashOfConfig":"51"},{"size":4633,"mtime":1620940588605,"results":"60","hashOfConfig":"51"},{"size":3203,"mtime":1620941418807,"results":"61","hashOfConfig":"51"},{"size":5633,"mtime":1621977014027,"results":"62","hashOfConfig":"51"},{"size":6114,"mtime":1622806560690,"results":"63","hashOfConfig":"51"},{"size":1891,"mtime":1623285801337,"results":"64","hashOfConfig":"51"},{"size":7189,"mtime":1622031257326,"results":"65","hashOfConfig":"51"},{"size":2254,"mtime":1620665435373,"results":"66","hashOfConfig":"51"},{"size":3716,"mtime":1623280244149,"results":"67","hashOfConfig":"51"},{"size":2524,"mtime":1621980996299,"results":"68","hashOfConfig":"51"},{"size":1847,"mtime":1613599095669,"results":"69","hashOfConfig":"51"},{"size":862,"mtime":1612286281166,"results":"70","hashOfConfig":"71"},{"size":431,"mtime":1612286281167,"results":"72","hashOfConfig":"71"},{"size":5404,"mtime":1612286281167,"results":"73","hashOfConfig":"71"},{"size":1405,"mtime":1613435563432,"results":"74","hashOfConfig":"71"},{"size":1187,"mtime":1613423994602,"results":"75","hashOfConfig":"71"},{"size":11934,"mtime":1613608974661,"results":"76","hashOfConfig":"71"},{"size":826,"mtime":1613605467202,"results":"77","hashOfConfig":"71"},{"size":173,"mtime":1612286281165,"results":"78","hashOfConfig":"71"},{"size":690,"mtime":1613435526288,"results":"79","hashOfConfig":"71"},{"size":3214,"mtime":1613608551630,"results":"80","hashOfConfig":"71"},{"size":3977,"mtime":1613608465743,"results":"81","hashOfConfig":"71"},{"size":1768,"mtime":1613606848363,"results":"82","hashOfConfig":"71"},{"size":3126,"mtime":1613423216595,"results":"83","hashOfConfig":"71"},{"size":1475,"mtime":1613423216593,"results":"84","hashOfConfig":"71"},{"size":1847,"mtime":1613599095669,"results":"85","hashOfConfig":"71"},{"size":1318,"mtime":1613606682010,"results":"86","hashOfConfig":"71"},{"size":614,"mtime":1612286281165,"results":"87","hashOfConfig":"71"},{"size":773,"mtime":1612286281164,"results":"88","hashOfConfig":"71"},{"size":3020,"mtime":1613608660633,"results":"89","hashOfConfig":"71"},{"size":997,"mtime":1616100395255,"results":"90","hashOfConfig":"51"},{"size":6298,"mtime":1616103124415,"results":"91","hashOfConfig":"51"},{"size":4938,"mtime":1622160616534,"results":"92","hashOfConfig":"51"},{"size":5901,"mtime":1620396689978,"results":"93","hashOfConfig":"51"},{"size":10491,"mtime":1623285901401,"results":"94","hashOfConfig":"51"},{"size":23731,"mtime":1623285715064,"results":"95","hashOfConfig":"51"},{"size":6180,"mtime":1623284542719,"results":"96","hashOfConfig":"51"},{"size":553,"mtime":1619174350149,"results":"97","hashOfConfig":"51"},{"size":2209,"mtime":1620688353319,"results":"98","hashOfConfig":"51"},{"size":746,"mtime":1623188324949,"results":"99","hashOfConfig":"51"},{"size":9428,"mtime":1623281914825,"results":"100","hashOfConfig":"51"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"103"},"13hiuhw",{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"111","usedDeprecatedRules":"103"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"114","messages":"115","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"116","usedDeprecatedRules":"103"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"103"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"103"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"103"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":0,"source":"125","usedDeprecatedRules":"103"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"128","usedDeprecatedRules":"103"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"131","usedDeprecatedRules":"103"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"134","usedDeprecatedRules":"103"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"137","messages":"138","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"139","usedDeprecatedRules":"103"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"142","usedDeprecatedRules":"103"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"145","messages":"146","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"147","usedDeprecatedRules":"103"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"150","usedDeprecatedRules":"103"},{"filePath":"151","messages":"152","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"99iabf",{"filePath":"153","messages":"154","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"155","messages":"156","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"157","messages":"158","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"159","messages":"160","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"161","messages":"162","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"163","messages":"164","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"165","messages":"166","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"167","messages":"168","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"169","messages":"170","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"171","messages":"172","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"173","messages":"174","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"175","messages":"176","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"177","messages":"178","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"179","messages":"180","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"181","messages":"182","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"183","messages":"184","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"185","messages":"186","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"187","messages":"188","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"189","messages":"190","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"191"},{"filePath":"192","messages":"193","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"194","usedDeprecatedRules":"191"},{"filePath":"195","messages":"196","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"197","usedDeprecatedRules":"103"},{"filePath":"198","messages":"199","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"200","usedDeprecatedRules":"103"},{"filePath":"201","messages":"202","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"203","messages":"204","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"205","messages":"206","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"207","messages":"208","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"103"},{"filePath":"209","messages":"210","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"103"},{"filePath":"211","messages":"212","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"103"},{"filePath":"213","messages":"214","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"E:\\Repos\\hostel-chakra\\Hostel\\src\\index.tsx",[],["215","216"],"E:\\Repos\\hostel-chakra\\Hostel\\src\\reportWebVitals.ts",[],["217","218"],"E:\\Repos\\hostel-chakra\\Hostel\\src\\serviceWorker.ts",[],"E:\\Repos\\hostel-chakra\\Hostel\\src\\App.tsx",["219","220","221","222","223"],"import * as React from \"react\"\r\nimport {\r\n  ChakraProvider,\r\n  Box,\r\n  extendTheme,\r\n  Divider,\r\n  useBreakpointValue,\r\n} from \"@chakra-ui/react\"\r\nimport { HashRouter, Route, Switch, BrowserRouter, Redirect, RouteProps, useLocation, useHistory } from 'react-router-dom'\r\nimport HomePage from \"./Pages/HomePage\";\r\nimport SingleRoom from \"./Pages/SingleRoom\";\r\nimport ErrorPage from \"./Pages/ErrorPage\";\r\nimport RoomsPage from \"./Pages/RoomsPage\";\r\nimport \"./App.css\";\r\nimport { mode } from \"@chakra-ui/theme-tools\";\r\nimport \"slick-carousel/slick/slick.css\";\r\nimport \"slick-carousel/slick/slick-theme.css\";\r\nimport Footer from \"./Components/NavComponents/Footer\";\r\nimport { QueryClient, QueryClientProvider } from \"react-query\";\r\nimport { AuthContext, AuthProvider } from \"./Contexts/AuthContext\";\r\nimport ProfilePage from \"./Pages/ProfilePage\";\r\nimport Navbar from \"./Components/NavComponents/Navbar\";\r\nimport PublishRoomPage from \"./Pages/PublishRoomPage\";\r\nimport LoginForm from \"./Components/LoginForm\";\r\nimport LoadingBar from \"react-top-loading-bar\";\r\nimport PreviewRoomPage from \"./Pages/PreviewRoomPage\";\r\nimport RegisterHostPage from \"./Pages/RegisterHostPage\";\r\nimport { axAuth } from \"./API\";\r\nimport OwnerListProperty from \"./Pages/OwnerListProperty\";\r\n// theme.components.Button.baseStyle.borderRadius = \"0\";\r\n\r\nconst myTheme = extendTheme({\r\n  config: {\r\n    initialColorMode: \"dark\"\r\n  },\r\n  components: {\r\n    Button: {\r\n      defaultProps: {\r\n      }\r\n    },\r\n  }\r\n})\r\n\r\nconst queryClient = new QueryClient({\r\n  defaultOptions: {\r\n    queries: {\r\n\r\n    }\r\n  }\r\n});\r\n\r\n\r\nexport const App = () => {\r\n  const loadingRef = React.useRef<any>(null);\r\n  // loading bar will appear when a request is sended\r\n  // and disappear when get a response\r\n  // REMINDER: this is a fastest way to indicate top loading bar,\r\n  // but not in a very elegant way, should put it in a context and update manually in component\r\n  React.useEffect(() => {\r\n    loadingRef.current.complete();\r\n\r\n    axAuth.interceptors.request.use((config) => {\r\n      loadingRef.current.staticStart();\r\n      return config;\r\n    }, (e) => {\r\n      loadingRef.current.complete();\r\n      return Promise.reject(e);\r\n    })\r\n\r\n    axAuth.interceptors.response.use((config) => {\r\n      loadingRef.current.complete();\r\n      return config;\r\n    }, (e) => {\r\n      loadingRef.current.complete();\r\n      return Promise.reject(e);\r\n    })\r\n  }, [])\r\n\r\n  return (\r\n    <HashRouter basename=\"/\">\r\n      <ChakraProvider theme={myTheme}>\r\n        <QueryClientProvider client={queryClient}>\r\n          <Box d=\"flex\" flexDir=\"column\" minH=\"100vh\">\r\n            <AuthProvider>\r\n              {/* <ScrollToTop /> */}\r\n              <Box flex=\"1\">\r\n                <LoadingBar color=\"#f11946\" ref={loadingRef}></LoadingBar>\r\n                <Switch>\r\n                  <Route exact path=\"/\" >\r\n                    <HomePage />\r\n                  </Route>\r\n\r\n                  <Route component={LoginPage} exact path=\"/login\"\r\n                    render={({ location }) =>\r\n                      <Redirect to={{ pathname: \"/login\", state: { from: location } }} />\r\n                    }\r\n                  />\r\n                  <Box mx={{ base: \"10px\", md: \"50px\", lg: \"100px\" }} mt=\"5\">\r\n                    <Navbar></Navbar>\r\n                    <Switch>\r\n                      <Route exact path=\"/rooms/:slug\" component={SingleRoom} />\r\n                      <Route exact path=\"/rooms\" component={RoomsPage} />\r\n                      <Route exact path=\"/room/preview\" component={PreviewRoomPage} />\r\n                      <AuthRoute exact path=\"/profile\" component={ProfilePage}></AuthRoute>\r\n                      <RoleRoute roles={[\"Owner\"]} path=\"/host/publish\" component={PublishRoomPage}></RoleRoute>\r\n                      <AuthRoute exact path=\"/user/register-host\" component={RegisterHostPage}></AuthRoute>\r\n                      <RoleRoute roles={[\"Admin\"]} exact path=\"/admin\"></RoleRoute>\r\n                      <RoleRoute roles={[\"Owner\"]} path=\"/host/properties\">\r\n                        <OwnerListProperty />\r\n                      </RoleRoute>\r\n                      <Route component={ErrorPage} />\r\n                    </Switch>\r\n                  </Box>\r\n                </Switch>\r\n              </Box>\r\n            </AuthProvider>\r\n            <Divider mt=\"10\" />\r\n            <Footer mx={{ base: \"10px\", md: \"50px\", lg: \"100px\" }} />\r\n          </Box>\r\n\r\n        </QueryClientProvider>\r\n      </ChakraProvider>\r\n    </HashRouter>\r\n  )\r\n};\r\n\r\ninterface LocationState {\r\n  from: {\r\n    pathname: string;\r\n  };\r\n}\r\n\r\nconst LoginPage = () => {\r\n  const location = useLocation<LocationState>();\r\n  const auth = React.useContext(AuthContext);\r\n\r\n  let { from } = location.state || { from: { pathname: \"/\" } };\r\n  if (auth.user) return <Redirect to={from}></Redirect>\r\n\r\n  return (\r\n    <Box mx=\"20%\" mt=\"10\" flex=\"0\">\r\n      <Navbar />\r\n      <LoginForm isRegistering={false}></LoginForm>\r\n    </Box>\r\n  );\r\n}\r\n\r\nconst AuthRoute: React.FC<RouteProps> = ({ children, ...rest }) => {\r\n  let auth = React.useContext(AuthContext);\r\n  if (auth.user) return (<Route {...rest}>{children}</Route>)\r\n\r\n  else return (<Route {...rest}>\r\n    <Redirect to={{\r\n      pathname: \"/login\",\r\n      state: {\r\n        from: rest.path\r\n      },\r\n      ...rest.location\r\n    }} />\r\n  </Route>)\r\n}\r\n\r\ntype RoleRouteProps = {\r\n  roles: AppRole[];\r\n}\r\n\r\nconst RoleRoute = (props: RoleRouteProps & RouteProps) => {\r\n  const { roles, children, ...rest } = props;\r\n  const auth = React.useContext(AuthContext);\r\n\r\n  if (!auth.user) return (<Route {...rest}>\r\n    <Redirect to={{\r\n      pathname: \"/login\",\r\n      state: {\r\n        from: rest.path\r\n      },\r\n      ...rest.location,\r\n    }} />\r\n  </Route>)\r\n\r\n  const ifContainsAll = (haystack?: string[] | string, needles?: string[]) => {\r\n    if (!haystack) return false;\r\n    if (!needles) return true;\r\n\r\n    for (const n of needles) {\r\n      if (!haystack.includes(n)) return false;\r\n    }\r\n    return true;\r\n  }\r\n\r\n  if (ifContainsAll(auth.user?.roles, roles)) return (<Route {...rest}>{children}</Route>)\r\n  else return (\r\n    <Route {...rest}>\r\n      <Redirect to={{\r\n        pathname: \"/error\",\r\n        state: {\r\n          message: \"You are not authorized\"\r\n        }\r\n      }}></Redirect>\r\n    </Route>\r\n  )\r\n}\r\n\r\nconst ScrollToTop = () => {\r\n  const { pathname } = useLocation();\r\n  React.useEffect(() => {\r\n    window.scrollTo(0, 0);\r\n  }, [pathname])\r\n\r\n  return null;\r\n}\r\n","E:\\Repos\\hostel-chakra\\Hostel\\src\\Pages\\SingleRoom.tsx",["224","225","226","227","228","229","230"],"E:\\Repos\\hostel-chakra\\Hostel\\src\\Pages\\ErrorPage.tsx",["231"],"import { Alert, AlertDescription, AlertIcon, AlertTitle, Box } from '@chakra-ui/react'\r\nimport React from 'react'\r\nimport { useLocation } from 'react-router'\r\n\r\ntype ErrorLocationState = {\r\n    message: string;\r\n}\r\n\r\nconst ErrorPage = () => {\r\n    const location = useLocation<ErrorLocationState>();\r\n    if (location.state) {\r\n        const { message } = location.state;\r\n        return <Alert\r\n            status=\"error\"\r\n            variant=\"subtle\"\r\n            flexDirection=\"column\"\r\n            alignItems=\"center\"\r\n            justifyContent=\"center\"\r\n            textAlign=\"center\"\r\n            height=\"200px\"\r\n        >\r\n            <AlertIcon boxSize=\"40px\" mr={0} />\r\n            <AlertTitle mt={4} mb={1} fontSize=\"lg\">\r\n                {message}\r\n            </AlertTitle>\r\n            <AlertDescription maxWidth=\"md\">\r\n                Look like you have some problems! Contact us for more info!\r\n                </AlertDescription>\r\n        </Alert>\r\n    }\r\n    return (\r\n        <Alert\r\n            status=\"info\"\r\n            variant=\"subtle\"\r\n            flexDirection=\"column\"\r\n            alignItems=\"center\"\r\n            justifyContent=\"center\"\r\n            textAlign=\"center\"\r\n            height=\"200px\"\r\n        >\r\n            <AlertIcon boxSize=\"40px\" mr={0} />\r\n            <AlertTitle mt={4} mb={1} fontSize=\"lg\">\r\n                Not Found!\r\n            </AlertTitle>\r\n            <AlertDescription maxWidth=\"md\">\r\n                The page you are looking does not exist or was deleted\r\n                </AlertDescription>\r\n        </Alert>\r\n    )\r\n}\r\n\r\nexport default ErrorPage;","E:\\Repos\\hostel-chakra\\Hostel\\src\\ColorModeSwitcher.tsx",[],"E:\\Repos\\hostel-chakra\\Hostel\\src\\Logo.tsx",[],"E:\\Repos\\hostel-chakra\\Hostel\\src\\Pages\\HomePage.tsx",[],"E:\\Repos\\hostel-chakra\\Hostel\\src\\Pages\\RoomsPage.tsx",["232","233","234","235","236","237","238","239","240","241","242","243","244","245","246","247"],"import { Box, CircularProgress, Divider, HStack, InputLeftAddon, NumberDecrementStepper, NumberIncrementStepper, NumberInput, NumberInputField, NumberInputStepper, Portal, Slider, SliderFilledTrack, SliderThumb, SliderTrack, Spinner, Tag, TagCloseButton, TagLabel, TagProps, useColorModeValue } from '@chakra-ui/react';\r\nimport React from 'react'\r\nimport { useQuery } from 'react-query';\r\nimport { useLocation } from 'react-router-dom';\r\nimport { fetchPropertiesView } from '../API';\r\nimport RoomCardList from '../Components/FilterComponents/RoomCardList';\r\nimport SearchBar from '../Components/NavComponents/SearchBar';\r\nimport { MdGraphicEq } from \"react-icons/md\";\r\n\r\ntype RoomsPageLocationState = {\r\n    type?: PropertyTypeType;\r\n    search?: SearchQuery;\r\n}\r\n\r\n\r\nconst RoomsPage = () => {\r\n    const queryStr = new URLSearchParams(useLocation().search);\r\n    const searchBoxColor = useColorModeValue(\"gray.100\", \"gray.900\");\r\n\r\n    const location = useLocation<RoomsPageLocationState>();\r\n\r\n    const [search, setSearch] = React.useState<SearchQuery>({ childrenNum: 0, guestNum: 0 });\r\n    const [type, setType] = React.useState<PropertyTypeType>();\r\n\r\n    const updateSearch = (search: SearchQuery) => {\r\n        setSearch(search);\r\n    }\r\n\r\n    React.useEffect(() => {\r\n        if (location.state !== undefined && location.state.search) {\r\n            setSearch(location.state.search)\r\n        }\r\n        if (location.state !== undefined && location.state.type) {\r\n            setType(location.state.type);\r\n        }\r\n    }, [])\r\n\r\n    let queryKeys = [type?.id, search];\r\n\r\n    const { data, isLoading, error, refetch, remove } = useQuery([\"propertyView\", queryKeys], () => fetchPropertiesView(type?.id, search),\r\n        {\r\n            staleTime: 1000 * 60\r\n        });\r\n\r\n    if (error) {\r\n        return <>Error</>\r\n    }\r\n\r\n    return (\r\n        <Box d=\"flex\" flexDir=\"column\" gridGap=\"5\">\r\n            <Box position={{ lg: \"sticky\" }} top={0}\r\n                bgColor={searchBoxColor} d=\"flex\" flexDir=\"column\"\r\n                boxShadow=\"2xl\"\r\n                gridGap=\"5\" pb=\"5\"\r\n            >\r\n                <SearchBar search={search}\r\n                    updateSearch={updateSearch}\r\n                    isLoading={isLoading}\r\n                    onClickSearch={() => { remove(); refetch(); }}\r\n                />\r\n                <HStack>\r\n                    {/* type tag */}\r\n                    {type && <QueryTag label={\"Property type: \" + type.propertyType}\r\n                        onClose={() => { setType(undefined) }}\r\n                    />}\r\n\r\n                    {/* city tag */}\r\n                    {search.city && <QueryTag label={search.city}\r\n                        onClose={() => { setSearch(s => ({ ...s, city: \"\" })) }}\r\n                    />}\r\n\r\n                    {/* from date tag */}\r\n                    {search.from && <QueryTag label={\"From: \" + search.from.toLocaleDateString()}\r\n                        onClose={() => { setSearch(s => ({ ...s, from: undefined })) }}\r\n                    />}\r\n\r\n                    {/* to date tag */}\r\n                    {search.to && <QueryTag label={\"To: \" + search.to.toLocaleDateString()}\r\n                        onClose={() => { setSearch(s => ({ ...s, to: undefined })) }}\r\n                    />}\r\n\r\n                    {/* guest num tag */}\r\n                    {search.guestNum > 0 && <QueryTag label={search.guestNum + \" guests\"}\r\n                        onClose={() => { setSearch(s => ({ ...s, guestNum: 0 })) }}\r\n                    />}\r\n\r\n                    {/* children num tag */}\r\n                    {search.childrenNum > 0 && <QueryTag label={search.childrenNum + \" children\"}\r\n                        onClose={() => { setSearch(s => ({ ...s, childrenNum: 0 })) }}\r\n                    />}\r\n                </HStack>\r\n            </Box>\r\n            <Box as=\"h3\" mb=\"5\" fontSize=\"4xl\" fontWeight=\"bold\" >Find place that fits you most...</Box>\r\n            {isLoading ?\r\n                <Spinner color=\"green\" size=\"lg\" alignSelf=\"center\" />\r\n                :\r\n                <RoomCardList rooms={data?.data}></RoomCardList>\r\n            }\r\n        </Box>\r\n    )\r\n}\r\n\r\ntype QueryTagProps = {\r\n    label: string;\r\n    onClose: () => void;\r\n}\r\nconst QueryTag = (props: QueryTagProps & TagProps) => {\r\n    const { label, onClose, ...tagProps } = props;\r\n\r\n    return (\r\n        <Tag size=\"lg\" colorScheme=\"green\" {...tagProps}>\r\n            <TagLabel>\r\n                {props.label}\r\n            </TagLabel>\r\n            <TagCloseButton onClick={() => props.onClose()} />\r\n        </Tag>\r\n    );\r\n}\r\n\r\nexport default RoomsPage;","E:\\Repos\\hostel-chakra\\Hostel\\src\\Components\\HomeComponents\\PropertyTypeList.tsx",["248","249","250","251","252","253"],"import { Box, Flex, Grid, Link as ChakraLink, Spacer, VStack, Image, Tooltip, Button } from '@chakra-ui/react';\r\nimport React from 'react';\r\nimport { Link, useHistory } from \"react-router-dom\"\r\nimport Slider, { Settings } from 'react-slick';\r\nimport \"slick-carousel/slick/slick.css\";\r\nimport \"slick-carousel/slick/slick-theme.css\";\r\nimport { isError, useQuery } from 'react-query';\r\nimport { fetchPropertyTypes } from '../../API';\r\n\r\nvar settings: Settings = {\r\n    dots: true,\r\n    infinite: true,\r\n    speed: 500,\r\n    slidesToShow: 4,\r\n    slidesToScroll: 1,\r\n    initialSlide: 0,\r\n    swipeToSlide: true,\r\n    responsive: [\r\n        {\r\n            breakpoint: 1024,\r\n            settings: {\r\n                slidesToShow: 4,\r\n                slidesToScroll: 1,\r\n                infinite: true,\r\n                dots: true\r\n            }\r\n        },\r\n        {\r\n            breakpoint: 600,\r\n            settings: {\r\n                slidesToShow: 3,\r\n                slidesToScroll: 1,\r\n                initialSlide: 2\r\n            }\r\n        },\r\n        {\r\n            breakpoint: 480,\r\n            settings: {\r\n                slidesToShow: 1,\r\n                slidesToScroll: 1\r\n            }\r\n        }\r\n    ]\r\n};\r\n\r\nconst PropertyTypeList = () => {\r\n    const { data, isError, isFetching } = useQuery<unknown, unknown, PropertyTypeType[]>(\"propertypeList\", fetchPropertyTypes, {\r\n        staleTime: 1000 * 60 * 10\r\n    });\r\n\r\n    if (isFetching) console.log(\"refetching prop\")\r\n\r\n    if (isError) return <Box>Something's wrong</Box>\r\n    return (\r\n        <div>\r\n            <Slider {...settings}>\r\n                {data?.map((d, key) => <PropertyType type={d} key={key} />)}\r\n            </Slider>\r\n        </div>\r\n    )\r\n}\r\n\r\ntype PropertyTypeProps = {\r\n    type: PropertyTypeType;\r\n}\r\n\r\n\r\n\r\nconst PropertyType: React.FC<PropertyTypeProps> = ({ type, children }) => {\r\n    const history = useHistory();\r\n\r\n    const handlePropTypeClick = () => {\r\n        history.push({\r\n            pathname: \"/rooms\",\r\n            state: {\r\n                type: type\r\n            }\r\n        })\r\n    }\r\n\r\n    return (\r\n        <VStack alignItems=\"start\" p=\"4\">\r\n            <ChakraLink onClick={handlePropTypeClick}>\r\n                <Tooltip hasArrow placement=\"top\" aria-label={\"tooltips\"} label={type.description} openDelay={500}>\r\n                    <Box>\r\n                        <Box maxW=\"sm\" maxH=\"sm\" minH=\"100px\">\r\n                            <Image width=\"inherit\" height=\"inherit\" src={type.thumbnailImg} objectFit=\"cover\"></Image>\r\n                        </Box>\r\n\r\n                        <Box\r\n                            mt=\"1\"\r\n                            fontWeight=\"semibold\"\r\n                            as=\"h4\"\r\n                            lineHeight=\"tight\"\r\n                            isTruncated\r\n                        >\r\n                            {type.propertyType}\r\n                        </Box>\r\n                    </Box>\r\n                </Tooltip>\r\n            </ChakraLink>\r\n            <Box color=\"gray.500\" fontSize=\"md\">\r\n                {type.count + \" \" + type.propertyType + \"\"}\r\n            </Box>\r\n        </VStack>\r\n    )\r\n}\r\n\r\nexport default PropertyTypeList;","E:\\Repos\\hostel-chakra\\Hostel\\src\\Components\\NavComponents\\SearchBar.tsx",["254","255","256","257","258","259"],"import { Box, Button, Center, Flex, Input, InputGroup, InputLeftElement, InputRightElement, Popover, PopoverContent, PopoverTrigger, Portal, Spinner, useColorModeValue } from '@chakra-ui/react';\r\nimport axios from 'axios';\r\nimport React from 'react';\r\nimport { BsSearch } from 'react-icons/bs';\r\nimport { useQuery } from 'react-query';\r\nimport { Redirect, useHistory } from 'react-router';\r\nimport { fetchCities } from '../../API';\r\n// import 'react-day-picker/lib/style.css';\r\nimport PickRangeDay from './PickRangeDay';\r\nimport PopDetail from './PopDetail';\r\n\r\nexport type CityResponse = {\r\n    cityName: string;\r\n    id: string;\r\n    countryName: string;\r\n    countryId: string;\r\n}\r\n\r\ntype SearchBarProps = {\r\n    search: SearchQuery;\r\n    isLoading?: boolean;\r\n    updateSearch?: (search: SearchQuery) => void;\r\n    onClickSearch?: () => void;\r\n}\r\n\r\nconst defaultValue: SearchQuery = {\r\n    guestNum: 0,\r\n    childrenNum: 0,\r\n}\r\n\r\n\r\nconst SearchBar = (props: SearchBarProps) => {\r\n    const { data: cities, isLoading, status } = useQuery<unknown, unknown, CityResponse[]>(\"cities\", fetchCities, {\r\n        staleTime: 1000 * 60 * 10\r\n    });\r\n    const history = useHistory();\r\n\r\n    const { search: form } = props;\r\n\r\n    React.useEffect(() => {\r\n        if (props.updateSearch) {\r\n            console.log(\"update form\")\r\n            props.updateSearch(form);\r\n        }\r\n    }, [form])\r\n\r\n    // if (isLoading) return <>loading...</>;\r\n\r\n    const UpdateDate = (from?: Date, to?: Date) => {\r\n        if (props.updateSearch) {\r\n            props?.updateSearch({\r\n                ...props.search,\r\n                from: from,\r\n                to: to\r\n            });\r\n        }\r\n    }\r\n\r\n    const UpdatePeople = (adult: number, children: number) => {\r\n        if (props.updateSearch) {\r\n            props?.updateSearch({\r\n                ...props.search,\r\n                guestNum: adult,\r\n                childrenNum: children\r\n            });\r\n        }\r\n    }\r\n\r\n    const UpdateCity = (city: string) => {\r\n        if (props.updateSearch) {\r\n            props?.updateSearch({\r\n                ...props.search,\r\n                city: city\r\n            });\r\n        }\r\n    }\r\n\r\n    const handleSearchClick = () => {\r\n        history.push({\r\n            pathname: \"/rooms\",\r\n            state: {\r\n                search: props.search\r\n            }\r\n        })\r\n    }\r\n\r\n    return (\r\n        <Box p=\"2\" border=\"1px\" borderColor=\"yellow.400\" style={{ backdropFilter: \"blur(5px)\" }}>\r\n            <Flex display={{ lg: \"flex\" }} alignItems=\"center\">\r\n                <InputGroup>\r\n                    <InputLeftElement pointerEvents=\"none\" children={<BsSearch />} />\r\n                    <Input list=\"datalist-cities\" placeholder=\"City\" size=\"lg\" borderRadius=\"0\"\r\n                        onChange={(e) => UpdateCity(e.target.value)}\r\n                        value={props.search.city}\r\n                    />\r\n                    {isLoading ? <InputRightElement children={<Spinner alignSelf=\"center\" />}></InputRightElement> :\r\n                        <datalist id=\"datalist-cities\">\r\n                            {cities?.map(c => {\r\n                                return <option key={c.id} value={c.cityName} />\r\n                            })}\r\n                        </datalist>\r\n                    }\r\n                </InputGroup>\r\n                <Popover closeOnBlur={true}>\r\n                    <PopoverTrigger>\r\n                        <Button variant=\"outline\" w={[\"100%\", \"100%\", \"100%\", \"150%\"]}\r\n                            size=\"lg\" _focusVisible={{ border: \"0\" }} borderRadius=\"0\" px=\"2\">\r\n                            {form?.from?.toLocaleDateString() || \"From\"} - {form?.to?.toLocaleDateString() || \"To\"}\r\n                        </Button>\r\n                    </PopoverTrigger>\r\n                    <Portal>\r\n                        <PopoverContent\r\n                            flexWrap=\"nowrap\" alignItems=\"center\" style={{ backdropFilter: \"blur(5px)\" }}\r\n                            w=\"100%\" borderRadius=\"0\"\r\n                            bgColor={useColorModeValue(\"gray.100\", \"gray.800\")}\r\n                        >\r\n                            <PickRangeDay updateDate={UpdateDate} />\r\n                        </PopoverContent>\r\n                    </Portal>\r\n                </Popover>\r\n                <Popover>\r\n                    <PopoverTrigger>\r\n                        <Button variant=\"outline\" w={[\"100%\", \"100%\", \"100%\", \"150%\"]} size=\"lg\"\r\n                            borderRadius=\"0\" px=\"2\"\r\n                        >\r\n                            {form.guestNum + ' guests - ' + form.childrenNum + ' children'}\r\n                        </Button>\r\n                    </PopoverTrigger>\r\n                    <Portal>\r\n                        <PopoverContent flexWrap=\"nowrap\" borderRadius=\"0\" bg=\"inherit\"\r\n                            bgColor={useColorModeValue(\"gray.100\", \"gray.800\")}\r\n                        >\r\n                            <PopDetail updatePeople={UpdatePeople} guest={form.guestNum!} children={form.childrenNum!}></PopDetail>\r\n                        </PopoverContent>\r\n                    </Portal>\r\n                </Popover>\r\n                <Button alignSelf=\"center\" size=\"lg\" minW=\"100px\" ml={[0, 0, 0, 2]}\r\n                    onClick={props.onClickSearch ? props.onClickSearch : handleSearchClick}\r\n                    isLoading={props.isLoading}\r\n                    mt={[2, 2, 2, 0]} w={[\"100%\", \"100%\", \"100%\", \"30%\"]} borderRadius=\"0\">\r\n                    Search\r\n                </Button>\r\n            </Flex>\r\n        </Box>\r\n    )\r\n}\r\n\r\nexport default SearchBar;","E:\\Repos\\hostel-chakra\\Hostel\\src\\Components\\NavComponents\\Navbar.tsx",["260","261","262","263"],"import React, { FC } from 'react';\r\nimport { Box, BoxProps, Button, Center, DarkMode, Flex, Heading, HStack, Menu, MenuButton, MenuDivider, MenuItem, MenuList, Modal, ModalBody, ModalCloseButton, ModalContent, ModalHeader, ModalOverlay, Spacer, useColorModeValue, useDisclosure } from '@chakra-ui/react';\r\nimport { ColorModeSwitcher } from '../../ColorModeSwitcher';\r\nimport { Logo } from \"../../Logo\";\r\nimport { Link as RouterLink, useLocation } from 'react-router-dom';\r\nimport { AuthContext } from '../../Contexts/AuthContext';\r\nimport { BsBell, BsBookmark, BsBoxArrowDown, BsCalendar, BsChevronDown, BsHouse, BsLock, BsPerson } from 'react-icons/bs';\r\nimport LoginForm from '../LoginForm';\r\n\r\nconst Navbar: FC<BoxProps> = ({ ...props }) => {\r\n    const auth = React.useContext(AuthContext);\r\n    const loginFormModal = useDisclosure();\r\n    const initRef = React.useRef<HTMLInputElement>(null);\r\n    const [isRegistering, setIsRegistering] = React.useState(false);\r\n\r\n    // check if we are at homepage, then do a bit of theme modification\r\n    const { pathname } = useLocation();\r\n    const bgColorMenuWhenHome = useColorModeValue(\"gray.800\", \"gray.800\");\r\n    const colorMenuWhenHome = useColorModeValue(\"white\", \"white\");\r\n\r\n    const becomehostColor = useColorModeValue(\"cyan.200\", \"blue.400\");\r\n\r\n    return (\r\n        <Box marginBottom={[\"5%\"]} {...props}>\r\n            <Flex justifyContent=\"center\" alignItems=\"center\">\r\n                <RouterLink to=\"/\">\r\n                    <HStack spacing={4}>\r\n                        <Center>\r\n                            <Logo />\r\n                        </Center>\r\n                        <Heading size=\"md\" display={{ base: \"none\", sm: \"block\" }}>Nice homestays</Heading>\r\n                    </HStack>\r\n                </RouterLink>\r\n                <Spacer />\r\n                <HStack spacing={4}>\r\n                    <ColorModeSwitcher />\r\n                    {auth.user === undefined ?\r\n                        <>\r\n                            <Button variant=\"ghost\" onClick={() => { loginFormModal.onOpen(); setIsRegistering(false); }}>Login</Button>\r\n                            <Modal isOpen={loginFormModal.isOpen} onClose={loginFormModal.onClose} size=\"xl\" motionPreset=\"slideInBottom\" isCentered initialFocusRef={initRef}>\r\n                                <ModalOverlay />\r\n\r\n                                <ModalContent>\r\n                                    <ModalHeader>{isRegistering ? \"Sign up new account\" : \"Login\"}</ModalHeader>\r\n                                    <ModalCloseButton />\r\n                                    <ModalBody pb=\"2\">\r\n                                        <LoginForm initRef={initRef} isRegistering={isRegistering}></LoginForm>\r\n                                    </ModalBody>\r\n                                </ModalContent>\r\n                            </Modal>\r\n                            <Button variant=\"ghost\" onClick={() => { loginFormModal.onOpen(); setIsRegistering(true); }}>Register</Button>\r\n                        </> :\r\n                        <>\r\n                            <Menu>\r\n                                <MenuButton as={Button} variant=\"ghost\" rightIcon={<BsChevronDown />}>\r\n                                    {auth.user.name}\r\n                                </MenuButton>\r\n                                <MenuList>\r\n                                    <MenuItem as={RouterLink} to=\"/profile?view=likes\">\r\n                                        <Box mr={\"3\"}><BsBookmark /></Box>\r\n                                        Saved rooms\r\n                                    </MenuItem>\r\n                                    <MenuItem as={RouterLink} to=\"/profile?view=reservations\">\r\n                                        <Box mr={\"3\"}><BsCalendar /></Box>\r\n                                        Your Reservations\r\n                                    </MenuItem>\r\n                                    <MenuItem as={RouterLink} to=\"/profile?view=notifications\">\r\n                                        <Box mr=\"3\"><BsBell /></Box>\r\n                                        Notifications\r\n                                    </MenuItem>\r\n                                    <MenuDivider />\r\n                                    {auth.user.roles?.includes(\"Owner\") ?\r\n                                        <>\r\n                                            <MenuItem as={RouterLink} to=\"/host/publish\">\r\n                                                <Box mr=\"3\"><BsLock /></Box>\r\n                                        Host your property\r\n                                        </MenuItem>\r\n                                            <MenuItem as={RouterLink} to=\"/host/properties\">\r\n                                                <Box mr=\"3\"><BsHouse /></Box>\r\n                                        Your properties\r\n                                        </MenuItem>\r\n                                        </>\r\n                                        :\r\n                                        <MenuItem bg={becomehostColor} as={RouterLink} to=\"/user/register-host\">\r\n                                            <Box mr=\"3\"><BsLock /></Box>\r\n                                        Become a host\r\n                                        </MenuItem>\r\n                                    }\r\n                                    <MenuItem as={RouterLink} to=\"/\">\r\n                                        <Box mr=\"3\"><BsPerson /></Box>\r\n                                        Account\r\n                                    </MenuItem>\r\n                                    <MenuDivider />\r\n                                    <MenuItem onClick={() => auth.logoutAsync()}>\r\n                                        <Box mr=\"3\"><BsBoxArrowDown /></Box>\r\n                                        Log Out\r\n                                    </MenuItem>\r\n                                </MenuList>\r\n                            </Menu>\r\n                        </>\r\n                    }\r\n                </HStack>\r\n            </Flex>\r\n        </Box>\r\n    )\r\n}\r\n\r\nexport default Navbar;","E:\\Repos\\hostel-chakra\\Hostel\\src\\Components\\FilterComponents\\RoomCardList.tsx",["264","265"],"E:\\Repos\\hostel-chakra\\Hostel\\src\\Components\\NavComponents\\PickRangeDay.tsx",["266","267","268","269","270"],"import { Box, BoxProps, Button, Center, Flex, useBreakpointValue, useColorModeValue, useMediaQuery, useToast } from '@chakra-ui/react';\r\nimport React from 'react'\r\nimport DayPicker from 'react-day-picker';\r\nimport { DateUtils } from \"react-day-picker\";\r\nimport 'react-day-picker/lib/style.css';\r\n\r\nconst today = new Date(Date.now());\r\n\r\ntype PropertySchedule = {\r\n    reservedDates?: {\r\n        fromDate: string;\r\n        toDate: string;\r\n    }[],\r\n\r\n    dayOff?: Date[];\r\n}\r\n\r\nconst defaultSchedules: PropertySchedule = {\r\n    reservedDates: [\r\n        {\r\n            fromDate: \"2021-04-19\",\r\n            toDate: \"2021-04-21\"\r\n        },\r\n        {\r\n            fromDate: \"2021-04-21\",\r\n            toDate: \"2021-04-24\"\r\n        },\r\n        {\r\n            fromDate: \"2021-04-30\",\r\n            toDate: \"2021-05-01\"\r\n        }\r\n    ],\r\n}\r\n\r\nexport const getDatesBetween = (fromDate: string, toDate: string) => {\r\n    const from = new Date(fromDate);\r\n    const to = new Date(toDate);\r\n    let datesBtw: Date[] = [];\r\n    let start = from;\r\n    start.setDate(start.getDate() + 1);\r\n\r\n    while (start.getDate() < to.getDate()) {\r\n        datesBtw.push(new Date(start));\r\n        start.setDate(start.getDate() + 1);\r\n    }\r\n    return datesBtw;\r\n}\r\n\r\nconst getDisabledDates = (schedules?: PropertySchedule) => {\r\n    let disabledDates: Date[] = [];\r\n\r\n    if (schedules?.reservedDates) {\r\n        for (let i = 0; i < schedules.reservedDates.length; i++) {\r\n            disabledDates.push(...getDatesBetween(schedules.reservedDates[i].fromDate, schedules.reservedDates[i].toDate))\r\n        }\r\n    }\r\n\r\n    if (schedules?.dayOff) disabledDates.push(...schedules.dayOff);\r\n    return disabledDates;\r\n}\r\n\r\nconst getDateCheckOutOnly = (schedules?: PropertySchedule) => {\r\n    return schedules?.reservedDates?.map(r => new Date(r.fromDate));\r\n}\r\n\r\nconst getNextPossibleDate = (day: Date, schedules?: PropertySchedule) => {\r\n    let nextDay: Date | undefined = undefined;\r\n\r\n    if (schedules?.reservedDates) {\r\n        schedules.reservedDates.forEach(r => {\r\n            const rFrom = new Date(r.fromDate);\r\n\r\n            if (rFrom > day) {\r\n                if (!nextDay) nextDay = rFrom;\r\n                else if (rFrom <= nextDay) nextDay = rFrom;\r\n            }\r\n        })\r\n    }\r\n    if (nextDay !== day) return nextDay;\r\n    return null;\r\n}\r\n\r\ntype PickRangeDayState = {\r\n    from?: Date;\r\n    to?: Date;\r\n    enteredTo?: Date; // keep track of the last day for mouseEnter\r\n}\r\n\r\ntype PickRangeDayProps = {\r\n    from?: Date,\r\n    to?: Date,\r\n    updateDate: (from?: Date, to?: Date) => void,\r\n    schedules?: PropertySchedule\r\n}\r\n\r\nconst defaultDate: PickRangeDayState = {\r\n    from: undefined,\r\n    to: undefined,\r\n    enteredTo: undefined\r\n}\r\n\r\nconst PickRangeDay: React.FC<PickRangeDayProps & BoxProps> = (props) => {\r\n    const { from, to, updateDate, schedules, ...boxProps } = props;\r\n\r\n    const toast = useToast();\r\n    const [state, setState] = React.useState<PickRangeDayState>({ from: from, to: to });\r\n\r\n    const disabled = [\r\n        {\r\n            before: new Date(Date.now())\r\n        },\r\n        ...getDisabledDates(schedules),\r\n    ]\r\n\r\n    const [disabledDays, setDisabledDays] = React.useState(disabled)\r\n\r\n    React.useEffect(() => {\r\n        if ((state.from && state.to) || (!state.from && !state.to)) {\r\n            updateDate(state.from, state.to);\r\n        }\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [state.from, state.to]);\r\n\r\n    const isSelectingFirstDay = (day: Date, from?: Date, to?: Date) => {\r\n        const isBeforeFirstDay = from && DateUtils.isDayBefore(day, from);\r\n        const isRangeSelected = from && to;\r\n        return !from || isBeforeFirstDay || isRangeSelected;\r\n    }\r\n\r\n    const handleDayMouseEnter = (day: Date) => {\r\n        const { from, to } = state;\r\n        if (!isSelectingFirstDay(day, from, to)) {\r\n            setState(s => ({\r\n                ...s,\r\n                enteredTo: day,\r\n            }));\r\n        }\r\n    }\r\n\r\n    const handleDayClick = (day: Date, modifiers: any) => {\r\n        if (modifiers.disabled) return;\r\n\r\n        const today = new Date(Date.now());\r\n        if (day < today) return;\r\n        const { from, to } = state;\r\n        if (from && to && day >= from && day <= to) {\r\n            handleResetClick();\r\n            return;\r\n        }\r\n        // if selecting first day, recalculate disabled days to this chosen day\r\n        if (isSelectingFirstDay(day, from, to)) {\r\n            if (modifiers.checkoutOnly) {\r\n                toast({\r\n                    status: \"info\",\r\n                    description: \"Check out only!\",\r\n                    duration: 3000\r\n                })\r\n                return;\r\n            }\r\n            setDisabledDays((s) => ({ ...s, before: day, after: getNextPossibleDate(day, schedules) }))\r\n\r\n            setState({\r\n                from: day,\r\n                to: undefined,\r\n                enteredTo: undefined,\r\n            });\r\n        }\r\n        // else, set every things back to normal\r\n        else {\r\n            setDisabledDays(disabled);\r\n            // prevent from = to\r\n            if (state.from?.getDate() === day.getDate()) {\r\n                setState({\r\n                    from: undefined,\r\n                    to: undefined,\r\n                    enteredTo: undefined,\r\n                });\r\n                return;\r\n            }\r\n            setState(s => ({\r\n                ...s,\r\n                to: day,\r\n                enteredTo: day,\r\n            }));\r\n        }\r\n    }\r\n\r\n    const handleResetClick = () => {\r\n        setState(defaultDate);\r\n    }\r\n\r\n    const selected = [state.from, { from: state.from, to: state.enteredTo }];\r\n\r\n\r\n    const modifiers = {\r\n        start: state.from,\r\n        end: state.enteredTo,\r\n        checkoutOnly: getDateCheckOutOnly(schedules),\r\n    }\r\n\r\n    const [enoughFor2MonthsDisplay] = useMediaQuery(\"(min-width: 600px)\");\r\n\r\n    return (\r\n        <Box d=\"flex\" flexDir=\"column\" {...boxProps} overflow=\"clip\">\r\n            <Box alignSelf=\"center\">\r\n                <DayPicker\r\n                    numberOfMonths={enoughFor2MonthsDisplay ? 2 : 1}\r\n                    fromMonth={state.from}\r\n                    modifiers={modifiers as any}\r\n                    onDayClick={handleDayClick}\r\n                    disabledDays={disabledDays}\r\n                    onDayMouseEnter={handleDayMouseEnter}\r\n                    selectedDays={selected as any}>\r\n                </DayPicker>\r\n            </Box>\r\n            <Flex justifyContent=\"center\" alignItems=\"center\">\r\n                {!state.from && !state.to && 'Please select the first day.'}\r\n                {state.from && !state.to && 'Please select the last day.'}\r\n                {state.from &&\r\n                    state.to &&\r\n                    `Selected from ${state.from.toLocaleDateString()} to\r\n                ${state.to.toLocaleDateString()}`}{' '}\r\n                {state.from && state.to && (\r\n                    <Button onClick={handleResetClick}>\r\n                        Reset\r\n                    </Button>\r\n                )}\r\n            </Flex>\r\n        </Box>\r\n    )\r\n}\r\n\r\nexport default PickRangeDay;","E:\\Repos\\hostel-chakra\\Hostel\\src\\Components\\NavComponents\\PopDetail.tsx",["271","272"],"import { Box, Flex, VStack, Text, Spacer, Square, Button, StackDivider } from '@chakra-ui/react';\r\nimport React from 'react';\r\n\r\ntype PopDetailState = {\r\n    guest: number;\r\n    children: number;\r\n}\r\n\r\ninterface PopDetailProps extends PopDetailState {\r\n    updatePeople: (guest: number, children: number) => void;\r\n    maxGuest?: number;\r\n}\r\n\r\nconst PopDetail: React.FC<PopDetailProps> = ({ guest, children, updatePeople, maxGuest }) => {\r\n    return (\r\n        <Box p=\"4\" style={{ backdropFilter: \"blur(5px)\" }}>\r\n            <VStack align=\"stretch\" spacing={4}>\r\n                <Flex alignItems=\"center\">\r\n                    <Text mr=\"auto\" fontSize=\"md\">Guests</Text>\r\n                    <Square border=\"1px\" borderColor=\"yellow.400\">\r\n                        <Button variant=\"ghost\" borderRadius=\"0\" disabled={guest <= 0}\r\n                            onClick={() => updatePeople(--guest, children)}>-</Button>\r\n                    </Square>\r\n                    <Text mx=\"4\" fontSize=\"md\">{guest}</Text>\r\n                    <Square border=\"1px\" borderColor=\"yellow.400\">\r\n                        <Button variant=\"ghost\" borderRadius=\"0\"\r\n                            disabled={maxGuest !== undefined && guest >= maxGuest}\r\n                            onClick={() => updatePeople(++guest, children)}>+</Button>\r\n                    </Square>\r\n                </Flex>\r\n                <Flex alignItems=\"center\">\r\n                    <Text mr=\"auto\" fontSize=\"md\">Children</Text>\r\n                    <Square border=\"1px\" borderColor=\"yellow.400\">\r\n                        <Button variant=\"ghost\" borderRadius=\"0\" disabled={children <= 0 ? true : false}\r\n                            onClick={() => updatePeople(guest, --children)}>-</Button>\r\n                    </Square>\r\n                    <Text mx=\"4\" fontSize=\"md\">{children}</Text>\r\n                    <Square border=\"1px\" borderColor=\"yellow.400\">\r\n                        <Button variant=\"ghost\" borderRadius=\"0\"\r\n                            isDisabled={children >= 5}\r\n                            onClick={() => updatePeople(guest, ++children)}>+</Button>\r\n                    </Square>\r\n                </Flex>\r\n            </VStack>\r\n        </Box>\r\n    )\r\n}\r\n\r\nexport default PopDetail;","E:\\Repos\\hostel-chakra\\Hostel\\src\\Components\\FilterComponents\\RoomCard.tsx",["273","274","275"],"E:\\Repos\\hostel-chakra\\Hostel\\src\\Components\\NavComponents\\Footer.tsx",["276","277","278","279","280","281","282","283","284","285","286","287"],"import { Box, BoxProps, Center, chakra, Divider, Heading, HeadingProps, Text, HTMLChakraProps, Link, SimpleGrid, SimpleGridProps, Stack, StackDivider, TextProps, useColorModeValue, useToken, ButtonGroup, IconButton, ButtonGroupProps } from '@chakra-ui/react'\r\nimport React from 'react'\r\nimport { BsHeartFill } from 'react-icons/bs';\r\nimport { FaGithub, FaFacebook, FaReddit } from 'react-icons/fa';\r\n// import { Logo } from '../../Logo';\r\n\r\nconst Footer: React.FC<BoxProps> = ({ children, ...props }) => {\r\n    return (\r\n        <Box as=\"footer\" role=\"contentinfo\" py=\"12\" {...props}>\r\n            <Stack spacing=\"10\" divider={<StackDivider />}>\r\n                {/* <Stack direction={{ base: 'column', lg: 'row' }} spacing={{ base: '10', lg: '28' }}>\r\n                    <Box flex=\"1\">\r\n                        <Logo />\r\n                    </Box>\r\n                    <Stack direction={{ base: 'column', md: 'row' }} spacing={{ base: '10', md: '20' }}>\r\n                        <LinkGrid spacing={{ base: '10', md: '20', lg: '28' }} flex=\"1\" />\r\n                    </Stack>\r\n                </Stack> */}\r\n                <Stack\r\n                    direction={{ base: 'column-reverse', md: 'row' }}\r\n                    justifyContent=\"space-between\"\r\n                    alignItems=\"center\"\r\n                >\r\n                    <Copyright />\r\n                    <SocialMediaLinks />\r\n                </Stack>\r\n            </Stack>\r\n        </Box>\r\n    )\r\n}\r\n\r\nconst Copyright = (props: TextProps) => (\r\n    <Text fontSize=\"sm\" {...props}>\r\n        &copy; {new Date().getFullYear()} Hai, Inc. All rights reserved.\r\n    </Text>\r\n)\r\n\r\nconst openSocio = (to: \"fb\" | \"github\" | \"reddit\") => {\r\n    let url = \"\";\r\n    if (to === \"fb\") url = \"https://facebook.com\";\r\n    else if (to === \"github\") url = \"https://github.com/haihaibeo\";\r\n    else if (to === \"reddit\") url = \"https://reddit.com/user/haihaibeo\";\r\n\r\n    window.open(url, '_blank')!.focus();\r\n}\r\n\r\nconst SocialMediaLinks = (props: ButtonGroupProps) => (\r\n    <ButtonGroup variant=\"ghost\" color=\"gray.600\" {...props}>\r\n        <IconButton as=\"a\" href=\"#\" aria-label=\"Facebook\" onClick={() => openSocio('fb')} icon={<FaFacebook fontSize=\"20px\" />} />\r\n        <IconButton as=\"a\" href=\"#\" aria-label=\"GitHub\" onClick={() => openSocio('github')} icon={<FaGithub fontSize=\"20px\" />} />\r\n        <IconButton as=\"a\" href=\"#\" aria-label=\"Reddit\" onClick={() => openSocio('reddit')} icon={<FaReddit fontSize=\"20px\" />} />\r\n    </ButtonGroup>\r\n)\r\n\r\nexport default Footer;","E:\\Repos\\hostel-chakra\\Hostel\\src\\Components\\SingleRoomComponents\\MyRoomBadge.tsx",["288"],"import { Box, Icon, HStack, VStack, Center } from '@chakra-ui/react'\r\nimport React from 'react'\r\nimport { IconType } from 'react-icons'\r\nimport { RiStarLine, RiUserStarLine } from \"react-icons/ri\";\r\n\r\ntype MyRoomBadgeProps = {\r\n    id: string;\r\n}\r\n\r\nconst MyRoomBadge: React.FC<MyRoomBadgeProps> = ({ id }) => {\r\n    const [icon, setIcon] = React.useState<IconType>();\r\n    const [badge, setBadge] = React.useState<RoomBadge>();\r\n\r\n    React.useEffect(() => {\r\n        let foundBadge = defaultRoomBadges.find(b => b.id === id);\r\n        setBadge(foundBadge);\r\n        switch (id) {\r\n            case \"1\":\r\n                setIcon(RiUserStarLine);\r\n                break;\r\n\r\n            default:\r\n                setIcon(RiStarLine);\r\n                break;\r\n        }\r\n    }, [id])\r\n\r\n    return (\r\n        <HStack alignContent=\"center\" spacing=\"0\" mb=\"2\">\r\n            <Icon d=\"flex\" boxSize=\"10\" alignItems=\"center\" justifyContent=\"center\" mt=\"2\" ml=\"2\">{icon}</Icon>\r\n            <VStack alignItems=\"start\" spacing=\"0\">\r\n                <Box as=\"h4\" fontSize=\"md\" fontWeight=\"semibold\">{badge?.title}</Box>\r\n                <Box as=\"h5\" fontSize=\"sm\" m=\"0\">{badge?.description}</Box>\r\n            </VStack>\r\n        </HStack>\r\n    )\r\n}\r\n\r\nexport const defaultRoomBadges: RoomBadge[] = [\r\n    {\r\n        id: \"1\",\r\n        title: \"Helpful owner\",\r\n        description: \"Owner provides best services\"\r\n    },\r\n    {\r\n        id: \"2\",\r\n        title: \"Extra clean\",\r\n        description: \"Owner follows our strict policies of enhanced clealiness\"\r\n    },\r\n    {\r\n        id: \"3\",\r\n        title: \"Not smoking\",\r\n        description: \"Owner does not allow smoking inside\"\r\n    },\r\n    {\r\n        id: \"4\",\r\n        title: \"Free cancelation\",\r\n        description: \"You can cancel with full refund in 24 hours\"\r\n    }\r\n]\r\n\r\nexport default MyRoomBadge;","e:\\Repos\\hostel-chakra\\Hostel\\src\\index.tsx",[],"e:\\Repos\\hostel-chakra\\Hostel\\src\\reportWebVitals.ts",[],"e:\\Repos\\hostel-chakra\\Hostel\\src\\serviceWorker.ts",[],"e:\\Repos\\hostel-chakra\\Hostel\\src\\App.tsx",["289"],"e:\\Repos\\hostel-chakra\\Hostel\\src\\Pages\\HomePage.tsx",["290"],"e:\\Repos\\hostel-chakra\\Hostel\\src\\Pages\\SingleRoom.tsx",["291","292","293","294","295"],"e:\\Repos\\hostel-chakra\\Hostel\\src\\Pages\\RoomsPage.tsx",[],"e:\\Repos\\hostel-chakra\\Hostel\\src\\Pages\\ErrorPage.tsx",[],"e:\\Repos\\hostel-chakra\\Hostel\\src\\Components\\NavComponents\\Footer.tsx",[],"e:\\Repos\\hostel-chakra\\Hostel\\src\\Components\\NavComponents\\SearchBar.tsx",[],"e:\\Repos\\hostel-chakra\\Hostel\\src\\Components\\NavComponents\\PickRangeDay.tsx",["296"],"e:\\Repos\\hostel-chakra\\Hostel\\src\\Components\\NavComponents\\Navbar.tsx",[],"e:\\Repos\\hostel-chakra\\Hostel\\src\\Components\\NavComponents\\PopDetail.tsx",["297","298"],"e:\\Repos\\hostel-chakra\\Hostel\\src\\Components\\HomeComponents\\PropertyTypeList.tsx",["299","300","301"],"e:\\Repos\\hostel-chakra\\Hostel\\src\\Components\\SingleRoomComponents\\MyRoomBadge.tsx",["302"],"e:\\Repos\\hostel-chakra\\Hostel\\src\\Components\\FilterComponents\\RoomCardList.tsx",[],"e:\\Repos\\hostel-chakra\\Hostel\\src\\Logo.tsx",[],"e:\\Repos\\hostel-chakra\\Hostel\\src\\ColorModeSwitcher.tsx",[],"e:\\Repos\\hostel-chakra\\Hostel\\src\\Components\\FilterComponents\\RoomCard.tsx",["303"],"E:\\Repos\\hostel-chakra\\Hostel\\src\\Components\\RegisterButton.tsx",[],["304","305"],"E:\\Repos\\hostel-chakra\\Hostel\\src\\Components\\RegisterForm.tsx",["306"],"import { Box, Button, Collapse, FormControl, HStack, Input, PinInput, PinInputField, Select, VStack } from '@chakra-ui/react';\r\nimport React from 'react'\r\nimport { FaArrowRight } from 'react-icons/fa';\r\n\r\ntype ActionType =\r\n    | { type: \"ChangeInput\"; country?: string; phone?: string }\r\n    | { type: \"RegisterPhone\" }\r\n    | { type: \"CheckPincode\" }\r\n    | { type: \"RegisterDetail\"; name: string; email: string; password: string }\r\n    | { type: \"SetLoading\"; isLoading: boolean }\r\n    | { type: \"ResetForm\"; }\r\n\r\n\r\ntype FormState = {\r\n    country?: string;\r\n    phone?: string;\r\n    name?: string;\r\n    pincode?: string;\r\n    email?: string;\r\n    password?: string;\r\n}\r\n\r\ntype RegisterState = {\r\n    form?: FormState;\r\n    show: \"none\" | \"pin\" | \"detail\"\r\n    isLoading?: boolean;\r\n}\r\n\r\nconst reducer = (state: RegisterState, action: ActionType): RegisterState => {\r\n    switch (action.type) {\r\n        case \"ChangeInput\":\r\n            return {\r\n                ...state,\r\n                form: {\r\n                    ...state.form,\r\n                    country: action.country,\r\n                    phone: action.phone\r\n                }\r\n            }\r\n        case 'RegisterPhone':\r\n            return {\r\n                ...state,\r\n                show: 'pin',\r\n                isLoading: true,\r\n            }\r\n        case 'CheckPincode':\r\n            return {\r\n                ...state,\r\n                show: 'detail',\r\n                isLoading: true\r\n            }\r\n        case 'RegisterDetail':\r\n            return {\r\n                ...state,\r\n            }\r\n        case \"SetLoading\":\r\n            return {\r\n                ...state,\r\n                isLoading: action.isLoading,\r\n            }\r\n        case \"ResetForm\":\r\n            return initialState;\r\n\r\n        default:\r\n            return {\r\n                ...state,\r\n            }\r\n    }\r\n}\r\n\r\nconst getRandomInt = (min: number, max: number) => {\r\n    min = Math.ceil(min);\r\n    max = Math.floor(max);\r\n    return Math.floor(Math.random() * (max - min) + min);\r\n}\r\n\r\nconst fetchPincode = async (phone: number) => {\r\n    setTimeout(() => {\r\n        return getRandomInt(1000, 9999);\r\n    }, 1000);\r\n}\r\n\r\nconst CheckPin = (pin: string) => {\r\n    return new Promise<boolean>((resolve, reject) => {\r\n        if (pin.length === 4)\r\n            setTimeout(() => { resolve(true) }, 1000);\r\n        else\r\n            setTimeout(() => { reject(\"Pin not correct\") }, 1000);\r\n    })\r\n}\r\n\r\nconst initialState: RegisterState = {\r\n    form: {},\r\n    isLoading: false,\r\n    show: \"none\"\r\n}\r\n\r\nconst RegisterForm: React.FC = ({ children }) => {\r\n    const [countries, setCountries] = React.useState<string[]>();\r\n    const [state, dispatch] = React.useReducer(reducer, initialState);\r\n\r\n    // fetching countries\r\n    React.useEffect(() => {\r\n        setCountries(defaultCountries);\r\n    }, [])\r\n\r\n    const handleRegisterButton = async (pin?: string) => {\r\n        if (state.show === \"none\") {\r\n            dispatch({ type: 'RegisterPhone' })\r\n            // send to api server\r\n            setTimeout(() => {\r\n                dispatch({ type: 'SetLoading', isLoading: false })\r\n            }, 1000)\r\n        }\r\n\r\n        else if (state.show === \"pin\" && pin !== undefined) {\r\n            dispatch({ type: 'SetLoading', isLoading: true })\r\n            CheckPin(pin).then(res => {\r\n                if (res === true) {\r\n                    console.log(\"Pincode correct\");\r\n                    dispatch({ type: 'CheckPincode' })\r\n                }\r\n                else {\r\n                    console.log(\"Pincode not correct\");\r\n                }\r\n            }).catch((r) => {\r\n                console.log(r);\r\n            }).finally(() => {\r\n                dispatch({ type: 'SetLoading', isLoading: false })\r\n            })\r\n        }\r\n    }\r\n\r\n    return (\r\n        <FormControl d=\"flex\" flexDir=\"column\">\r\n            <Select borderBottomRadius=\"0\" isDisabled={state.show !== \"none\"} onChange={(e) => dispatch({ type: 'ChangeInput', country: e.target.value, phone: state.form?.phone })} size=\"lg\" isRequired placeholder=\"Choose your country\">\r\n                {countries?.map((c, index) => {\r\n                    return <option value={c} key={index}>{c}</option>\r\n                })}\r\n            </Select>\r\n            <Input borderTopRadius=\"0\" placeholder=\"Phone number\" isDisabled={state.show !== \"none\"} size=\"lg\" value={state.form?.phone} onChange={(e) => dispatch({ type: 'ChangeInput', phone: e.target.value, country: state.form?.country })} />\r\n\r\n            <Collapse in={state.show === \"pin\"}>\r\n                <VStack spacing=\"1\" my=\"2\">\r\n                    <Box as=\"h2\"> We've sent you a verification code</Box>\r\n                    <HStack>\r\n                        <PinInput value={state.form?.pincode} isDisabled={state.isLoading} onComplete={(value) => handleRegisterButton(value)}>\r\n                            <PinInputField />\r\n                            <PinInputField />\r\n                            <PinInputField />\r\n                            <PinInputField />\r\n                        </PinInput>\r\n                    </HStack>\r\n                </VStack>\r\n            </Collapse>\r\n\r\n            <Collapse in={state.show === \"detail\"}>\r\n                <Box my=\"2\">\r\n                    <Input borderBottomRadius=\"0\" size=\"lg\" placeholder=\"Your name\" />\r\n                    <Input borderRadius=\"0\" size=\"lg\" placeholder=\"Email address\" />\r\n                    <Input borderTopRadius=\"0\" size=\"lg\" placeholder=\"Password\" />\r\n                </Box>\r\n            </Collapse>\r\n\r\n            <Button my=\"3\" w=\"30%\" rounded=\"full\" type=\"submit\" alignSelf=\"center\" isLoading={state.isLoading}\r\n                isDisabled={((state.form?.phone !== undefined && state.form?.phone !== \"\")\r\n                    && (state.form?.country != null && state.form?.country !== \"\")) ? false : true}\r\n                title=\"Next step\" onClick={() => handleRegisterButton()}\r\n            >\r\n                <FaArrowRight />\r\n            </Button>\r\n            {/* <Button alignSelf=\"flex-end\" variant=\"ghost\" colorScheme=\"red\" onClick={() => dispatch({ type: \"ResetForm\" })}>Reset</Button> */}\r\n\r\n        </FormControl>\r\n    )\r\n}\r\n\r\nconst defaultCountries: string[] = [\r\n    \"Russia\", \"Vietnam\"\r\n]\r\n\r\nexport default RegisterForm;","E:\\Repos\\hostel-chakra\\Hostel\\src\\Contexts\\AuthContext.tsx",["307","308"],"import { useToast } from '@chakra-ui/toast';\r\nimport { AxiosResponse } from 'axios';\r\nimport jwtDecode, { JwtPayload } from 'jwt-decode';\r\nimport React from 'react';\r\nimport { useMutation, useQueryClient } from 'react-query';\r\nimport { authenticate, register, validateToken } from '../API';\r\n\r\ninterface UserTokenPayload extends JwtPayload {\r\n    roles: string[] | string;\r\n    email: string;\r\n    name: string;\r\n    userId: string;\r\n}\r\n\r\ntype AuthContextStates = {\r\n    loginAsync: (request: LoginRequest) => any\r\n    registerAsync: (request: RegisterRequest) => any\r\n    logoutAsync: () => Promise<void>;\r\n    updateToken: (token: string) => void;\r\n    user?: UserResponse;\r\n    isLoading: boolean;\r\n}\r\n\r\nexport const AuthContext = React.createContext<AuthContextStates>({} as AuthContextStates);\r\n\r\n// TODO: Refactoring: Get user from localStorage\r\nexport const AuthProvider: React.FC = ({ children }) => {\r\n    const [isLoading, setIsLoading] = React.useState<boolean>(false);\r\n    const [user, setUser] = React.useState<UserResponse>();\r\n    const [token, setToken] = React.useState(localStorage.getItem(\"token\"));\r\n\r\n    const queryClient = useQueryClient();\r\n\r\n    const toast = useToast();\r\n\r\n    /**\r\n     * Check for token in localStorage\r\n     */\r\n    React.useEffect(() => {\r\n        const tokenStorage = localStorage.getItem(\"token\");\r\n        if (tokenStorage) {\r\n            validateToken(tokenStorage).then(res => {\r\n                console.log(\"validating...\")\r\n                if (res.status !== 200) return logoutAsync(\"Token expired\");\r\n            })\r\n            setToken(tokenStorage);\r\n        }\r\n        else {\r\n            loginAsync({ email: \"test@mail.com\", password: \"password\" });\r\n        }\r\n    }, [])\r\n\r\n    React.useEffect(() => {\r\n        if (token) {\r\n            const decodedUser = jwtDecode<UserTokenPayload>(token);\r\n            setUser({\r\n                email: decodedUser.email,\r\n                name: decodedUser.name,\r\n                roles: decodedUser.roles,\r\n                token: token,\r\n                userId: decodedUser.userId,\r\n            })\r\n        }\r\n    }, [token]);\r\n\r\n    const updateToken = (token: string) => {\r\n        setToken(token);\r\n    }\r\n\r\n    const mutateLogin = useMutation<AxiosResponse<UserResponse>, any, LoginRequest>(authenticate, {\r\n        onSuccess: (res) => {\r\n            setToken(res.data.token);\r\n            localStorage.setItem(\"token\", res.data.token);\r\n            toast({ description: \"Logged in successfully\", status: \"success\", duration: 3000 });\r\n        },\r\n        onError: (res) => { toast({ description: res.data.message, status: \"error\", duration: 3000 }) },\r\n        onSettled: () => setIsLoading(false)\r\n    })\r\n\r\n    const mutateRegister = useMutation<AxiosResponse<UserResponse>, any, RegisterRequest>(register, {\r\n        onSuccess: (res) => {\r\n            // setUser(res.data);\r\n            setToken(res.data.token);\r\n            localStorage.setItem(\"token\", res.data.token);\r\n            toast({ description: \"Logged in successfully\", status: \"success\", duration: 3000 });\r\n        },\r\n        onError: (res) => {\r\n            console.log(res.data);\r\n            for (let i = 0; i < res.data.messages.length; i++) {\r\n                toast({ description: res.data.messages[i], status: \"error\", duration: 3000 })\r\n            }\r\n        },\r\n        onSettled: () => setIsLoading(false)\r\n    })\r\n\r\n    const logoutAsync = async (msg?: string) => {\r\n        await new Promise(resolve => setTimeout(resolve, 1000));\r\n        setUser(undefined);\r\n        setToken(null);\r\n        localStorage.removeItem(\"token\");\r\n        toast({\r\n            title: msg ? msg : \"Logged out successfully!\",\r\n            isClosable: true,\r\n            duration: 3000,\r\n            status: \"success\"\r\n        })\r\n        await new Promise(resolve => setTimeout(resolve, 500));\r\n    }\r\n\r\n    const loginAsync = async (request: LoginRequest) => {\r\n        setIsLoading(true);\r\n        await new Promise(resolve => setTimeout(resolve, 1000));\r\n        try {\r\n            mutateLogin.mutate(request);\r\n        }\r\n        catch (e) {\r\n            console.log(e);\r\n        }\r\n        finally {\r\n            setIsLoading(false);\r\n        }\r\n    }\r\n\r\n    const registerAsync = async (request: RegisterRequest) => {\r\n        setIsLoading(true);\r\n        await new Promise(resolve => setTimeout(resolve, 1000));\r\n        try {\r\n            mutateRegister.mutate(request);\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n        finally {\r\n            setIsLoading(false);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <AuthContext.Provider value={{\r\n            loginAsync: loginAsync,\r\n            logoutAsync: logoutAsync,\r\n            updateToken: updateToken,\r\n            isLoading: isLoading,\r\n            user: user,\r\n            registerAsync: registerAsync\r\n        }}>\r\n            {children}\r\n        </AuthContext.Provider>\r\n    )\r\n}","E:\\Repos\\hostel-chakra\\Hostel\\src\\Components\\LoginForm.tsx",["309","310","311","312","313","314"],"import { Box, FormControl, FormLabel, Input, Button, Checkbox, FormErrorMessage, chakra, useDisclosure, Collapse } from '@chakra-ui/react';\r\nimport React from 'react'\r\nimport { FaArrowRight } from 'react-icons/fa';\r\nimport { useHistory } from 'react-router';\r\nimport { AuthContext } from '../Contexts/AuthContext';\r\n\r\ntype LoginFormProps = {\r\n    initRef?: React.RefObject<HTMLInputElement>;\r\n    fromUrl?: string;\r\n    isRegistering: boolean;\r\n}\r\n\r\ntype FormState = {\r\n    email?: string;\r\n    password?: string;\r\n    confirmedPassword?: string;\r\n    remember: boolean;\r\n    isRegistering: boolean;\r\n}\r\n\r\nfunction validateEmail(email: string | undefined) {\r\n    if (!email) return false;\r\n    const re = /^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\r\n    return re.test(email);\r\n}\r\n\r\n\r\nconst LoginForm: React.FC<LoginFormProps> = ({ initRef, fromUrl, isRegistering }) => {\r\n    const history = useHistory();\r\n\r\n    const [loginForm, setLoginForm] = React.useState<FormState>({\r\n        remember: false,\r\n        isRegistering: isRegistering\r\n    });\r\n\r\n    const [emailError, setEmailError] = React.useState(false);\r\n    const [passwordError, setPasswordError] = React.useState(false);\r\n    const [confirmPasswordError, setConfirmPasswordError] = React.useState(false);\r\n\r\n    const validateForm = (email: string | undefined, password: string | undefined) => {\r\n        if (validateEmail(email)) {\r\n            setEmailError(false);\r\n        } else setEmailError(true);\r\n        if (password === \"\") {\r\n            setPasswordError(true)\r\n        } else setPasswordError(false);\r\n    }\r\n\r\n    React.useEffect(() => {\r\n        validateForm(loginForm.email, loginForm.password);\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [loginForm.email, loginForm.password])\r\n\r\n    React.useEffect(() => {\r\n        if (loginForm.isRegistering && loginForm.confirmedPassword === loginForm.password) {\r\n            console.log(loginForm.password);\r\n            console.log(loginForm.confirmedPassword);\r\n\r\n            setConfirmPasswordError(false);\r\n            console.log(confirmPasswordError);\r\n        } else setConfirmPasswordError(true);\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [loginForm.confirmedPassword, loginForm.isRegistering, loginForm.password])\r\n\r\n    const authContext = React.useContext(AuthContext);\r\n\r\n    const handleLogin = () => {\r\n        authContext.loginAsync(loginForm);\r\n        if (fromUrl) history.replace(fromUrl);\r\n    }\r\n\r\n    const handleRegister = () => {\r\n        authContext.registerAsync({ email: loginForm.email, password: loginForm.password, confirmPassword: loginForm.confirmedPassword });\r\n        if (fromUrl) history.replace(fromUrl);\r\n    }\r\n\r\n    const toggleMode = () => {\r\n        setLoginForm((s) => ({\r\n            ...s,\r\n            isRegistering: !s.isRegistering\r\n        }))\r\n    }\r\n\r\n    return (\r\n        <chakra.form d=\"flex\" flexDir=\"column\">\r\n            <FormControl isInvalid={emailError}>\r\n                <FormLabel htmlFor=\"email\">Email</FormLabel>\r\n                <Input placeholder=\"Enter your email\" id=\"email\" isInvalid={emailError} ref={initRef} variant=\"filled\" size=\"lg\" type=\"email\"\r\n                    value={loginForm.email} isRequired\r\n                    onChange={(e) => setLoginForm(s => ({\r\n                        ...s,\r\n                        email: e.target.value.trim()\r\n                    }))}></Input>\r\n                <FormErrorMessage>{\"Email not correct\"}</FormErrorMessage>\r\n            </FormControl>\r\n\r\n            <FormControl isInvalid={passwordError}>\r\n                <FormLabel htmlFor=\"password\" my=\"2\">Password</FormLabel>\r\n                <Input placeholder=\"Enter your password\" id=\"password\" isInvalid={passwordError} variant=\"filled\" size=\"lg\" type=\"password\"\r\n                    value={loginForm.password} minLength={1} isRequired\r\n                    onChange={(e) => setLoginForm(s => ({\r\n                        ...s,\r\n                        password: e.target.value\r\n                    }))}></Input>\r\n            </FormControl>\r\n\r\n            <Collapse in={loginForm.isRegistering}>\r\n                <FormControl isInvalid={confirmPasswordError}>\r\n                    <FormLabel htmlFor=\"confirm-password\" my=\"2\">Confirm Password</FormLabel>\r\n                    <Input placeholder=\"Confirm your password\" id=\"confirm-password\" isInvalid={confirmPasswordError} variant=\"filled\" size=\"lg\" type=\"password\"\r\n                        value={loginForm.confirmedPassword} minLength={1} isRequired\r\n                        onChange={(e) => setLoginForm(s => ({\r\n                            ...s,\r\n                            confirmedPassword: e.target.value\r\n                        }))}></Input>\r\n                </FormControl>\r\n                <FormErrorMessage>{\"Password does not match\"}</FormErrorMessage>\r\n            </Collapse>\r\n\r\n            <Checkbox size=\"lg\" checked={loginForm.remember} mt=\"2\"\r\n                onChange={(e) => setLoginForm(s => ({ ...s, remember: e.target.checked }))}>\r\n                Remember me\r\n                </Checkbox>\r\n\r\n            <Button my=\"3\" w=\"30%\" rounded=\"full\" type=\"submit\" alignSelf=\"center\" title=\"Login\"\r\n                isLoading={authContext.isLoading}\r\n                isDisabled={loginForm.isRegistering ? emailError || passwordError || confirmPasswordError : emailError || passwordError}\r\n                onClick={!loginForm.isRegistering ? handleLogin : handleRegister}>\r\n                <FaArrowRight />\r\n            </Button>\r\n\r\n            <Button variant=\"link\" alignSelf=\"center\" textStyle=\"\" onClick={() => toggleMode()}>{!loginForm.isRegistering ? \"Register your account!\" : \"Or login instead!\"}</Button >\r\n        </chakra.form>\r\n    );\r\n}\r\n\r\nexport default LoginForm;","E:\\Repos\\hostel-chakra\\Hostel\\src\\Pages\\ProfilePage.tsx",["315","316","317","318","319"],"E:\\Repos\\hostel-chakra\\Hostel\\src\\Pages\\PublishRoomPage.tsx",["320","321","322","323","324","325","326","327"],"E:\\Repos\\hostel-chakra\\Hostel\\src\\API.ts",["328","329","330"],"E:\\Repos\\hostel-chakra\\Hostel\\src\\Pages\\PreviewRoomPage.tsx",[],"E:\\Repos\\hostel-chakra\\Hostel\\src\\Pages\\RegisterHostPage.tsx",[],"E:\\Repos\\hostel-chakra\\Hostel\\src\\Pages\\OwnerListProperty.tsx",[],"E:\\Repos\\hostel-chakra\\Hostel\\src\\Components\\FloatingForm.tsx",[],{"ruleId":"331","replacedBy":"332"},{"ruleId":"333","replacedBy":"334"},{"ruleId":"331","replacedBy":"335"},{"ruleId":"333","replacedBy":"336"},{"ruleId":"337","severity":1,"message":"338","line":7,"column":3,"nodeType":"339","messageId":"340","endLine":7,"endColumn":21},{"ruleId":"337","severity":1,"message":"341","line":9,"column":37,"nodeType":"339","messageId":"340","endLine":9,"endColumn":50},{"ruleId":"337","severity":1,"message":"342","line":9,"column":87,"nodeType":"339","messageId":"340","endLine":9,"endColumn":97},{"ruleId":"337","severity":1,"message":"343","line":15,"column":10,"nodeType":"339","messageId":"340","endLine":15,"endColumn":14},{"ruleId":"337","severity":1,"message":"344","line":204,"column":7,"nodeType":"339","messageId":"340","endLine":204,"endColumn":18},{"ruleId":"337","severity":1,"message":"345","line":5,"column":10,"nodeType":"339","messageId":"340","endLine":5,"endColumn":14},{"ruleId":"337","severity":1,"message":"346","line":5,"column":16,"nodeType":"339","messageId":"340","endLine":5,"endColumn":24},{"ruleId":"337","severity":1,"message":"347","line":31,"column":13,"nodeType":"339","messageId":"340","endLine":31,"endColumn":17},{"ruleId":"337","severity":1,"message":"348","line":31,"column":19,"nodeType":"339","messageId":"340","endLine":31,"endColumn":26},{"ruleId":"337","severity":1,"message":"349","line":31,"column":28,"nodeType":"339","messageId":"340","endLine":31,"endColumn":33},{"ruleId":"337","severity":1,"message":"350","line":231,"column":24,"nodeType":"339","messageId":"340","endLine":231,"endColumn":32},{"ruleId":"351","severity":1,"message":"352","line":247,"column":47,"nodeType":"353","messageId":"354","endLine":247,"endColumn":49},{"ruleId":"337","severity":1,"message":"355","line":1,"column":58,"nodeType":"339","messageId":"340","endLine":1,"endColumn":61},{"ruleId":"337","severity":1,"message":"356","line":1,"column":15,"nodeType":"339","messageId":"340","endLine":1,"endColumn":31},{"ruleId":"337","severity":1,"message":"357","line":1,"column":33,"nodeType":"339","messageId":"340","endLine":1,"endColumn":40},{"ruleId":"337","severity":1,"message":"358","line":1,"column":50,"nodeType":"339","messageId":"340","endLine":1,"endColumn":64},{"ruleId":"337","severity":1,"message":"359","line":1,"column":66,"nodeType":"339","messageId":"340","endLine":1,"endColumn":88},{"ruleId":"337","severity":1,"message":"360","line":1,"column":90,"nodeType":"339","messageId":"340","endLine":1,"endColumn":112},{"ruleId":"337","severity":1,"message":"361","line":1,"column":114,"nodeType":"339","messageId":"340","endLine":1,"endColumn":125},{"ruleId":"337","severity":1,"message":"362","line":1,"column":127,"nodeType":"339","messageId":"340","endLine":1,"endColumn":143},{"ruleId":"337","severity":1,"message":"363","line":1,"column":145,"nodeType":"339","messageId":"340","endLine":1,"endColumn":163},{"ruleId":"337","severity":1,"message":"364","line":1,"column":165,"nodeType":"339","messageId":"340","endLine":1,"endColumn":171},{"ruleId":"337","severity":1,"message":"365","line":1,"column":173,"nodeType":"339","messageId":"340","endLine":1,"endColumn":179},{"ruleId":"337","severity":1,"message":"366","line":1,"column":181,"nodeType":"339","messageId":"340","endLine":1,"endColumn":198},{"ruleId":"337","severity":1,"message":"367","line":1,"column":200,"nodeType":"339","messageId":"340","endLine":1,"endColumn":211},{"ruleId":"337","severity":1,"message":"368","line":1,"column":213,"nodeType":"339","messageId":"340","endLine":1,"endColumn":224},{"ruleId":"337","severity":1,"message":"369","line":8,"column":10,"nodeType":"339","messageId":"340","endLine":8,"endColumn":21},{"ruleId":"337","severity":1,"message":"370","line":17,"column":11,"nodeType":"339","messageId":"340","endLine":17,"endColumn":19},{"ruleId":"371","severity":1,"message":"372","line":36,"column":8,"nodeType":"373","endLine":36,"endColumn":10,"suggestions":"374"},{"ruleId":"337","severity":1,"message":"375","line":1,"column":15,"nodeType":"339","messageId":"340","endLine":1,"endColumn":19},{"ruleId":"337","severity":1,"message":"376","line":1,"column":21,"nodeType":"339","messageId":"340","endLine":1,"endColumn":25},{"ruleId":"337","severity":1,"message":"377","line":1,"column":47,"nodeType":"339","messageId":"340","endLine":1,"endColumn":53},{"ruleId":"337","severity":1,"message":"378","line":1,"column":79,"nodeType":"339","messageId":"340","endLine":1,"endColumn":85},{"ruleId":"337","severity":1,"message":"345","line":3,"column":10,"nodeType":"339","messageId":"340","endLine":3,"endColumn":14},{"ruleId":"337","severity":1,"message":"379","line":7,"column":10,"nodeType":"339","messageId":"340","endLine":7,"endColumn":17},{"ruleId":"337","severity":1,"message":"380","line":1,"column":23,"nodeType":"339","messageId":"340","endLine":1,"endColumn":29},{"ruleId":"337","severity":1,"message":"381","line":2,"column":8,"nodeType":"339","messageId":"340","endLine":2,"endColumn":13},{"ruleId":"337","severity":1,"message":"346","line":6,"column":10,"nodeType":"339","messageId":"340","endLine":6,"endColumn":18},{"ruleId":"337","severity":1,"message":"382","line":26,"column":7,"nodeType":"339","messageId":"340","endLine":26,"endColumn":32},{"ruleId":"337","severity":1,"message":"383","line":33,"column":38,"nodeType":"339","messageId":"340","endLine":33,"endColumn":44},{"ruleId":"371","severity":1,"message":"384","line":45,"column":8,"nodeType":"373","endLine":45,"endColumn":14,"suggestions":"385"},{"ruleId":"337","severity":1,"message":"386","line":2,"column":41,"nodeType":"339","messageId":"340","endLine":2,"endColumn":49},{"ruleId":"337","severity":1,"message":"387","line":17,"column":13,"nodeType":"339","messageId":"340","endLine":17,"endColumn":21},{"ruleId":"337","severity":1,"message":"388","line":18,"column":11,"nodeType":"339","messageId":"340","endLine":18,"endColumn":30},{"ruleId":"337","severity":1,"message":"389","line":19,"column":11,"nodeType":"339","messageId":"340","endLine":19,"endColumn":28},{"ruleId":"337","severity":1,"message":"390","line":41,"column":7,"nodeType":"339","messageId":"340","endLine":41,"endColumn":36},{"ruleId":"337","severity":1,"message":"391","line":48,"column":7,"nodeType":"339","messageId":"340","endLine":48,"endColumn":10},{"ruleId":"337","severity":1,"message":"380","line":1,"column":33,"nodeType":"339","messageId":"340","endLine":1,"endColumn":39},{"ruleId":"337","severity":1,"message":"338","line":1,"column":47,"nodeType":"339","messageId":"340","endLine":1,"endColumn":65},{"ruleId":"337","severity":1,"message":"392","line":1,"column":67,"nodeType":"339","messageId":"340","endLine":1,"endColumn":84},{"ruleId":"337","severity":1,"message":"393","line":7,"column":7,"nodeType":"339","messageId":"340","endLine":7,"endColumn":12},{"ruleId":"337","severity":1,"message":"394","line":18,"column":7,"nodeType":"339","messageId":"340","endLine":18,"endColumn":41},{"ruleId":"337","severity":1,"message":"377","line":1,"column":35,"nodeType":"339","messageId":"340","endLine":1,"endColumn":41},{"ruleId":"337","severity":1,"message":"395","line":1,"column":59,"nodeType":"339","messageId":"340","endLine":1,"endColumn":71},{"ruleId":"337","severity":1,"message":"396","line":1,"column":29,"nodeType":"339","messageId":"340","endLine":1,"endColumn":40},{"ruleId":"337","severity":1,"message":"397","line":1,"column":42,"nodeType":"339","messageId":"340","endLine":1,"endColumn":46},{"ruleId":"337","severity":1,"message":"380","line":1,"column":91,"nodeType":"339","messageId":"340","endLine":1,"endColumn":97},{"ruleId":"337","severity":1,"message":"380","line":1,"column":25,"nodeType":"339","messageId":"340","endLine":1,"endColumn":31},{"ruleId":"337","severity":1,"message":"398","line":1,"column":33,"nodeType":"339","messageId":"340","endLine":1,"endColumn":39},{"ruleId":"337","severity":1,"message":"357","line":1,"column":41,"nodeType":"339","messageId":"340","endLine":1,"endColumn":48},{"ruleId":"337","severity":1,"message":"399","line":1,"column":50,"nodeType":"339","messageId":"340","endLine":1,"endColumn":57},{"ruleId":"337","severity":1,"message":"400","line":1,"column":59,"nodeType":"339","messageId":"340","endLine":1,"endColumn":71},{"ruleId":"337","severity":1,"message":"401","line":1,"column":79,"nodeType":"339","messageId":"340","endLine":1,"endColumn":94},{"ruleId":"337","severity":1,"message":"345","line":1,"column":96,"nodeType":"339","messageId":"340","endLine":1,"endColumn":100},{"ruleId":"337","severity":1,"message":"402","line":1,"column":102,"nodeType":"339","messageId":"340","endLine":1,"endColumn":112},{"ruleId":"337","severity":1,"message":"403","line":1,"column":114,"nodeType":"339","messageId":"340","endLine":1,"endColumn":129},{"ruleId":"337","severity":1,"message":"392","line":1,"column":163,"nodeType":"339","messageId":"340","endLine":1,"endColumn":180},{"ruleId":"337","severity":1,"message":"404","line":1,"column":182,"nodeType":"339","messageId":"340","endLine":1,"endColumn":190},{"ruleId":"337","severity":1,"message":"405","line":3,"column":10,"nodeType":"339","messageId":"340","endLine":3,"endColumn":21},{"ruleId":"337","severity":1,"message":"380","line":1,"column":37,"nodeType":"339","messageId":"340","endLine":1,"endColumn":43},{"ruleId":"337","severity":1,"message":"343","line":13,"column":10,"nodeType":"339","messageId":"340","endLine":13,"endColumn":14},{"ruleId":"337","severity":1,"message":"386","line":4,"column":15,"nodeType":"339","messageId":"340","endLine":4,"endColumn":23},{"ruleId":"337","severity":1,"message":"406","line":2,"column":10,"nodeType":"339","messageId":"340","endLine":2,"endColumn":18},{"ruleId":"337","severity":1,"message":"407","line":9,"column":8,"nodeType":"339","messageId":"340","endLine":9,"endColumn":17},{"ruleId":"337","severity":1,"message":"408","line":22,"column":6,"nodeType":"339","messageId":"340","endLine":22,"endColumn":21},{"ruleId":"337","severity":1,"message":"409","line":41,"column":7,"nodeType":"339","messageId":"340","endLine":41,"endColumn":18},{"ruleId":"337","severity":1,"message":"410","line":45,"column":13,"nodeType":"339","messageId":"340","endLine":45,"endColumn":17},{"ruleId":"337","severity":1,"message":"380","line":1,"column":23,"nodeType":"339","messageId":"340","endLine":1,"endColumn":29},{"ruleId":"337","severity":1,"message":"377","line":1,"column":35,"nodeType":"339","messageId":"340","endLine":1,"endColumn":41},{"ruleId":"337","severity":1,"message":"395","line":1,"column":59,"nodeType":"339","messageId":"340","endLine":1,"endColumn":71},{"ruleId":"337","severity":1,"message":"375","line":1,"column":10,"nodeType":"339","messageId":"340","endLine":1,"endColumn":14},{"ruleId":"337","severity":1,"message":"376","line":1,"column":16,"nodeType":"339","messageId":"340","endLine":1,"endColumn":20},{"ruleId":"337","severity":1,"message":"377","line":1,"column":22,"nodeType":"339","messageId":"340","endLine":1,"endColumn":28},{"ruleId":"337","severity":1,"message":"380","line":1,"column":37,"nodeType":"339","messageId":"340","endLine":1,"endColumn":43},{"ruleId":"337","severity":1,"message":"411","line":6,"column":7,"nodeType":"339","messageId":"340","endLine":6,"endColumn":32},{"ruleId":"331","replacedBy":"412"},{"ruleId":"333","replacedBy":"413"},{"ruleId":"337","severity":1,"message":"414","line":77,"column":7,"nodeType":"339","messageId":"340","endLine":77,"endColumn":19},{"ruleId":"337","severity":1,"message":"415","line":32,"column":11,"nodeType":"339","messageId":"340","endLine":32,"endColumn":22},{"ruleId":"371","severity":1,"message":"416","line":51,"column":8,"nodeType":"373","endLine":51,"endColumn":10,"suggestions":"417"},{"ruleId":"337","severity":1,"message":"355","line":1,"column":10,"nodeType":"339","messageId":"340","endLine":1,"endColumn":13},{"ruleId":"337","severity":1,"message":"418","line":1,"column":90,"nodeType":"339","messageId":"340","endLine":1,"endColumn":103},{"ruleId":"419","severity":1,"message":"420","line":23,"column":38,"nodeType":"421","messageId":"422","endLine":23,"endColumn":39,"suggestions":"423"},{"ruleId":"419","severity":1,"message":"420","line":23,"column":63,"nodeType":"421","messageId":"422","endLine":23,"endColumn":64,"suggestions":"424"},{"ruleId":"419","severity":1,"message":"420","line":23,"column":72,"nodeType":"421","messageId":"422","endLine":23,"endColumn":73,"suggestions":"425"},{"ruleId":"419","severity":1,"message":"420","line":23,"column":76,"nodeType":"421","messageId":"422","endLine":23,"endColumn":77,"suggestions":"426"},{"ruleId":"337","severity":1,"message":"427","line":1,"column":62,"nodeType":"339","messageId":"340","endLine":1,"endColumn":68},{"ruleId":"337","severity":1,"message":"428","line":4,"column":19,"nodeType":"339","messageId":"340","endLine":4,"endColumn":25},{"ruleId":"337","severity":1,"message":"429","line":6,"column":10,"nodeType":"339","messageId":"340","endLine":6,"endColumn":21},{"ruleId":"337","severity":1,"message":"430","line":7,"column":85,"nodeType":"339","messageId":"340","endLine":7,"endColumn":95},{"ruleId":"337","severity":1,"message":"349","line":131,"column":19,"nodeType":"339","messageId":"340","endLine":131,"endColumn":24},{"ruleId":"337","severity":1,"message":"431","line":10,"column":40,"nodeType":"339","messageId":"340","endLine":10,"endColumn":50},{"ruleId":"337","severity":1,"message":"432","line":10,"column":78,"nodeType":"339","messageId":"340","endLine":10,"endColumn":87},{"ruleId":"337","severity":1,"message":"433","line":41,"column":30,"nodeType":"339","messageId":"340","endLine":41,"endColumn":39},{"ruleId":"337","severity":1,"message":"383","line":41,"column":41,"nodeType":"339","messageId":"340","endLine":41,"endColumn":47},{"ruleId":"337","severity":1,"message":"348","line":49,"column":29,"nodeType":"339","messageId":"340","endLine":49,"endColumn":36},{"ruleId":"371","severity":1,"message":"434","line":100,"column":8,"nodeType":"373","endLine":100,"endColumn":18,"suggestions":"435"},{"ruleId":"436","severity":1,"message":"437","line":183,"column":34,"nodeType":"438","messageId":"439","endLine":183,"endColumn":36},{"ruleId":"351","severity":1,"message":"352","line":359,"column":104,"nodeType":"353","messageId":"354","endLine":359,"endColumn":106},{"ruleId":"337","severity":1,"message":"440","line":1,"column":17,"nodeType":"339","messageId":"340","endLine":1,"endColumn":30},{"ruleId":"337","severity":1,"message":"441","line":7,"column":7,"nodeType":"339","messageId":"340","endLine":7,"endColumn":26},{"ruleId":"337","severity":1,"message":"442","line":41,"column":6,"nodeType":"339","messageId":"340","endLine":41,"endColumn":19},"no-native-reassign",["443"],"no-negated-in-lhs",["444"],["443"],["444"],"@typescript-eslint/no-unused-vars","'useBreakpointValue' is defined but never used.","Identifier","unusedVar","'BrowserRouter' is defined but never used.","'useHistory' is defined but never used.","'mode' is defined but never used.","'ScrollToTop' is assigned a value but never used.","'Link' is defined but never used.","'Redirect' is defined but never used.","'data' is assigned a value but never used.","'isError' is assigned a value but never used.","'error' is assigned a value but never used.","'boxProps' is assigned a value but never used.","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","'Box' is defined but never used.","'CircularProgress' is defined but never used.","'Divider' is defined but never used.","'InputLeftAddon' is defined but never used.","'NumberDecrementStepper' is defined but never used.","'NumberIncrementStepper' is defined but never used.","'NumberInput' is defined but never used.","'NumberInputField' is defined but never used.","'NumberInputStepper' is defined but never used.","'Portal' is defined but never used.","'Slider' is defined but never used.","'SliderFilledTrack' is defined but never used.","'SliderThumb' is defined but never used.","'SliderTrack' is defined but never used.","'MdGraphicEq' is defined but never used.","'queryStr' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook React.useEffect has a missing dependency: 'location.state'. Either include it or remove the dependency array.","ArrayExpression",["445"],"'Flex' is defined but never used.","'Grid' is defined but never used.","'Spacer' is defined but never used.","'Button' is defined but never used.","'isError' is defined but never used.","'Center' is defined but never used.","'axios' is defined but never used.","'defaultValue' is assigned a value but never used.","'status' is assigned a value but never used.","React Hook React.useEffect has a missing dependency: 'props'. Either include it or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside React.useEffect.",["446"],"'DarkMode' is defined but never used.","'pathname' is assigned a value but never used.","'bgColorMenuWhenHome' is assigned a value but never used.","'colorMenuWhenHome' is assigned a value but never used.","'defaultRooms' is assigned a value but never used.","'str' is assigned a value but never used.","'useColorModeValue' is defined but never used.","'today' is assigned a value but never used.","'defaultSchedules' is assigned a value but never used.","'StackDivider' is defined but never used.","'LinkOverlay' is defined but never used.","'Text' is defined but never used.","'chakra' is defined but never used.","'Heading' is defined but never used.","'HeadingProps' is defined but never used.","'HTMLChakraProps' is defined but never used.","'SimpleGrid' is defined but never used.","'SimpleGridProps' is defined but never used.","'useToken' is defined but never used.","'BsHeartFill' is defined but never used.","'userInfo' is defined but never used.","'SearchBar' is defined but never used.","'SingleRoomProps' is defined but never used.","'GetRoomById' is assigned a value but never used.","'slug' is assigned a value but never used.","'defaultRoom' is assigned a value but never used.",["443"],["444"],"'fetchPincode' is assigned a value but never used.","'queryClient' is assigned a value but never used.","React Hook React.useEffect has missing dependencies: 'loginAsync' and 'logoutAsync'. Either include them or remove the dependency array.",["447"],"'useDisclosure' is defined but never used.","no-useless-escape","Unnecessary escape character: \\\".","Literal","unnecessaryEscape",["448","449"],["450","451"],["452","453"],["454","455"],"'HStack' is defined but never used.","'FaStar' is defined but never used.","'useLocation' is defined but never used.","'toggleLike' is defined but never used.","'RouteProps' is defined but never used.","'useParams' is defined but never used.","'isLoading' is assigned a value but never used.","React Hook React.useEffect has a missing dependency: 'query'. Either include it or remove the dependency array.",["456"],"array-callback-return","Array.prototype.find() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","'AxiosResponse' is defined but never used.","'API_IMAGE_CLIENT_ID' is assigned a value but never used.","'ReviewRequest' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"457","fix":"458"},{"desc":"459","fix":"460"},{"desc":"461","fix":"462"},{"messageId":"463","fix":"464","desc":"465"},{"messageId":"466","fix":"467","desc":"468"},{"messageId":"463","fix":"469","desc":"465"},{"messageId":"466","fix":"470","desc":"468"},{"messageId":"463","fix":"471","desc":"465"},{"messageId":"466","fix":"472","desc":"468"},{"messageId":"463","fix":"473","desc":"465"},{"messageId":"466","fix":"474","desc":"468"},{"desc":"475","fix":"476"},"Update the dependencies array to be: [location.state]",{"range":"477","text":"478"},"Update the dependencies array to be: [form, props]",{"range":"479","text":"480"},"Update the dependencies array to be: [loginAsync, logoutAsync]",{"range":"481","text":"482"},"removeEscape",{"range":"483","text":"484"},"Remove the `\\`. This maintains the current functionality.","escapeBackslash",{"range":"485","text":"486"},"Replace the `\\` with `\\\\` to include the actual backslash character.",{"range":"487","text":"484"},{"range":"488","text":"486"},{"range":"489","text":"484"},{"range":"490","text":"486"},{"range":"491","text":"484"},{"range":"492","text":"486"},"Update the dependencies array to be: [location, query]",{"range":"493","text":"494"},[1533,1535],"[location.state]",[1382,1388],"[form, props]",[1730,1732],"[loginAsync, logoutAsync]",[727,728],"",[727,727],"\\",[752,753],[752,752],[761,762],[761,761],[765,766],[765,765],[3913,3923],"[location, query]"]