[{"E:\\Repos\\hostel-chakra\\Hostel\\src\\index.tsx":"1","E:\\Repos\\hostel-chakra\\Hostel\\src\\reportWebVitals.ts":"2","E:\\Repos\\hostel-chakra\\Hostel\\src\\serviceWorker.ts":"3","E:\\Repos\\hostel-chakra\\Hostel\\src\\App.tsx":"4","E:\\Repos\\hostel-chakra\\Hostel\\src\\Pages\\SingleRoom.tsx":"5","E:\\Repos\\hostel-chakra\\Hostel\\src\\Pages\\ErrorPage.tsx":"6","E:\\Repos\\hostel-chakra\\Hostel\\src\\ColorModeSwitcher.tsx":"7","E:\\Repos\\hostel-chakra\\Hostel\\src\\Logo.tsx":"8","E:\\Repos\\hostel-chakra\\Hostel\\src\\Pages\\HomePage.tsx":"9","E:\\Repos\\hostel-chakra\\Hostel\\src\\Pages\\RoomsPage.tsx":"10","E:\\Repos\\hostel-chakra\\Hostel\\src\\Components\\HomeComponents\\PropertyTypeList.tsx":"11","E:\\Repos\\hostel-chakra\\Hostel\\src\\Components\\NavComponents\\SearchBar.tsx":"12","E:\\Repos\\hostel-chakra\\Hostel\\src\\Components\\NavComponents\\Navbar.tsx":"13","E:\\Repos\\hostel-chakra\\Hostel\\src\\Components\\FilterComponents\\RoomCardList.tsx":"14","E:\\Repos\\hostel-chakra\\Hostel\\src\\Components\\NavComponents\\PickRangeDay.tsx":"15","E:\\Repos\\hostel-chakra\\Hostel\\src\\Components\\NavComponents\\PopDetail.tsx":"16","E:\\Repos\\hostel-chakra\\Hostel\\src\\Components\\FilterComponents\\RoomCard.tsx":"17","E:\\Repos\\hostel-chakra\\Hostel\\src\\Components\\NavComponents\\Footer.tsx":"18","E:\\Repos\\hostel-chakra\\Hostel\\src\\Components\\SingleRoomComponents\\MyRoomBadge.tsx":"19","E:\\Repos\\hostel-chakra\\Hostel\\src\\Components\\Authentication.tsx":"20","e:\\Repos\\hostel-chakra\\Hostel\\src\\index.tsx":"21","e:\\Repos\\hostel-chakra\\Hostel\\src\\reportWebVitals.ts":"22","e:\\Repos\\hostel-chakra\\Hostel\\src\\serviceWorker.ts":"23","e:\\Repos\\hostel-chakra\\Hostel\\src\\App.tsx":"24","e:\\Repos\\hostel-chakra\\Hostel\\src\\Pages\\HomePage.tsx":"25","e:\\Repos\\hostel-chakra\\Hostel\\src\\Pages\\SingleRoom.tsx":"26","e:\\Repos\\hostel-chakra\\Hostel\\src\\Pages\\RoomsPage.tsx":"27","e:\\Repos\\hostel-chakra\\Hostel\\src\\Pages\\ErrorPage.tsx":"28","e:\\Repos\\hostel-chakra\\Hostel\\src\\Components\\NavComponents\\Footer.tsx":"29","e:\\Repos\\hostel-chakra\\Hostel\\src\\Components\\NavComponents\\SearchBar.tsx":"30","e:\\Repos\\hostel-chakra\\Hostel\\src\\Components\\NavComponents\\PickRangeDay.tsx":"31","e:\\Repos\\hostel-chakra\\Hostel\\src\\Components\\NavComponents\\Navbar.tsx":"32","e:\\Repos\\hostel-chakra\\Hostel\\src\\Components\\NavComponents\\PopDetail.tsx":"33","e:\\Repos\\hostel-chakra\\Hostel\\src\\Components\\HomeComponents\\PropertyTypeList.tsx":"34","e:\\Repos\\hostel-chakra\\Hostel\\src\\Components\\SingleRoomComponents\\MyRoomBadge.tsx":"35","e:\\Repos\\hostel-chakra\\Hostel\\src\\Components\\FilterComponents\\RoomCardList.tsx":"36","e:\\Repos\\hostel-chakra\\Hostel\\src\\Logo.tsx":"37","e:\\Repos\\hostel-chakra\\Hostel\\src\\ColorModeSwitcher.tsx":"38","e:\\Repos\\hostel-chakra\\Hostel\\src\\Components\\Authentication.tsx":"39","e:\\Repos\\hostel-chakra\\Hostel\\src\\Components\\FilterComponents\\RoomCard.tsx":"40"},{"size":862,"mtime":1613928821144,"results":"41","hashOfConfig":"42"},{"size":431,"mtime":1612286281167,"results":"43","hashOfConfig":"42"},{"size":5404,"mtime":1612286281167,"results":"44","hashOfConfig":"42"},{"size":1566,"mtime":1615545947921,"results":"45","hashOfConfig":"42"},{"size":12795,"mtime":1615558189132,"results":"46","hashOfConfig":"42"},{"size":173,"mtime":1612286281165,"results":"47","hashOfConfig":"42"},{"size":773,"mtime":1612286281164,"results":"48","hashOfConfig":"42"},{"size":614,"mtime":1612286281165,"results":"49","hashOfConfig":"42"},{"size":1187,"mtime":1613423994602,"results":"50","hashOfConfig":"42"},{"size":826,"mtime":1613605467202,"results":"51","hashOfConfig":"42"},{"size":3204,"mtime":1615548216264,"results":"52","hashOfConfig":"42"},{"size":4914,"mtime":1615479910772,"results":"53","hashOfConfig":"42"},{"size":1825,"mtime":1615480854113,"results":"54","hashOfConfig":"42"},{"size":1319,"mtime":1615243153335,"results":"55","hashOfConfig":"42"},{"size":3977,"mtime":1613608465743,"results":"56","hashOfConfig":"42"},{"size":3126,"mtime":1613423216595,"results":"57","hashOfConfig":"42"},{"size":3097,"mtime":1615545996552,"results":"58","hashOfConfig":"42"},{"size":690,"mtime":1613435526288,"results":"59","hashOfConfig":"42"},{"size":1847,"mtime":1613599095669,"results":"60","hashOfConfig":"42"},{"size":6357,"mtime":1613957227338,"results":"61","hashOfConfig":"42"},{"size":862,"mtime":1612286281166,"results":"62","hashOfConfig":"63"},{"size":431,"mtime":1612286281167,"results":"64","hashOfConfig":"63"},{"size":5404,"mtime":1612286281167,"results":"65","hashOfConfig":"63"},{"size":1405,"mtime":1613435563432,"results":"66","hashOfConfig":"63"},{"size":1187,"mtime":1613423994602,"results":"67","hashOfConfig":"63"},{"size":11934,"mtime":1613608974661,"results":"68","hashOfConfig":"63"},{"size":826,"mtime":1613605467202,"results":"69","hashOfConfig":"63"},{"size":173,"mtime":1612286281165,"results":"70","hashOfConfig":"63"},{"size":690,"mtime":1613435526288,"results":"71","hashOfConfig":"63"},{"size":3214,"mtime":1613608551630,"results":"72","hashOfConfig":"63"},{"size":3977,"mtime":1613608465743,"results":"73","hashOfConfig":"63"},{"size":1768,"mtime":1613606848363,"results":"74","hashOfConfig":"63"},{"size":3126,"mtime":1613423216595,"results":"75","hashOfConfig":"63"},{"size":1475,"mtime":1613423216593,"results":"76","hashOfConfig":"63"},{"size":1847,"mtime":1613599095669,"results":"77","hashOfConfig":"63"},{"size":1318,"mtime":1613606682010,"results":"78","hashOfConfig":"63"},{"size":614,"mtime":1612286281165,"results":"79","hashOfConfig":"63"},{"size":773,"mtime":1612286281164,"results":"80","hashOfConfig":"63"},{"size":335,"mtime":1613608013812,"results":"81","hashOfConfig":"63"},{"size":3020,"mtime":1613608660633,"results":"82","hashOfConfig":"63"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"85"},"13hiuhw",{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"85"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"85"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"92","usedDeprecatedRules":"85"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"85"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"85"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"85"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"103","usedDeprecatedRules":"85"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"85"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"108","usedDeprecatedRules":"85"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"111","usedDeprecatedRules":"85"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"85"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"85"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"118","usedDeprecatedRules":"85"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"121","usedDeprecatedRules":"85"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"124","usedDeprecatedRules":"85"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"85"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"129","usedDeprecatedRules":"85"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"132","usedDeprecatedRules":"85"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"99iabf",{"filePath":"135","messages":"136","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"137","messages":"138","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"139","messages":"140","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"141","messages":"142","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"143","messages":"144","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"145","messages":"146","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"147","messages":"148","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"149","messages":"150","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"151","messages":"152","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"153","messages":"154","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"155","messages":"156","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"157","messages":"158","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"159","messages":"160","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"161","messages":"162","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"163","messages":"164","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"165","messages":"166","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"167","messages":"168","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"169","messages":"170","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"171","messages":"172","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"E:\\Repos\\hostel-chakra\\Hostel\\src\\index.tsx",[],["173","174"],"E:\\Repos\\hostel-chakra\\Hostel\\src\\reportWebVitals.ts",[],"E:\\Repos\\hostel-chakra\\Hostel\\src\\serviceWorker.ts",[],"E:\\Repos\\hostel-chakra\\Hostel\\src\\App.tsx",["175","176"],"import * as React from \"react\"\r\nimport {\r\n  ChakraProvider,\r\n  Box,\r\n  extendTheme,\r\n} from \"@chakra-ui/react\"\r\nimport { HashRouter, Route, Switch, BrowserRouter } from 'react-router-dom'\r\nimport HomePage from \"./Pages/HomePage\";\r\nimport SingleRoom from \"./Pages/SingleRoom\";\r\nimport ErrorPage from \"./Pages/ErrorPage\";\r\nimport RoomsPage from \"./Pages/RoomsPage\";\r\nimport \"./App.css\";\r\nimport { mode } from \"@chakra-ui/theme-tools\";\r\nimport \"slick-carousel/slick/slick.css\";\r\nimport \"slick-carousel/slick/slick-theme.css\";\r\nimport Footer from \"./Components/NavComponents/Footer\";\r\nimport { QueryClient, QueryClientProvider } from \"react-query\";\r\n// theme.components.Button.baseStyle.borderRadius = \"0\";\r\n\r\nconst myTheme = extendTheme({\r\n  components: {\r\n    Button: {\r\n      defaultProps: {\r\n      }\r\n    },\r\n  }\r\n})\r\n\r\nconst queryClient = new QueryClient();\r\n\r\nexport const App = () => (\r\n  <HashRouter basename=\"/\">\r\n    <ChakraProvider theme={myTheme}>\r\n      <QueryClientProvider client={queryClient}>\r\n        <Box d=\"flex\" flexDir=\"column\" minH=\"100vh\">\r\n          <Box flex=\"1\" >\r\n            <Switch>\r\n              <Route exact path=\"/\" component={HomePage} />\r\n              <Route exact path=\"/rooms/:slug\" component={SingleRoom} />\r\n              <Route exact path=\"/rooms/\" component={RoomsPage} />\r\n              <Route component={ErrorPage} />\r\n            </Switch>\r\n          </Box>\r\n          <Box flexShrink={0}>\r\n            <Footer />\r\n          </Box>\r\n        </Box>\r\n\r\n      </QueryClientProvider>\r\n    </ChakraProvider>\r\n  </HashRouter>\r\n)\r\n","E:\\Repos\\hostel-chakra\\Hostel\\src\\Pages\\SingleRoom.tsx",["177","178","179","180","181"],"E:\\Repos\\hostel-chakra\\Hostel\\src\\Pages\\ErrorPage.tsx",[],"E:\\Repos\\hostel-chakra\\Hostel\\src\\ColorModeSwitcher.tsx",[],"E:\\Repos\\hostel-chakra\\Hostel\\src\\Logo.tsx",[],"E:\\Repos\\hostel-chakra\\Hostel\\src\\Pages\\HomePage.tsx",["182"],"import React from 'react'\r\nimport PropertyTypeList from '../Components/HomeComponents/PropertyTypeList'\r\nimport SearchBar from '../Components/NavComponents/SearchBar';\r\nimport { Box, DarkMode } from \"@chakra-ui/react\"\r\nimport BG from \"../Images/HomeBG.webp\";\r\nimport Navbar from '../Components/NavComponents/Navbar';\r\n\r\nconst px = \"10%\";\r\n\r\nconst HomePage = () => {\r\n    return (\r\n        <Box>\r\n            <Box minH={[\"50vh\", \"75vh\", \"85vh\"]} style={{ background: \"url('\" + BG + \"') center/cover no-repeat\" }}>\r\n                <Box px={px} pt=\"5\">\r\n                    <Navbar></Navbar>\r\n                    <SearchBar />\r\n                    <Box as=\"h1\" fontFamily=\"mono\" opacity=\"0.5\" fontWeight=\"bold\" fontSize={[\"3xl\", \"4xl\", \"6xl\", \"8xl\"]}\r\n                        position=\"relative\" mt={[\"5vh\", \"10vh\", \"20vh\", \"30vh\"]}>EXPLORE AROUND</Box>\r\n                </Box>\r\n            </Box>\r\n            <Box px={px} mt=\"10\">\r\n                <Box as=\"h2\" fontWeight=\"bold\" fontSize=\"4xl\" mb=\"5\">\r\n                    LIVE ANYWHERE\r\n                </Box>\r\n                <PropertyTypeList></PropertyTypeList>\r\n            </Box>\r\n        </Box>\r\n    )\r\n}\r\nexport default HomePage;","E:\\Repos\\hostel-chakra\\Hostel\\src\\Pages\\RoomsPage.tsx",[],"E:\\Repos\\hostel-chakra\\Hostel\\src\\Components\\HomeComponents\\PropertyTypeList.tsx",["183","184","185","186"],"import { Box, Flex, Grid, Link as ChakraLink, Spacer, VStack, Image, Tooltip } from '@chakra-ui/react';\r\nimport React from 'react';\r\nimport { Link } from \"react-router-dom\"\r\nimport Slider, { Settings } from 'react-slick';\r\nimport \"slick-carousel/slick/slick.css\";\r\nimport \"slick-carousel/slick/slick-theme.css\";\r\nimport { isError, useQuery } from 'react-query';\r\n\r\nvar settings: Settings = {\r\n    dots: true,\r\n    infinite: true,\r\n    speed: 500,\r\n    slidesToShow: 4,\r\n    slidesToScroll: 1,\r\n    initialSlide: 0,\r\n    swipeToSlide: true,\r\n    responsive: [\r\n        {\r\n            breakpoint: 1024,\r\n            settings: {\r\n                slidesToShow: 4,\r\n                slidesToScroll: 1,\r\n                infinite: true,\r\n                dots: true\r\n            }\r\n        },\r\n        {\r\n            breakpoint: 600,\r\n            settings: {\r\n                slidesToShow: 3,\r\n                slidesToScroll: 1,\r\n                initialSlide: 2\r\n            }\r\n        },\r\n        {\r\n            breakpoint: 480,\r\n            settings: {\r\n                slidesToShow: 1,\r\n                slidesToScroll: 1\r\n            }\r\n        }\r\n    ]\r\n};\r\n\r\nconst fetchPropertyTypes = async () => {\r\n    const url = \"http://localhost:44343\"\r\n    const res = await fetch(url + \"/api/propertytypes\");\r\n    const data: PropertyTypeType[] = await res.json();\r\n    return data;\r\n}\r\n\r\nconst PropertyTypeList = () => {\r\n    const { data, isError } = useQuery<unknown, unknown, PropertyTypeType[]>(\"propertypeList\", fetchPropertyTypes);\r\n    console.log(data);\r\n\r\n    if (isError) return <Box>Something's wrong</Box>\r\n    return (\r\n        <div>\r\n            <Slider {...settings}>\r\n                {data?.map((d, key) => <PropertyType type={d} key={key} />)}\r\n            </Slider>\r\n        </div>\r\n    )\r\n}\r\n\r\ntype PropertyTypeProps = {\r\n    type: PropertyTypeType;\r\n}\r\n\r\ntype PropertyTypeType = {\r\n    id: string;\r\n    propertyType: string;\r\n    thumbnailImg: string;\r\n    description: string;\r\n    count: number;\r\n}\r\n\r\nconst PropertyType: React.FC<PropertyTypeProps> = ({ type, children }) => {\r\n    return (\r\n        <VStack alignItems=\"start\" p=\"4\">\r\n            <ChakraLink as={Link} to={'/rooms?typeId=' + type.id}>\r\n                <Tooltip hasArrow placement=\"top\" aria-label={\"tooltips\"} label={type.description} openDelay={500}>\r\n                    <Box>\r\n                        <Box maxW=\"sm\" maxH=\"sm\" minH=\"100px\">\r\n                            <Image width=\"inherit\" height=\"inherit\" src={type.thumbnailImg} objectFit=\"cover\"></Image>\r\n                        </Box>\r\n\r\n                        <Box\r\n                            mt=\"1\"\r\n                            fontWeight=\"semibold\"\r\n                            as=\"h4\"\r\n                            lineHeight=\"tight\"\r\n                            isTruncated\r\n                        >\r\n                            {type.propertyType}\r\n                        </Box>\r\n                    </Box>\r\n                </Tooltip>\r\n            </ChakraLink>\r\n            <Box color=\"gray.500\" fontSize=\"md\">\r\n                {type.count + \" \" + type.propertyType + \"\"}\r\n            </Box>\r\n        </VStack>\r\n    )\r\n}\r\n\r\nexport default PropertyTypeList;","E:\\Repos\\hostel-chakra\\Hostel\\src\\Components\\NavComponents\\SearchBar.tsx",["187","188"],"import { Box, Button, Center, Flex, Input, InputGroup, InputLeftElement, InputRightElement, Popover, PopoverContent, PopoverTrigger, Spinner } from '@chakra-ui/react';\r\nimport axios from 'axios';\r\nimport React from 'react';\r\nimport { BsSearch } from 'react-icons/bs';\r\nimport { useQuery } from 'react-query';\r\n// import 'react-day-picker/lib/style.css';\r\nimport PickRangeDay from './PickRangeDay';\r\nimport PopDetail from './PopDetail';\r\n\r\ntype CityResponse = {\r\n    cityName: string;\r\n    cityId: string;\r\n    countryName: string;\r\n    countryId: string;\r\n}\r\n\r\ntype SearchBarProps = {\r\n    country?: string;\r\n    city?: string;\r\n    from?: Date;\r\n    to?: Date;\r\n    adultNum?: number;\r\n    childrenNum?: number;\r\n    bedRoom?: number;\r\n}\r\n\r\nconst defaultValue: SearchBarProps = {\r\n    adultNum: 1,\r\n    childrenNum: 0,\r\n    bedRoom: 1\r\n}\r\n\r\nconst URL = \"http://localhost:44343\";\r\n\r\nconst fetchCities = async () => {\r\n    // const res = await axios({\r\n    //     method: \"GET\",\r\n    //     url: URL + \"api/city\",\r\n    //     timeout: 5000\r\n    // });\r\n    // return res;\r\n    const res = await fetch(URL + \"/api/cities\");\r\n    const data = res.json();\r\n    return data;\r\n}\r\n\r\nconst SearchBar = () => {\r\n    const { data: cities, isLoading, status } = useQuery<unknown, unknown, CityResponse[]>(\"cities\", fetchCities);\r\n    // console.log(cities);\r\n    const [form, setForm] = React.useState<SearchBarProps>(defaultValue);\r\n    const cityRef = React.useRef<HTMLInputElement>(null);\r\n\r\n    // if (isLoading) return <>loading...</>;\r\n\r\n    const UpdateDate = (from?: Date, to?: Date) => {\r\n        setForm(s => ({\r\n            ...s,\r\n            from: from,\r\n            to: to\r\n        }))\r\n    }\r\n\r\n    const UpdatePeople = (adult: number, children: number, room: number) => {\r\n        setForm(s => ({\r\n            ...s,\r\n            childrenNum: children,\r\n            adultNum: adult,\r\n            bedRoom: room\r\n        }))\r\n        console.log(adult, children, room);\r\n    }\r\n\r\n    return (<div>\r\n        <Box p=\"2\" border=\"1px\" borderColor=\"yellow.400\" style={{ backdropFilter: \"blur(5px)\" }}>\r\n            <Flex display={{ lg: \"flex\" }} alignItems=\"center\">\r\n                <InputGroup>\r\n                    <InputLeftElement pointerEvents=\"none\" children={<BsSearch />} />\r\n                    <Input list=\"datalist-cities\" placeholder=\"Country\" size=\"lg\" borderRadius=\"0\" ref={cityRef} />\r\n                    {isLoading ? <InputRightElement children={<Spinner alignSelf=\"center\" />}></InputRightElement> :\r\n                        <datalist id=\"datalist-cities\" style={{}}>\r\n                            <Box>\r\n                                {cities?.map(c => {\r\n                                    return <option key={c.cityId} value={c.cityName} />\r\n                                })}\r\n                                {status === 'error' && <>\r\n                                    <option value=\"Hanoi\" />\r\n                                    <option value=\"Moscow\" />\r\n                                    <option value=\"Danang\" />\r\n                                    <option value=\"Ivanovo\" />\r\n                                </>}\r\n                            </Box>\r\n                        </datalist>\r\n                    }\r\n                </InputGroup>\r\n                <Popover closeOnBlur={true}>\r\n                    <PopoverTrigger>\r\n                        <Button variant=\"outline\" w={[\"100%\", \"100%\", \"100%\", \"150%\"]} size=\"lg\" _focusVisible={{ border: \"0\" }} borderRadius=\"0\" px=\"2\">{form?.from?.toDateString() || \"From\"} - {form?.to?.toDateString() || \"To\"}</Button>\r\n                    </PopoverTrigger>\r\n                    <PopoverContent flexWrap=\"nowrap\" alignItems=\"center\" w={[\"100%\", \"100%\", \"200%\", \"200%\"]} left={[\"0%\", \"0%\", \"-50%\", \"-50%\"]} borderRadius=\"0\" bgColor=\"rgba(66, 153, 225, 0.5)\">\r\n                        <PickRangeDay updateDate={UpdateDate} />\r\n                    </PopoverContent>\r\n                </Popover>\r\n                <Popover>\r\n                    <PopoverTrigger>\r\n                        <Button variant=\"outline\" w={[\"100%\", \"100%\", \"100%\", \"150%\"]} size=\"lg\" borderRadius=\"0\" px=\"2\">{form.adultNum + ' adult(s) - ' + form.childrenNum + ' child(s) - ' + form.bedRoom + ' room(s)'}</Button>\r\n                    </PopoverTrigger>\r\n                    <PopoverContent flexWrap=\"nowrap\" borderRadius=\"0\" bg=\"inherit\" bgColor=\"rgba(66, 153, 225, 0.8)\">\r\n                        <PopDetail updatePeople={UpdatePeople} adult={form.adultNum!} bedRoom={form.bedRoom!} children={form.childrenNum!}></PopDetail>\r\n                    </PopoverContent>\r\n                </Popover>\r\n                <Button alignSelf=\"center\" size=\"lg\" minW=\"100px\" ml={[0, 0, 0, 2]}\r\n                    mt={[2, 2, 2, 0]} w={[\"100%\", \"100%\", \"100%\", \"30%\"]} borderRadius=\"0\">Search</Button>\r\n            </Flex>\r\n        </Box>\r\n    </div>)\r\n}\r\n\r\nexport default SearchBar;","E:\\Repos\\hostel-chakra\\Hostel\\src\\Components\\NavComponents\\Navbar.tsx",[],"E:\\Repos\\hostel-chakra\\Hostel\\src\\Components\\FilterComponents\\RoomCardList.tsx",[],"E:\\Repos\\hostel-chakra\\Hostel\\src\\Components\\NavComponents\\PickRangeDay.tsx",["189"],"import { Box, Button, Center, Flex } from '@chakra-ui/react';\r\nimport React from 'react'\r\nimport DayPicker from 'react-day-picker';\r\nimport { DateUtils } from \"react-day-picker\";\r\nimport 'react-day-picker/lib/style.css';\r\ntype PickRangeDayState = {\r\n    from?: Date;\r\n    to?: Date;\r\n    enteredTo?: Date; // keep track of the last day for mouseEnter\r\n}\r\n\r\ntype PickRangeDayProps = {\r\n    from?: Date,\r\n    to?: Date,\r\n    updateDate: (from?: Date, to?: Date) => void,\r\n}\r\n\r\nconst defaultDate: PickRangeDayState = {\r\n    from: undefined,\r\n    to: undefined,\r\n    enteredTo: undefined\r\n}\r\n\r\nconst PickRangeDay: React.FC<PickRangeDayProps> = ({ from, to, updateDate }) => {\r\n    const [state, setState] = React.useState<PickRangeDayState>({ from: from, to: to });\r\n\r\n    React.useEffect(() => {\r\n        updateDate(state.from, state.to);\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [state.from, state.to]);\r\n\r\n    const isSelectingFirstDay = (day: Date, from?: Date, to?: Date) => {\r\n        const isBeforeFirstDay = from && DateUtils.isDayBefore(day, from);\r\n        const isRangeSelected = from && to;\r\n        return !from || isBeforeFirstDay || isRangeSelected;\r\n    }\r\n\r\n    const handleDayMouseEnter = (day: Date) => {\r\n        const { from, to } = state;\r\n        if (!isSelectingFirstDay(day, from, to)) {\r\n            setState(s => ({\r\n                ...s,\r\n                enteredTo: day,\r\n            }));\r\n        }\r\n    }\r\n\r\n    const handleDayClick = (day: Date) => {\r\n        const today = new Date(Date.now());\r\n        if (day < today) return;\r\n        const { from, to } = state;\r\n        if (from && to && day >= from && day <= to) {\r\n            handleResetClick();\r\n            return;\r\n        }\r\n        if (isSelectingFirstDay(day, from, to)) {\r\n            setState({\r\n                from: day,\r\n                to: undefined,\r\n                enteredTo: undefined,\r\n            });\r\n        } else {\r\n            setState(s => ({\r\n                ...s,\r\n                to: day,\r\n                enteredTo: day,\r\n            }));\r\n        }\r\n    }\r\n\r\n    const handleResetClick = () => {\r\n        setState(defaultDate);\r\n    }\r\n\r\n    const selected = [state.from, { from: state.from, to: state.enteredTo }];\r\n\r\n    const disabled = {\r\n        before: new Date(Date.now())\r\n    }\r\n\r\n    const modifiers = {\r\n        start: state.from,\r\n        end: state.enteredTo,\r\n    }\r\n\r\n    const modifierStyles = {\r\n        start: {\r\n            backgroundColor: '#19456b',\r\n        },\r\n        end: {\r\n            backgroundColor: '#19456b',\r\n        },\r\n        disable: {\r\n            backgroundColor: '#ffffff',\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Box style={{ backdropFilter: \"blur(5px)\" }} alignSelf=\"stretch\">\r\n            <Flex alignItems=\"stretch\" flexDir=\"column\">\r\n                <DayPicker\r\n                    modifiersStyles={modifierStyles}\r\n                    numberOfMonths={2}\r\n                    fromMonth={state.from}\r\n                    modifiers={modifiers as any}\r\n                    onDayClick={handleDayClick}\r\n                    disabledDays={disabled}\r\n                    onDayMouseEnter={handleDayMouseEnter}\r\n                    selectedDays={selected as any}>\r\n                </DayPicker>\r\n            </Flex>\r\n            <Flex justifyContent=\"center\" alignItems=\"center\">\r\n                {!state.from && !state.to && 'Please select the first day.'}\r\n                {state.from && !state.to && 'Please select the last day.'}\r\n                {state.from &&\r\n                    state.to &&\r\n                    `Selected from ${state.from.toLocaleDateString()} to\r\n                ${state.to.toLocaleDateString()}`}{' '}\r\n                {state.from && state.to && (\r\n                    <Button onClick={handleResetClick}>\r\n                        Reset\r\n                    </Button>\r\n                )}\r\n            </Flex>\r\n        </Box>\r\n    )\r\n}\r\n\r\nexport default PickRangeDay;","E:\\Repos\\hostel-chakra\\Hostel\\src\\Components\\NavComponents\\PopDetail.tsx",["190","191"],"import { Box, Flex, VStack, Text, Spacer, Square, Button, StackDivider } from '@chakra-ui/react';\r\nimport React from 'react';\r\n\r\ntype PopDetailState = {\r\n    adult: number;\r\n    children: number;\r\n    bedRoom: number;\r\n}\r\n\r\ninterface PopDetailProps extends PopDetailState {\r\n    updatePeople: (adult: number, children: number, room: number) => void;\r\n}\r\n\r\nconst PopDetail: React.FC<PopDetailProps> = ({ adult, children, bedRoom, updatePeople }) => {\r\n    return (\r\n        <div>\r\n            <Box p=\"4\" style={{ backdropFilter: \"blur(5px)\" }}>\r\n                <VStack align=\"stretch\" spacing={4}>\r\n                    <Flex alignItems=\"center\">\r\n                        <Text mr=\"auto\" fontSize=\"md\">Adult</Text>\r\n                        <Square border=\"1px\" borderColor=\"yellow.400\">\r\n                            <Button variant=\"ghost\" borderRadius=\"0\" disabled={adult <= 1 ? true : false}\r\n                                onClick={() => updatePeople(--adult, children, bedRoom)}>-</Button>\r\n                        </Square>\r\n                        <Text mx=\"4\" fontSize=\"md\">{adult}</Text>\r\n                        <Square border=\"1px\" borderColor=\"yellow.400\">\r\n                            <Button variant=\"ghost\" borderRadius=\"0\"\r\n                                onClick={() => updatePeople(++adult, children, bedRoom)}>+</Button>\r\n                        </Square>\r\n                    </Flex>\r\n                    <Flex alignItems=\"center\">\r\n                        <Text mr=\"auto\" fontSize=\"md\">Children</Text>\r\n                        <Square border=\"1px\" borderColor=\"yellow.400\">\r\n                            <Button variant=\"ghost\" borderRadius=\"0\" disabled={children <= 0 ? true : false}\r\n                                onClick={() => updatePeople(adult, --children, bedRoom)}>-</Button>\r\n                        </Square>\r\n                        <Text mx=\"4\" fontSize=\"md\">{children}</Text>\r\n                        <Square border=\"1px\" borderColor=\"yellow.400\">\r\n                            <Button variant=\"ghost\" borderRadius=\"0\"\r\n                                onClick={() => updatePeople(adult, ++children, bedRoom)}>+</Button>\r\n                        </Square>\r\n                    </Flex>\r\n                    <Flex alignItems=\"center\">\r\n                        <Text mr=\"auto\" fontSize=\"md\">Room</Text>\r\n                        <Square border=\"1px\" borderColor=\"yellow.400\">\r\n                            <Button variant=\"ghost\" borderRadius=\"0\" disabled={bedRoom <= 1 ? true : false}\r\n                                onClick={() => updatePeople(adult, children, --bedRoom)}>-</Button>\r\n                        </Square>\r\n                        <Text mx=\"4\" fontSize=\"md\">{bedRoom}</Text>\r\n                        <Square border=\"1px\" borderColor=\"yellow.400\">\r\n                            <Button variant=\"ghost\" borderRadius=\"0\"\r\n                                onClick={() => updatePeople(adult, children, ++bedRoom)}>+</Button>\r\n                        </Square>\r\n                    </Flex>\r\n                </VStack>\r\n            </Box>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default PopDetail;","E:\\Repos\\hostel-chakra\\Hostel\\src\\Components\\FilterComponents\\RoomCard.tsx",["192"],"import { Badge, Box, Image } from '@chakra-ui/react';\r\nimport React from 'react';\r\nimport { BsStar, BsStarFill } from 'react-icons/bs';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst defaultRoom: RoomCardType = {\r\n    id: \"random-id-12321\",\r\n    name: \"Crystal palace\",\r\n    thumbnailUrl: \"https://bit.ly/2Z4KKcF\",\r\n    thumbnailAlt: \"rear view house with pool\",\r\n    description: \"Best place in town\",\r\n    location: \"Dark side, the moon\",\r\n    totalReview: 4,\r\n    totalStar: 23,\r\n    formattedPrice: \"2021.00$\",\r\n    services: [\"Pet\", \"Kitchen\", \"Breakfast\", \"Wifi\"]\r\n}\r\n\r\ntype RoomCardProps = {\r\n    room: RoomCardType;\r\n}\r\n\r\nconst RoomCard: React.FC<RoomCardProps> = ({ room, children }) => {\r\n    return (\r\n        <Link to={\"/rooms/\" + room.id}>\r\n            <Box overflow=\"hidden\" borderWidth=\"1px\" borderRadius=\"lg\">\r\n                <Image src={room.thumbnailUrl} alt={room.thumbnailAlt} />\r\n                <Box p=\"4\">\r\n                    <Box d=\"flex\" alignItems=\"baseline\">\r\n                        <Badge borderRadius=\"full\" px=\"2\" colorScheme=\"teal\">\r\n                            New\r\n                        </Badge>\r\n                        {room.services.map((s, key) => {\r\n                            return (\r\n                                <Box\r\n                                    key={key}\r\n                                    color=\"gray.500\"\r\n                                    fontWeight=\"semibold\"\r\n                                    letterSpacing=\"wide\"\r\n                                    fontSize=\"xs\"\r\n                                    textTransform=\"uppercase\"\r\n                                    ml=\"2\"\r\n                                    isTruncated\r\n                                >{s} {room.services[room.services.length - 1] !== s && <>&bull;</>} </Box>\r\n                            )\r\n                        })}\r\n                    </Box>\r\n\r\n                    <Box\r\n                        mt=\"1\"\r\n                        fontWeight=\"semibold\"\r\n                        as=\"h4\"\r\n                        lineHeight=\"tight\"\r\n                        isTruncated\r\n                    >\r\n                        {room.name}\r\n                    </Box>\r\n                    <Box\r\n                        as=\"h3\"\r\n                        lineHeight=\"tight\"\r\n                        isTruncated\r\n                    >\r\n                        {room.description}\r\n                    </Box>\r\n                    <Box d='flex' justifyContent=\"space-between\">\r\n                        <Box as=\"h4\" fontSize=\"3xl\">\r\n                            {room.formattedPrice}\r\n                        </Box>\r\n\r\n                        <Box d=\"flex\" alignItems=\"center\">\r\n                            {Array(5).fill(\"\").map((_, i) => {\r\n                                return (i < room.totalReview - 1 ? <BsStarFill key={i} colorRendering=\"teal.400\" /> : <BsStar key={i} />)\r\n                            })}\r\n                        </Box>\r\n                    </Box>\r\n                </Box>\r\n            </Box>\r\n        </Link>\r\n    )\r\n}\r\n\r\nexport default RoomCard;","E:\\Repos\\hostel-chakra\\Hostel\\src\\Components\\NavComponents\\Footer.tsx",[],"E:\\Repos\\hostel-chakra\\Hostel\\src\\Components\\SingleRoomComponents\\MyRoomBadge.tsx",["193"],"import { Box, Icon, HStack, VStack, Center } from '@chakra-ui/react'\r\nimport React from 'react'\r\nimport { IconType } from 'react-icons'\r\nimport { RiStarLine, RiUserStarLine } from \"react-icons/ri\";\r\n\r\ntype MyRoomBadgeProps = {\r\n    id: string;\r\n}\r\n\r\nconst MyRoomBadge: React.FC<MyRoomBadgeProps> = ({ id }) => {\r\n    const [icon, setIcon] = React.useState<IconType>();\r\n    const [badge, setBadge] = React.useState<RoomBadge>();\r\n\r\n    React.useEffect(() => {\r\n        let foundBadge = defaultRoomBadges.find(b => b.id === id);\r\n        setBadge(foundBadge);\r\n        switch (id) {\r\n            case \"1\":\r\n                setIcon(RiUserStarLine);\r\n                break;\r\n\r\n            default:\r\n                setIcon(RiStarLine);\r\n                break;\r\n        }\r\n    }, [id])\r\n\r\n    return (\r\n        <HStack alignContent=\"center\" spacing=\"0\" mb=\"2\">\r\n            <Icon d=\"flex\" boxSize=\"10\" alignItems=\"center\" justifyContent=\"center\" mt=\"2\" ml=\"2\">{icon}</Icon>\r\n            <VStack alignItems=\"start\" spacing=\"0\">\r\n                <Box as=\"h4\" fontSize=\"md\" fontWeight=\"semibold\">{badge?.title}</Box>\r\n                <Box as=\"h5\" fontSize=\"sm\" m=\"0\">{badge?.description}</Box>\r\n            </VStack>\r\n        </HStack>\r\n    )\r\n}\r\n\r\nexport const defaultRoomBadges: RoomBadge[] = [\r\n    {\r\n        id: \"1\",\r\n        title: \"Helpful owner\",\r\n        description: \"Owner provides best services\"\r\n    },\r\n    {\r\n        id: \"2\",\r\n        title: \"Extra clean\",\r\n        description: \"Owner follows our strict policies of enhanced clealiness\"\r\n    },\r\n    {\r\n        id: \"3\",\r\n        title: \"Not smoking\",\r\n        description: \"Owner does not allow smoking inside\"\r\n    },\r\n    {\r\n        id: \"4\",\r\n        title: \"Free cancelation\",\r\n        description: \"You can cancel with full refund in 24 hours\"\r\n    }\r\n]\r\n\r\nexport default MyRoomBadge;","E:\\Repos\\hostel-chakra\\Hostel\\src\\Components\\Authentication.tsx",["194","195","196","197"],"import { Box, Button, Collapse, FormControl, HStack, Input, InputGroup, PinInput, PinInputField, Select, VStack } from '@chakra-ui/react';\r\nimport { stat } from 'fs';\r\nimport React from 'react'\r\nimport { FaArrowRight } from 'react-icons/fa';\r\n\r\ntype ActionType =\r\n    | { type: \"ChangeInput\"; country?: string; phone?: string }\r\n    | { type: \"RegisterPhone\" }\r\n    | { type: \"CheckPincode\" }\r\n    | { type: \"RegisterDetail\"; name: string; email: string; password: string }\r\n    | { type: \"SetLoading\"; isLoading: boolean }\r\n    | { type: \"ResetForm\"; }\r\n\r\n\r\ntype FormState = {\r\n    country?: string;\r\n    phone?: string;\r\n    name?: string;\r\n    pincode?: string;\r\n    email?: string;\r\n    password?: string;\r\n}\r\n\r\ntype AuthenticationState = {\r\n    form?: FormState;\r\n    show: \"none\" | \"pin\" | \"detail\"\r\n    isLoading?: boolean;\r\n}\r\n\r\nconst reducer = (state: AuthenticationState, action: ActionType): AuthenticationState => {\r\n    switch (action.type) {\r\n        case \"ChangeInput\":\r\n            return {\r\n                ...state,\r\n                form: {\r\n                    ...state.form,\r\n                    country: action.country,\r\n                    phone: action.phone\r\n                }\r\n            }\r\n        case 'RegisterPhone':\r\n            return {\r\n                ...state,\r\n                show: 'pin',\r\n                isLoading: true,\r\n            }\r\n        case 'CheckPincode':\r\n            return {\r\n                ...state,\r\n                show: 'detail',\r\n                isLoading: true\r\n            }\r\n        case 'RegisterDetail':\r\n            return {\r\n                ...state,\r\n            }\r\n        case \"SetLoading\":\r\n            return {\r\n                ...state,\r\n                isLoading: action.isLoading,\r\n            }\r\n        case \"ResetForm\":\r\n            return initialState;\r\n\r\n        default:\r\n            return {\r\n                ...state,\r\n            }\r\n    }\r\n}\r\n\r\nconst getRandomInt = (min: number, max: number) => {\r\n    min = Math.ceil(min);\r\n    max = Math.floor(max);\r\n    return Math.floor(Math.random() * (max - min) + min);\r\n}\r\n\r\nconst fetchPincode = async (phone: number) => {\r\n    setTimeout(() => {\r\n        return getRandomInt(1000, 9999);\r\n    }, 1000);\r\n}\r\n\r\nconst CheckPin = (pin: string) => {\r\n    return new Promise<boolean>((resolve, reject) => {\r\n        if (pin.length === 4)\r\n            setTimeout(() => { resolve(true) }, 1000);\r\n        else\r\n            setTimeout(() => { reject(\"Pin not correct\") }, 1000);\r\n    })\r\n}\r\n\r\nconst initialState: AuthenticationState = {\r\n    form: {},\r\n    isLoading: false,\r\n    show: \"none\"\r\n}\r\n\r\nconst Authentication: React.FC = ({ }) => {\r\n    const [countries, setCountries] = React.useState<string[]>();\r\n    const [state, dispatch] = React.useReducer(reducer, initialState);\r\n\r\n    // fetching countries\r\n    React.useEffect(() => {\r\n        setCountries(defaultCountries);\r\n    }, [])\r\n\r\n    const handleRegisterButton = async (pin?: string) => {\r\n        if (state.show === \"none\") {\r\n            dispatch({ type: 'RegisterPhone' })\r\n            // send to api server\r\n            setTimeout(() => {\r\n                dispatch({ type: 'SetLoading', isLoading: false })\r\n            }, 1000)\r\n        }\r\n\r\n        else if (state.show === \"pin\" && pin !== undefined) {\r\n            dispatch({ type: 'SetLoading', isLoading: true })\r\n            CheckPin(pin).then(res => {\r\n                if (res === true) {\r\n                    console.log(\"Pincode correct\");\r\n                    dispatch({ type: 'CheckPincode' })\r\n                }\r\n                else {\r\n                    console.log(\"Pincode not correct\");\r\n                }\r\n            }).catch((r) => {\r\n                console.log(r);\r\n            }).finally(() => {\r\n                dispatch({ type: 'SetLoading', isLoading: false })\r\n            })\r\n        }\r\n    }\r\n\r\n    return (\r\n        <FormControl d=\"flex\" flexDir=\"column\">\r\n            <Select borderBottomRadius=\"0\" isDisabled={state.show !== \"none\"} onChange={(e) => dispatch({ type: 'ChangeInput', country: e.target.value, phone: state.form?.phone })} size=\"lg\" isRequired placeholder=\"Choose your country\">\r\n                {countries?.map((c, index) => {\r\n                    return <option value={c} key={index}>{c}</option>\r\n                })}\r\n            </Select>\r\n            <Input borderTopRadius=\"0\" placeholder=\"Phone number\" isDisabled={state.show !== \"none\"} size=\"lg\" value={state.form?.phone} onChange={(e) => dispatch({ type: 'ChangeInput', phone: e.target.value, country: state.form?.country })} />\r\n\r\n            <Collapse in={state.show === \"pin\"}>\r\n                <VStack spacing=\"1\" my=\"2\">\r\n                    <Box as=\"h2\"> We've sent you a verification code</Box>\r\n                    <HStack>\r\n                        <PinInput value={state.form?.pincode} isDisabled={state.isLoading} onComplete={(value) => handleRegisterButton(value)}>\r\n                            <PinInputField />\r\n                            <PinInputField />\r\n                            <PinInputField />\r\n                            <PinInputField />\r\n                        </PinInput>\r\n                    </HStack>\r\n                </VStack>\r\n            </Collapse>\r\n\r\n            <Collapse in={state.show === \"detail\"}>\r\n                <Box my=\"2\">\r\n                    <Input borderBottomRadius=\"0\" size=\"lg\" placeholder=\"Your name\" />\r\n                    <Input borderRadius=\"0\" size=\"lg\" placeholder=\"Email address\" />\r\n                    <Input borderTopRadius=\"0\" size=\"lg\" placeholder=\"Password\" />\r\n                </Box>\r\n            </Collapse>\r\n\r\n            <Button my=\"3\" w=\"30%\" rounded=\"full\" type=\"submit\" alignSelf=\"center\" isLoading={state.isLoading}\r\n                isDisabled={((state.form?.phone !== undefined && state.form?.phone !== \"\")\r\n                    && (state.form?.country != null && state.form?.country !== \"\")) ? false : true}\r\n                title=\"Next step\" onClick={() => handleRegisterButton()}\r\n            >\r\n                <FaArrowRight />\r\n            </Button>\r\n            {/* <Button alignSelf=\"flex-end\" variant=\"ghost\" colorScheme=\"red\" onClick={() => dispatch({ type: \"ResetForm\" })}>Reset</Button> */}\r\n\r\n        </FormControl>\r\n    )\r\n}\r\n\r\nconst defaultCountries: string[] = [\r\n    \"Russia\", \"Vietnam\"\r\n]\r\n\r\nexport default Authentication;","e:\\Repos\\hostel-chakra\\Hostel\\src\\index.tsx",[],"e:\\Repos\\hostel-chakra\\Hostel\\src\\reportWebVitals.ts",[],"e:\\Repos\\hostel-chakra\\Hostel\\src\\serviceWorker.ts",[],"e:\\Repos\\hostel-chakra\\Hostel\\src\\App.tsx",["198"],"e:\\Repos\\hostel-chakra\\Hostel\\src\\Pages\\HomePage.tsx",["199"],"e:\\Repos\\hostel-chakra\\Hostel\\src\\Pages\\SingleRoom.tsx",["200","201","202","203","204"],"e:\\Repos\\hostel-chakra\\Hostel\\src\\Pages\\RoomsPage.tsx",[],"e:\\Repos\\hostel-chakra\\Hostel\\src\\Pages\\ErrorPage.tsx",[],"e:\\Repos\\hostel-chakra\\Hostel\\src\\Components\\NavComponents\\Footer.tsx",[],"e:\\Repos\\hostel-chakra\\Hostel\\src\\Components\\NavComponents\\SearchBar.tsx",[],"e:\\Repos\\hostel-chakra\\Hostel\\src\\Components\\NavComponents\\PickRangeDay.tsx",["205"],"e:\\Repos\\hostel-chakra\\Hostel\\src\\Components\\NavComponents\\Navbar.tsx",[],"e:\\Repos\\hostel-chakra\\Hostel\\src\\Components\\NavComponents\\PopDetail.tsx",["206","207"],"e:\\Repos\\hostel-chakra\\Hostel\\src\\Components\\HomeComponents\\PropertyTypeList.tsx",["208","209","210"],"e:\\Repos\\hostel-chakra\\Hostel\\src\\Components\\SingleRoomComponents\\MyRoomBadge.tsx",["211"],"e:\\Repos\\hostel-chakra\\Hostel\\src\\Components\\FilterComponents\\RoomCardList.tsx",[],"e:\\Repos\\hostel-chakra\\Hostel\\src\\Logo.tsx",[],"e:\\Repos\\hostel-chakra\\Hostel\\src\\ColorModeSwitcher.tsx",[],"e:\\Repos\\hostel-chakra\\Hostel\\src\\Components\\Authentication.tsx",[],"e:\\Repos\\hostel-chakra\\Hostel\\src\\Components\\FilterComponents\\RoomCard.tsx",["212"],{"ruleId":"213","replacedBy":"214"},{"ruleId":"215","replacedBy":"216"},{"ruleId":"217","severity":1,"message":"218","line":7,"column":37,"nodeType":"219","messageId":"220","endLine":7,"endColumn":50},{"ruleId":"217","severity":1,"message":"221","line":13,"column":10,"nodeType":"219","messageId":"220","endLine":13,"endColumn":14},{"ruleId":"217","severity":1,"message":"222","line":2,"column":10,"nodeType":"219","messageId":"220","endLine":2,"endColumn":18},{"ruleId":"217","severity":1,"message":"223","line":9,"column":8,"nodeType":"219","messageId":"220","endLine":9,"endColumn":17},{"ruleId":"217","severity":1,"message":"224","line":22,"column":6,"nodeType":"219","messageId":"220","endLine":22,"endColumn":21},{"ruleId":"217","severity":1,"message":"225","line":41,"column":7,"nodeType":"219","messageId":"220","endLine":41,"endColumn":18},{"ruleId":"217","severity":1,"message":"226","line":45,"column":13,"nodeType":"219","messageId":"220","endLine":45,"endColumn":17},{"ruleId":"217","severity":1,"message":"227","line":4,"column":15,"nodeType":"219","messageId":"220","endLine":4,"endColumn":23},{"ruleId":"217","severity":1,"message":"228","line":1,"column":15,"nodeType":"219","messageId":"220","endLine":1,"endColumn":19},{"ruleId":"217","severity":1,"message":"229","line":1,"column":21,"nodeType":"219","messageId":"220","endLine":1,"endColumn":25},{"ruleId":"217","severity":1,"message":"230","line":1,"column":47,"nodeType":"219","messageId":"220","endLine":1,"endColumn":53},{"ruleId":"217","severity":1,"message":"231","line":7,"column":10,"nodeType":"219","messageId":"220","endLine":7,"endColumn":17},{"ruleId":"217","severity":1,"message":"232","line":1,"column":23,"nodeType":"219","messageId":"220","endLine":1,"endColumn":29},{"ruleId":"217","severity":1,"message":"233","line":2,"column":8,"nodeType":"219","messageId":"220","endLine":2,"endColumn":13},{"ruleId":"217","severity":1,"message":"232","line":1,"column":23,"nodeType":"219","messageId":"220","endLine":1,"endColumn":29},{"ruleId":"217","severity":1,"message":"230","line":1,"column":35,"nodeType":"219","messageId":"220","endLine":1,"endColumn":41},{"ruleId":"217","severity":1,"message":"234","line":1,"column":59,"nodeType":"219","messageId":"220","endLine":1,"endColumn":71},{"ruleId":"217","severity":1,"message":"235","line":6,"column":7,"nodeType":"219","messageId":"220","endLine":6,"endColumn":32},{"ruleId":"217","severity":1,"message":"232","line":1,"column":37,"nodeType":"219","messageId":"220","endLine":1,"endColumn":43},{"ruleId":"217","severity":1,"message":"236","line":1,"column":61,"nodeType":"219","messageId":"220","endLine":1,"endColumn":71},{"ruleId":"217","severity":1,"message":"237","line":2,"column":10,"nodeType":"219","messageId":"220","endLine":2,"endColumn":14},{"ruleId":"217","severity":1,"message":"238","line":78,"column":7,"nodeType":"219","messageId":"220","endLine":78,"endColumn":19},{"ruleId":"239","severity":1,"message":"240","line":99,"column":35,"nodeType":"241","messageId":"242","endLine":99,"endColumn":38},{"ruleId":"217","severity":1,"message":"221","line":13,"column":10,"nodeType":"219","messageId":"220","endLine":13,"endColumn":14},{"ruleId":"217","severity":1,"message":"227","line":4,"column":15,"nodeType":"219","messageId":"220","endLine":4,"endColumn":23},{"ruleId":"217","severity":1,"message":"222","line":2,"column":10,"nodeType":"219","messageId":"220","endLine":2,"endColumn":18},{"ruleId":"217","severity":1,"message":"223","line":9,"column":8,"nodeType":"219","messageId":"220","endLine":9,"endColumn":17},{"ruleId":"217","severity":1,"message":"224","line":22,"column":6,"nodeType":"219","messageId":"220","endLine":22,"endColumn":21},{"ruleId":"217","severity":1,"message":"225","line":41,"column":7,"nodeType":"219","messageId":"220","endLine":41,"endColumn":18},{"ruleId":"217","severity":1,"message":"226","line":45,"column":13,"nodeType":"219","messageId":"220","endLine":45,"endColumn":17},{"ruleId":"217","severity":1,"message":"232","line":1,"column":23,"nodeType":"219","messageId":"220","endLine":1,"endColumn":29},{"ruleId":"217","severity":1,"message":"230","line":1,"column":35,"nodeType":"219","messageId":"220","endLine":1,"endColumn":41},{"ruleId":"217","severity":1,"message":"234","line":1,"column":59,"nodeType":"219","messageId":"220","endLine":1,"endColumn":71},{"ruleId":"217","severity":1,"message":"228","line":1,"column":10,"nodeType":"219","messageId":"220","endLine":1,"endColumn":14},{"ruleId":"217","severity":1,"message":"229","line":1,"column":16,"nodeType":"219","messageId":"220","endLine":1,"endColumn":20},{"ruleId":"217","severity":1,"message":"230","line":1,"column":22,"nodeType":"219","messageId":"220","endLine":1,"endColumn":28},{"ruleId":"217","severity":1,"message":"232","line":1,"column":37,"nodeType":"219","messageId":"220","endLine":1,"endColumn":43},{"ruleId":"217","severity":1,"message":"235","line":6,"column":7,"nodeType":"219","messageId":"220","endLine":6,"endColumn":32},"no-native-reassign",["243"],"no-negated-in-lhs",["244"],"@typescript-eslint/no-unused-vars","'BrowserRouter' is defined but never used.","Identifier","unusedVar","'mode' is defined but never used.","'userInfo' is defined but never used.","'SearchBar' is defined but never used.","'SingleRoomProps' is defined but never used.","'GetRoomById' is assigned a value but never used.","'slug' is assigned a value but never used.","'DarkMode' is defined but never used.","'Flex' is defined but never used.","'Grid' is defined but never used.","'Spacer' is defined but never used.","'isError' is defined but never used.","'Center' is defined but never used.","'axios' is defined but never used.","'StackDivider' is defined but never used.","'defaultRoom' is assigned a value but never used.","'InputGroup' is defined but never used.","'stat' is defined but never used.","'fetchPincode' is assigned a value but never used.","no-empty-pattern","Unexpected empty object pattern.","ObjectPattern","unexpected","no-global-assign","no-unsafe-negation"]