[{"E:\\Repos\\hostel-chakra\\Hostel\\src\\index.tsx":"1","E:\\Repos\\hostel-chakra\\Hostel\\src\\reportWebVitals.ts":"2","E:\\Repos\\hostel-chakra\\Hostel\\src\\serviceWorker.ts":"3","E:\\Repos\\hostel-chakra\\Hostel\\src\\App.tsx":"4","E:\\Repos\\hostel-chakra\\Hostel\\src\\Pages\\SingleRoom.tsx":"5","E:\\Repos\\hostel-chakra\\Hostel\\src\\Pages\\ErrorPage.tsx":"6","E:\\Repos\\hostel-chakra\\Hostel\\src\\ColorModeSwitcher.tsx":"7","E:\\Repos\\hostel-chakra\\Hostel\\src\\Logo.tsx":"8","E:\\Repos\\hostel-chakra\\Hostel\\src\\Pages\\HomePage.tsx":"9","E:\\Repos\\hostel-chakra\\Hostel\\src\\Pages\\RoomsPage.tsx":"10","E:\\Repos\\hostel-chakra\\Hostel\\src\\Components\\HomeComponents\\PropertyTypeList.tsx":"11","E:\\Repos\\hostel-chakra\\Hostel\\src\\Components\\NavComponents\\SearchBar.tsx":"12","E:\\Repos\\hostel-chakra\\Hostel\\src\\Components\\NavComponents\\Navbar.tsx":"13","E:\\Repos\\hostel-chakra\\Hostel\\src\\Components\\FilterComponents\\RoomCardList.tsx":"14","E:\\Repos\\hostel-chakra\\Hostel\\src\\Components\\NavComponents\\PickRangeDay.tsx":"15","E:\\Repos\\hostel-chakra\\Hostel\\src\\Components\\NavComponents\\PopDetail.tsx":"16","E:\\Repos\\hostel-chakra\\Hostel\\src\\Components\\FilterComponents\\RoomCard.tsx":"17","E:\\Repos\\hostel-chakra\\Hostel\\src\\Components\\NavComponents\\Footer.tsx":"18","E:\\Repos\\hostel-chakra\\Hostel\\src\\Components\\SingleRoomComponents\\MyRoomBadge.tsx":"19","e:\\Repos\\hostel-chakra\\Hostel\\src\\index.tsx":"20","e:\\Repos\\hostel-chakra\\Hostel\\src\\reportWebVitals.ts":"21","e:\\Repos\\hostel-chakra\\Hostel\\src\\serviceWorker.ts":"22","e:\\Repos\\hostel-chakra\\Hostel\\src\\App.tsx":"23","e:\\Repos\\hostel-chakra\\Hostel\\src\\Pages\\HomePage.tsx":"24","e:\\Repos\\hostel-chakra\\Hostel\\src\\Pages\\SingleRoom.tsx":"25","e:\\Repos\\hostel-chakra\\Hostel\\src\\Pages\\RoomsPage.tsx":"26","e:\\Repos\\hostel-chakra\\Hostel\\src\\Pages\\ErrorPage.tsx":"27","e:\\Repos\\hostel-chakra\\Hostel\\src\\Components\\NavComponents\\Footer.tsx":"28","e:\\Repos\\hostel-chakra\\Hostel\\src\\Components\\NavComponents\\SearchBar.tsx":"29","e:\\Repos\\hostel-chakra\\Hostel\\src\\Components\\NavComponents\\PickRangeDay.tsx":"30","e:\\Repos\\hostel-chakra\\Hostel\\src\\Components\\NavComponents\\Navbar.tsx":"31","e:\\Repos\\hostel-chakra\\Hostel\\src\\Components\\NavComponents\\PopDetail.tsx":"32","e:\\Repos\\hostel-chakra\\Hostel\\src\\Components\\HomeComponents\\PropertyTypeList.tsx":"33","e:\\Repos\\hostel-chakra\\Hostel\\src\\Components\\SingleRoomComponents\\MyRoomBadge.tsx":"34","e:\\Repos\\hostel-chakra\\Hostel\\src\\Components\\FilterComponents\\RoomCardList.tsx":"35","e:\\Repos\\hostel-chakra\\Hostel\\src\\Logo.tsx":"36","e:\\Repos\\hostel-chakra\\Hostel\\src\\ColorModeSwitcher.tsx":"37","e:\\Repos\\hostel-chakra\\Hostel\\src\\Components\\FilterComponents\\RoomCard.tsx":"38","E:\\Repos\\hostel-chakra\\Hostel\\src\\Components\\LoginButton.tsx":"39","E:\\Repos\\hostel-chakra\\Hostel\\src\\Components\\RegisterButton.tsx":"40","E:\\Repos\\hostel-chakra\\Hostel\\src\\Components\\RegisterForm.tsx":"41","E:\\Repos\\hostel-chakra\\Hostel\\src\\Contexts\\AuthContext.tsx":"42","E:\\Repos\\hostel-chakra\\Hostel\\src\\Components\\LoginForm.tsx":"43","E:\\Repos\\hostel-chakra\\Hostel\\src\\Pages\\ProfilePage.tsx":"44","E:\\Repos\\hostel-chakra\\Hostel\\src\\Pages\\PublishRoomPage.tsx":"45","E:\\Repos\\hostel-chakra\\Hostel\\src\\API.ts":"46","E:\\Repos\\hostel-chakra\\Hostel\\src\\Pages\\PreviewRoomPage.tsx":"47"},{"size":345,"mtime":1617925710355,"results":"48","hashOfConfig":"49"},{"size":431,"mtime":1612286281167,"results":"50","hashOfConfig":"49"},{"size":5404,"mtime":1612286281167,"results":"51","hashOfConfig":"49"},{"size":4778,"mtime":1619181320828,"results":"52","hashOfConfig":"49"},{"size":17130,"mtime":1619562805322,"results":"53","hashOfConfig":"49"},{"size":362,"mtime":1619132826180,"results":"54","hashOfConfig":"49"},{"size":773,"mtime":1612286281164,"results":"55","hashOfConfig":"49"},{"size":614,"mtime":1612286281165,"results":"56","hashOfConfig":"49"},{"size":1655,"mtime":1618443060587,"results":"57","hashOfConfig":"49"},{"size":1063,"mtime":1618783766682,"results":"58","hashOfConfig":"49"},{"size":2908,"mtime":1618233155121,"results":"59","hashOfConfig":"49"},{"size":4726,"mtime":1619180940009,"results":"60","hashOfConfig":"49"},{"size":3316,"mtime":1618864211233,"results":"61","hashOfConfig":"49"},{"size":1841,"mtime":1619133768837,"results":"62","hashOfConfig":"49"},{"size":7063,"mtime":1618831357526,"results":"63","hashOfConfig":"49"},{"size":3126,"mtime":1613423216595,"results":"64","hashOfConfig":"49"},{"size":3169,"mtime":1619002847011,"results":"65","hashOfConfig":"49"},{"size":749,"mtime":1618864238639,"results":"66","hashOfConfig":"49"},{"size":1847,"mtime":1613599095669,"results":"67","hashOfConfig":"49"},{"size":862,"mtime":1612286281166,"results":"68","hashOfConfig":"69"},{"size":431,"mtime":1612286281167,"results":"70","hashOfConfig":"69"},{"size":5404,"mtime":1612286281167,"results":"71","hashOfConfig":"69"},{"size":1405,"mtime":1613435563432,"results":"72","hashOfConfig":"69"},{"size":1187,"mtime":1613423994602,"results":"73","hashOfConfig":"69"},{"size":11934,"mtime":1613608974661,"results":"74","hashOfConfig":"69"},{"size":826,"mtime":1613605467202,"results":"75","hashOfConfig":"69"},{"size":173,"mtime":1612286281165,"results":"76","hashOfConfig":"69"},{"size":690,"mtime":1613435526288,"results":"77","hashOfConfig":"69"},{"size":3214,"mtime":1613608551630,"results":"78","hashOfConfig":"69"},{"size":3977,"mtime":1613608465743,"results":"79","hashOfConfig":"69"},{"size":1768,"mtime":1613606848363,"results":"80","hashOfConfig":"69"},{"size":3126,"mtime":1613423216595,"results":"81","hashOfConfig":"69"},{"size":1475,"mtime":1613423216593,"results":"82","hashOfConfig":"69"},{"size":1847,"mtime":1613599095669,"results":"83","hashOfConfig":"69"},{"size":1318,"mtime":1613606682010,"results":"84","hashOfConfig":"69"},{"size":614,"mtime":1612286281165,"results":"85","hashOfConfig":"69"},{"size":773,"mtime":1612286281164,"results":"86","hashOfConfig":"69"},{"size":3020,"mtime":1613608660633,"results":"87","hashOfConfig":"69"},{"size":1137,"mtime":1616102915010,"results":"88","hashOfConfig":"49"},{"size":997,"mtime":1616100395255,"results":"89","hashOfConfig":"49"},{"size":6298,"mtime":1616103124415,"results":"90","hashOfConfig":"49"},{"size":3395,"mtime":1619003381432,"results":"91","hashOfConfig":"49"},{"size":3582,"mtime":1619129846289,"results":"92","hashOfConfig":"49"},{"size":4216,"mtime":1618446869702,"results":"93","hashOfConfig":"49"},{"size":17024,"mtime":1619566200989,"results":"94","hashOfConfig":"49"},{"size":2898,"mtime":1619565811796,"results":"95","hashOfConfig":"49"},{"size":553,"mtime":1619174350149,"results":"96","hashOfConfig":"49"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"99"},"13hiuhw",{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"107","usedDeprecatedRules":"99"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"110","usedDeprecatedRules":"99"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"99"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"99"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"99"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"99"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"99"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"123","usedDeprecatedRules":"99"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"126","usedDeprecatedRules":"99"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"99"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"131","usedDeprecatedRules":"99"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"134","usedDeprecatedRules":"99"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"137","usedDeprecatedRules":"99"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"140","usedDeprecatedRules":"99"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"99"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"145","usedDeprecatedRules":"99"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"99iabf",{"filePath":"148","messages":"149","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"150","messages":"151","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"152","messages":"153","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"154","messages":"155","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"156","messages":"157","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"158","messages":"159","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"160","messages":"161","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"162","messages":"163","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"164","messages":"165","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"166","messages":"167","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"168","messages":"169","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"170","messages":"171","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"172","messages":"173","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"174","messages":"175","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"176","messages":"177","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"178","messages":"179","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"180","messages":"181","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"182","messages":"183","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"184","messages":"185","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"186","usedDeprecatedRules":"99"},{"filePath":"187","messages":"188","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"99"},{"filePath":"189","messages":"190","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"191","usedDeprecatedRules":"99"},{"filePath":"192","messages":"193","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"194","usedDeprecatedRules":"99"},{"filePath":"195","messages":"196","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"197","usedDeprecatedRules":"99"},{"filePath":"198","messages":"199","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"200","usedDeprecatedRules":"99"},{"filePath":"201","messages":"202","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"203","messages":"204","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"205","messages":"206","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"99"},"E:\\Repos\\hostel-chakra\\Hostel\\src\\index.tsx",[],["207","208"],"E:\\Repos\\hostel-chakra\\Hostel\\src\\reportWebVitals.ts",[],["209","210"],"E:\\Repos\\hostel-chakra\\Hostel\\src\\serviceWorker.ts",[],"E:\\Repos\\hostel-chakra\\Hostel\\src\\App.tsx",["211","212","213"],"import * as React from \"react\"\r\nimport {\r\n  ChakraProvider,\r\n  Box,\r\n  extendTheme,\r\n} from \"@chakra-ui/react\"\r\nimport { HashRouter, Route, Switch, BrowserRouter, Redirect, RouteProps, useLocation, useHistory } from 'react-router-dom'\r\nimport HomePage from \"./Pages/HomePage\";\r\nimport SingleRoom from \"./Pages/SingleRoom\";\r\nimport ErrorPage from \"./Pages/ErrorPage\";\r\nimport RoomsPage from \"./Pages/RoomsPage\";\r\nimport \"./App.css\";\r\nimport { mode } from \"@chakra-ui/theme-tools\";\r\nimport \"slick-carousel/slick/slick.css\";\r\nimport \"slick-carousel/slick/slick-theme.css\";\r\nimport Footer from \"./Components/NavComponents/Footer\";\r\nimport { QueryClient, QueryClientProvider } from \"react-query\";\r\nimport { AuthContext, AuthProvider } from \"./Contexts/AuthContext\";\r\nimport ProfilePage from \"./Pages/ProfilePage\";\r\nimport Navbar from \"./Components/NavComponents/Navbar\";\r\nimport PublishRoomPage from \"./Pages/PublishRoomPage\";\r\nimport LoginForm from \"./Components/LoginForm\";\r\nimport LoadingBar from \"react-top-loading-bar\";\r\nimport axios from \"axios\";\r\nimport PreviewRoomPage from \"./Pages/PreviewRoomPage\";\r\n// theme.components.Button.baseStyle.borderRadius = \"0\";\r\n\r\nconst myTheme = extendTheme({\r\n  components: {\r\n    Button: {\r\n      defaultProps: {\r\n      }\r\n    },\r\n  }\r\n})\r\n\r\nconst queryClient = new QueryClient();\r\n\r\n\r\nexport const App = () => {\r\n  const loadingRef = React.useRef<any>(null);\r\n  // loading bar will appear when a request is sended\r\n  // and disappear when get a response\r\n  // REMINDER: this is a fastest way to indicate top loading bar,\r\n  // but not in a very elegant way, should put it in a context and update manually in component\r\n  React.useEffect(() => {\r\n    loadingRef.current.complete();\r\n\r\n    axios.interceptors.request.use((config) => {\r\n      loadingRef.current.staticStart();\r\n      return config;\r\n    }, (e) => {\r\n      loadingRef.current.complete();\r\n      return Promise.reject(e);\r\n    })\r\n\r\n    axios.interceptors.response.use((config) => {\r\n      loadingRef.current.complete();\r\n      return config;\r\n    }, (e) => {\r\n      loadingRef.current.complete();\r\n      return Promise.reject(e);\r\n    })\r\n\r\n  }, [])\r\n\r\n  return (\r\n    <HashRouter basename=\"/\">\r\n      <ChakraProvider theme={myTheme}>\r\n        <QueryClientProvider client={queryClient}>\r\n          <Box d=\"flex\" flexDir=\"column\" minH=\"100vh\">\r\n            <AuthProvider>\r\n              <ScrollToTop />\r\n              <Box flex=\"1\">\r\n                <LoadingBar color=\"#f11946\" ref={loadingRef}></LoadingBar>\r\n                <Switch>\r\n                  <Route exact path=\"/\" >\r\n                    <HomePage />\r\n                  </Route>\r\n\r\n                  <Route component={LoginPage} exact path=\"/login\"\r\n                    render={({ location }) =>\r\n                      <Redirect to={{ pathname: \"/login\", state: { from: location } }} />\r\n                    }\r\n                  />\r\n                  <Box mx=\"10%\" mt=\"5\">\r\n                    <Navbar></Navbar>\r\n                    <Route exact path=\"/rooms/:slug\" component={SingleRoom} />\r\n                    <Route exact path=\"/rooms\" component={RoomsPage} />\r\n                    <Route exact path=\"/room/preview\" component={PreviewRoomPage} />\r\n                    <AuthRoute exact path=\"/profile\" component={ProfilePage}></AuthRoute>\r\n                    <AuthRoute exact path=\"/user/publish\" component={PublishRoomPage}></AuthRoute>\r\n                  </Box>\r\n                  <Route component={ErrorPage} />\r\n                </Switch>\r\n              </Box>\r\n            </AuthProvider>\r\n            <Box h=\"200px\"></Box>\r\n            {/* <Box position=\"relative\" left={0} bottom={0}> */}\r\n            <Footer as=\"footer\" />\r\n            {/* </Box> */}\r\n          </Box>\r\n\r\n        </QueryClientProvider>\r\n      </ChakraProvider>\r\n    </HashRouter>\r\n  )\r\n};\r\n\r\ninterface LocationState {\r\n  from: {\r\n    pathname: string;\r\n  };\r\n}\r\n\r\nconst LoginPage = () => {\r\n  const location = useLocation<LocationState>();\r\n  const auth = React.useContext(AuthContext);\r\n\r\n  let { from } = location.state || { from: { pathname: \"/\" } };\r\n  if (auth.user) return <Redirect to={from}></Redirect>\r\n\r\n  return (\r\n    <Box mx=\"20%\" mt=\"10\" flex=\"0\">\r\n      <Navbar />\r\n      <LoginForm></LoginForm>\r\n    </Box>\r\n  );\r\n}\r\n\r\nconst AuthRoute: React.FC<RouteProps> = ({ children, ...rest }) => {\r\n  let auth = React.useContext(AuthContext);\r\n  if (auth.user) return (<Route {...rest}>{children}</Route>)\r\n\r\n  else return (<Route {...rest}>\r\n    <Redirect to={{\r\n      pathname: \"/login\",\r\n      state: {\r\n        from: rest.path\r\n      }\r\n    }} />\r\n  </Route>)\r\n}\r\n\r\nconst ScrollToTop = () => {\r\n  const { pathname } = useLocation();\r\n  React.useEffect(() => {\r\n    window.scrollTo(0, 0);\r\n  }, [pathname])\r\n\r\n  return null;\r\n}\r\n","E:\\Repos\\hostel-chakra\\Hostel\\src\\Pages\\SingleRoom.tsx",["214","215","216","217","218","219","220","221","222","223"],"import { Box, Button, Divider, Grid, GridItem, Spacer, Image, Popover, PopoverContent, PopoverTrigger, HStack, Flex, VStack, Avatar, useToast, Spinner, Progress, useDisclosure, Collapse, Tooltip } from '@chakra-ui/react';\r\nimport { userInfo } from 'os';\r\nimport React from 'react'\r\nimport { BsStarFill, BsStar, BsHeart, BsHeartFill } from 'react-icons/bs';\r\nimport { useMutation, useQuery } from 'react-query';\r\nimport { Link, Redirect, useParams } from 'react-router-dom';\r\nimport LoadingBar from 'react-top-loading-bar';\r\nimport { fetchProperty, toggleLike } from '../API';\r\nimport Navbar from '../Components/NavComponents/Navbar';\r\nimport PickRangeDay, { getDatesBetween } from '../Components/NavComponents/PickRangeDay';\r\nimport PopDetail from '../Components/NavComponents/PopDetail';\r\nimport SearchBar from '../Components/NavComponents/SearchBar';\r\nimport MyRoomBadge, { defaultRoomBadges } from '../Components/SingleRoomComponents/MyRoomBadge';\r\nimport { AuthContext } from '../Contexts/AuthContext';\r\n\r\ntype SlugProps = {\r\n    slug: string;\r\n}\r\n\r\ntype SingleRoomProps = {\r\n    initRoom: Room;\r\n}\r\n\r\ntype OwnerInfo = {\r\n    id: string;\r\n    name: string;\r\n    profileImageUrl?: string;\r\n}\r\n\r\ntype BookingInfo = {\r\n    roomId?: string;\r\n    userId?: string;\r\n    bookFromDate?: Date;\r\n    bookToDate?: Date;\r\n    children: number;\r\n    adult: number;\r\n    roomQuant: number;\r\n}\r\n\r\nconst SingleRoom: React.FC<SingleRoomProps> = ({ initRoom, children }) => {\r\n    const auth = React.useContext(AuthContext);\r\n\r\n    const [room, setRoom] = React.useState(defaultRoom);\r\n    const [bookInfo, setBookInfo] = React.useState<BookingInfo>({ adult: 1, children: 0, roomQuant: 1 });\r\n    const [owner, setOwner] = React.useState<OwnerInfo>();\r\n    const [didLike, setDidLike] = React.useState(false);\r\n\r\n    const { slug } = useParams<SlugProps>();\r\n    const toast = useToast();\r\n\r\n    const { data, isError, error, isLoading } = useQuery([\"property\", slug],\r\n        () => {\r\n            return fetchProperty(slug);\r\n        },\r\n        {\r\n            // staleTime: 1000 * 60 * 3,\r\n            retry: 2,\r\n            onError: (error) => {\r\n                console.log(error);\r\n            },\r\n            onSuccess: (rs) => {\r\n                console.log(rs.data);\r\n                if (rs.data.liked) setDidLike(rs.data.liked);\r\n                setRoom({ ...rs.data, roomBadges: badges });\r\n            },\r\n            onSettled: () => {\r\n            }\r\n        });\r\n\r\n    const mutateLike = useMutation(toggleLike, {\r\n        onSuccess: (res) => {\r\n            setDidLike(res.data.liked);\r\n            toast({\r\n                description: res.data.liked ? \"Saved room\" : \"Removed from wishlist\",\r\n                status: \"info\",\r\n                duration: 1000\r\n            });\r\n        },\r\n        onError: (error) => console.log(error)\r\n    })\r\n\r\n    React.useEffect(() => {\r\n        setOwner(defaultOwner);\r\n    }, [])\r\n\r\n    const updateDate = (from?: Date, to?: Date) => {\r\n        setBookInfo(s => ({\r\n            ...s,\r\n            bookFromDate: from,\r\n            bookToDate: to\r\n        }));\r\n    }\r\n\r\n    const updatePeople = (adult: number, children: number, room: number) => {\r\n        setBookInfo((s) => ({\r\n            ...s,\r\n            adult: adult,\r\n            children: children,\r\n            roomQuant: room\r\n        }));\r\n    }\r\n\r\n    const handleLike = () => {\r\n        if (!auth.user) {\r\n            toast({\r\n                description: \"Login is required\",\r\n                status: \"info\",\r\n                duration: 1000\r\n            });\r\n            return;\r\n        }\r\n        console.log(auth.user.token);\r\n        mutateLike.mutate({ roomId: room.id, token: auth.user.token })\r\n    }\r\n\r\n    // if (isError) {\r\n    //     return <Box>{\"Something 's wrong\"}</Box>\r\n    // }\r\n\r\n    if (data) return (\r\n        <Box>\r\n            <Divider my=\"5\" />\r\n            {/* title */}\r\n            <Box as=\"h2\" fontSize=\"3xl\" fontWeight=\"semibold\">{room.name}</Box>\r\n\r\n            {/* rating, location, like button */}\r\n            <Box d=\"flex\" mt=\"1\" flexDir={{ base: \"column\", sm: \"row\" }}>\r\n                <Box d=\"flex\" alignItems=\"start\">\r\n                    <Box d=\"flex\" flexDir={{ base: \"column\", sm: \"row\" }}>\r\n                        <Box d=\"flex\" flexDir={{ base: \"row\" }}>\r\n                            {Array(5).fill(\"\").map((_, i) => {\r\n                                return (i < Math.round(room.totalStar / room.totalReview) ? <BsStarFill key={i} colorRendering=\"teal.400\" /> : <BsStar key={i} />)\r\n                            })}\r\n                        </Box>\r\n                        <Box as=\"span\" ml=\"2\" color=\"gray.500\">{room.totalReview} reviews</Box>\r\n                    </Box>\r\n                    <Spacer />\r\n                    <Link to=\"/\">\r\n                        <Button variant=\"link\">\r\n                            <Box mx=\"4\">&bull;</Box>\r\n                            {room.location}\r\n                        </Button>\r\n                    </Link>\r\n                </Box>\r\n\r\n                <Spacer />\r\n\r\n                <Button alignSelf=\"start\" variant=\"ghost\" size=\"sm\"\r\n                    onClick={() => handleLike()}\r\n                    leftIcon={(!didLike || !auth.user) ? <BsHeart /> : <BsHeartFill color=\"red\" />}>Like</Button>\r\n            </Box>\r\n\r\n            {/* image display */}\r\n            <Box borderRadius=\"lg\" overflow=\"hidden\" mt=\"4\">\r\n                <Grid gap=\"2\" h=\"40%\" maxH=\"450px\" objectFit=\"cover\"\r\n                    templateRows=\"repeat(2, 1fr)\"\r\n                    templateColumns=\"repeat(4, 1fr)\">\r\n                    {room.images.slice(0, 5).map((image, i) => {\r\n                        return (\r\n                            <GridItem key={i} colSpan={i === 0 ? 2 : 1} rowSpan={i === 0 ? 2 : 1} overflow=\"hidden\" >\r\n                                <Image src={image.url} h=\"auto\" height=\"100%\" w=\"100%\" objectFit=\"cover\" loading=\"lazy\"></Image>\r\n                            </GridItem>\r\n                        )\r\n                    })}\r\n                </Grid>\r\n            </Box>\r\n\r\n            {/* info  */}\r\n            <Box mt=\"4\" d={[\"flex\", \"flex\", \"flex\", \"block\"]} flexDir=\"column-reverse\">\r\n                {/* floating form */}\r\n                <Box w={[\"100%\", \"100%\", \"100%\", \"35%\"]} boxShadow=\"2xl\" mt={{ base: \"4\", lg: \"0\" }} top=\"30%\" float={{ lg: \"right\" }} position={{ lg: \"sticky\" }}\r\n                    borderRadius=\"lg\"\r\n                    display=\"inline-flex\" flexDir=\"column\" zIndex={1} borderWidth=\"thin\"\r\n                    p=\"4\" alignContent=\"center\" justifyContent=\"center\">\r\n                    <FloatingForm room={room} bookInfo={bookInfo} updateDate={updateDate} updatePeople={updatePeople} />\r\n                </Box>\r\n                {/* Detail information about this room */}\r\n                <Box height=\"1000px\" w={[\"100%\", \"100%\", \"100%\", \"60%\"]}>\r\n                    {/* name, avatar */}\r\n                    <Flex alignItems=\"center\">\r\n                        <VStack alignItems=\"start\">\r\n                            <Box as=\"h1\" fontSize=\"2xl\" fontWeight=\"semibold\" >{\"Owner: \" + owner?.name}</Box>\r\n                            <HStack>\r\n                                {room.services.map((s, i) => {\r\n                                    return (\r\n                                        <Box\r\n                                            key={i}\r\n                                            color=\"gray.500\"\r\n                                            fontWeight=\"semibold\"\r\n                                            letterSpacing=\"wide\"\r\n                                            fontSize=\"xs\"\r\n                                            textTransform=\"uppercase\"\r\n                                            ml=\"2\"\r\n                                            isTruncated\r\n                                        >{s} {room.services[room.services.length - 1] !== s && <>&bull;</>} </Box>\r\n                                    )\r\n                                })}\r\n                            </HStack>\r\n                        </VStack>\r\n\r\n                        <Spacer />\r\n                        <Avatar name={owner?.name} src={owner?.profileImageUrl}></Avatar>\r\n                    </Flex>\r\n                    <Divider my=\"3\" />\r\n\r\n                    {/* room badges */}\r\n                    {room.roomBadges?.map((b, i) => {\r\n                        return <MyRoomBadge id={b.id} key={i}></MyRoomBadge>\r\n                    })}\r\n                    <Divider my=\"3\" />\r\n\r\n                    {/* room introduction */}\r\n                    <Box as=\"h5\" fontWeight=\"semibold\" fontSize=\"2xl\">More about room</Box>\r\n                    <Box as=\"p\">{room.introduction}</Box>\r\n                    <Divider my=\"3\" />\r\n\r\n                    {/* another datepicker here */}\r\n                    <Box w=\"100%\" display={{ md: \"none\", lg: \"block\" }}>\r\n                        <PickRangeDay updateDate={updateDate}></PickRangeDay>\r\n                    </Box>\r\n                    <Divider my=\"3\" />\r\n\r\n                </Box>\r\n            </Box>\r\n        </Box>\r\n    )\r\n    return <></>\r\n}\r\n\r\ntype FloatingFormProps = {\r\n    room: Room;\r\n    bookInfo: BookingInfo;\r\n    updatePeople: (adult: number, children: number, room: number) => void;\r\n    updateDate: (from?: Date | undefined, to?: Date | undefined) => void\r\n}\r\n\r\n\r\n// TODO: Lazily fetch reservation info when pop over open\r\nconst FloatingForm: React.FC<FloatingFormProps> = ({ room, bookInfo, updateDate, updatePeople }) => {\r\n    const feeCollapse = useDisclosure();\r\n    const [nightCount, setNightCount] = React.useState<number>(0);\r\n\r\n    React.useEffect(() => {\r\n        if (bookInfo.bookFromDate && bookInfo.bookToDate) {\r\n            setNightCount(getDatesBetween(bookInfo.bookFromDate.toDateString(), bookInfo.bookToDate.toDateString()).length + 1)\r\n            return feeCollapse.onOpen();\r\n        }\r\n        return feeCollapse.onClose();\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [bookInfo.bookFromDate, bookInfo.bookToDate])\r\n\r\n    return (\r\n        <Box display=\"inline-flex\" flexDir=\"column\" alignContent=\"center\" justifyContent=\"center\">\r\n            <Flex alignItems=\"baseline\">\r\n                <Box as=\"h2\" fontFamily=\"mono\" fontSize=\"3xl\" fontWeight=\"semibold\">{room.formattedPrice + \"$ \"}\r\n                </Box>\r\n                <Box as=\"span\" color=\"gray.500\" fontStyle=\"italic\">\r\n                    / per night\r\n                </Box>\r\n                <Spacer />\r\n                <Box d=\"flex\" alignItems=\"center\">\r\n                    {Array(5).fill(\"\").map((_, i) => {\r\n                        return (i < Math.round(room.totalStar / room.totalReview) ? <BsStarFill key={i} colorRendering=\"teal.400\" /> : <BsStar key={i} />)\r\n                    })}\r\n                </Box>\r\n            </Flex>\r\n\r\n            {/* Pop over */}\r\n            <Box mt=\"4\">\r\n                <Popover closeOnBlur={true}>\r\n                    <PopoverTrigger>\r\n                        <HStack spacing=\"0\">\r\n                            <Button variant=\"outline\" borderTopLeftRadius=\"lg\"\r\n                                size=\"lg\" w=\"100%\"\r\n                                _focusVisible={{ border: \"0\" }}\r\n                                borderRadius=\"0\">\r\n                                {bookInfo?.bookFromDate?.toLocaleDateString() || \"From\"}\r\n                            </Button>\r\n                            <Button variant=\"outline\" borderTopRightRadius=\"lg\"\r\n                                size=\"lg\" w=\"100%\"\r\n                                _focusVisible={{ border: \"0\" }}\r\n                                borderRadius=\"0\">\r\n                                {bookInfo?.bookToDate?.toLocaleDateString() || \"To\"}\r\n                            </Button>\r\n                        </HStack>\r\n                    </PopoverTrigger>\r\n                    <PopoverContent flexWrap=\"nowrap\" alignItems=\"center\" w=\"550px\" borderRadius=\"0\" bg=\"inherit\" bgColor=\"rgba(66, 153, 225, 0.8)\">\r\n                        <PickRangeDay schedules={{ reservedDates: room.reservedDates, dayOff: room.daysOff }} updateDate={updateDate} />\r\n                    </PopoverContent>\r\n                </Popover>\r\n                <Popover>\r\n                    <PopoverTrigger>\r\n                        <Button variant=\"outline\" w=\"100%\" size=\"lg\" borderRadius=\"0\" borderBottomRadius=\"lg\" px=\"2\">{bookInfo.adult + ' adult(s) - ' + bookInfo.children + ' child(s) - ' + bookInfo.roomQuant + ' room(s)'}</Button>\r\n                    </PopoverTrigger>\r\n                    <PopoverContent flexWrap=\"nowrap\" borderRadius=\"0\" bg=\"inherit\" bgColor=\"rgba(66, 153, 225, 0.8)\">\r\n                        <PopDetail updatePeople={updatePeople} adult={bookInfo.adult} bedRoom={bookInfo.roomQuant} children={bookInfo.children}></PopDetail>\r\n                    </PopoverContent>\r\n                </Popover>\r\n            </Box>\r\n\r\n            <Button variant=\"solid\" colorScheme=\"green\" alignSelf=\"stretch\" mt=\"4\">Check for reservation</Button>\r\n            <Box alignSelf=\"center\" my=\"2\" fontWeight=\"thin\" fontStyle=\"oblique\">You won't be charged yet</Box>\r\n\r\n            {/* Fee details */}\r\n            <Collapse in={feeCollapse.isOpen}>\r\n                <Box fontSize=\"lg\">\r\n                    <Flex alignItems=\"baseline\">\r\n                        <Tooltip label={nightCount && `You are currently booking ${nightCount} night(s)`}\r\n                            placement=\"left\" hasArrow>\r\n                            <Box fontWeight=\"light\" textDecoration=\"underline\">{room.formattedPrice}$ x {nightCount} nights</Box>\r\n                        </Tooltip>\r\n                        <Spacer />\r\n                        <Box fontFamily=\"mono\" >{`${room.formattedPrice * nightCount}$`}</Box>\r\n                    </Flex>\r\n                    <Flex alignItems=\"baseline\">\r\n                        <Tooltip label=\"The owner keeps your place in highest cleanliness\" placement=\"left\" hasArrow>\r\n                            <Box fontWeight=\"light\" textDecoration=\"underline\">Cleaning fee</Box>\r\n                        </Tooltip>\r\n                        <Spacer />\r\n                        <Box fontFamily=\"mono\">{room.cleaningFee} $</Box>\r\n                    </Flex>\r\n                    <Flex alignItems=\"baseline\">\r\n                        <Tooltip label=\"This helps us run our platform and offer services like 24/7 support on your trip. It includes VAT.\" placement=\"left\" hasArrow>\r\n                            <Box fontWeight=\"light\" textDecoration=\"underline\">Service fee</Box>\r\n                        </Tooltip>\r\n                        <Spacer />\r\n                        <Box fontFamily=\"mono\">{room.serviceFee} $</Box>\r\n                    </Flex>\r\n                    <Divider my=\"2\" colorScheme=\"green\" variant=\"dashed\" />\r\n                    <Flex fontWeight=\"black\" fontSize=\"3xl\">\r\n                        <Box fontFamily=\"mono\">Total</Box>\r\n                        <Spacer />\r\n                        <Box fontFamily=\"mono\">{room.formattedPrice * nightCount + room.cleaningFee + room.serviceFee} $</Box>\r\n                    </Flex>\r\n                </Box>\r\n            </Collapse>\r\n        </Box>\r\n    )\r\n}\r\n\r\nconst badges: RoomBadge[] = defaultRoomBadges;\r\n\r\nconst defaultRoom: Room = {\r\n    id: \"1\",\r\n    name: \"Crystal palace\",\r\n    thumbnailUrl: \"https://bit.ly/2Z4KKcF\",\r\n    images: [\r\n        { url: \"https://picsum.photos/1100/1000\" },\r\n        { url: \"https://picsum.photos/700/1200\" },\r\n        { url: \"https://picsum.photos/1000/1000\" },\r\n        { url: \"https://picsum.photos/1200/1000\" },\r\n        { url: \"https://picsum.photos/1100/900\" }\r\n    ],\r\n    thumbnailAlt: \"rear view house with pool\",\r\n    introduction: \"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Vestibulum congue eros id ligula porta, id fermentum ligula semper. Pellentesque eget pulvinar justo. Phasellus eu risus dolor. Aliquam mollis urna vel lectus ornare, nec ultricies augue gravida. Nunc dignissim diam vel massa cursus condimentum. Nulla pharetra molestie nunc, ac hendrerit felis posuere a. Sed finibus magna ut nibh luctus, ac dapibus mauris cursus. Sed eu porttitor lacus. Nulla venenatis erat quis orci consectetur efficitur. Phasellus nisl nisl, luctus et sapien nec, dictum feugiat felis. Nam nec ullamcorper mi, eu vulputate justo. Nullam nibh ipsum, dictum at commodo nec, molestie et ipsum. Aliquam sit amet tincidunt augue, sit amet consectetur mi.\",\r\n    description: \"Best place in town\",\r\n    location: \"Dark side, the moon\",\r\n    totalReview: 4,\r\n    totalStar: 19,\r\n    formattedPrice: 2021.00,\r\n    services: [\"Pet\", \"Kitchen\", \"Breakfast\", \"Wifi\"],\r\n    roomBadges: badges,\r\n    serviceFee: 0.00,\r\n    cleaningFee: 40.00\r\n}\r\n\r\n\r\n\r\nconst defaultOwner: OwnerInfo = {\r\n    id: \"1234\",\r\n    name: \"Ivanov Ivan Ivanovich\",\r\n    profileImageUrl: \"https://scontent-arn2-1.xx.fbcdn.net/v/t1.6435-9/168934405_1649568108574870_2922711241924143290_n.jpg?_nc_cat=103&ccb=1-3&_nc_sid=09cbfe&_nc_ohc=NE0y-9oTNT4AX_6yZvA&_nc_ht=scontent-arn2-1.xx&oh=4a47294ccdbae32c261080108427acd1&oe=6096A09B\"\r\n}\r\n\r\nexport default SingleRoom;","E:\\Repos\\hostel-chakra\\Hostel\\src\\Pages\\ErrorPage.tsx",[],"E:\\Repos\\hostel-chakra\\Hostel\\src\\ColorModeSwitcher.tsx",[],"E:\\Repos\\hostel-chakra\\Hostel\\src\\Logo.tsx",[],"E:\\Repos\\hostel-chakra\\Hostel\\src\\Pages\\HomePage.tsx",[],"E:\\Repos\\hostel-chakra\\Hostel\\src\\Pages\\RoomsPage.tsx",[],"E:\\Repos\\hostel-chakra\\Hostel\\src\\Components\\HomeComponents\\PropertyTypeList.tsx",["224","225","226","227"],"import { Box, Flex, Grid, Link as ChakraLink, Spacer, VStack, Image, Tooltip } from '@chakra-ui/react';\r\nimport React from 'react';\r\nimport { Link } from \"react-router-dom\"\r\nimport Slider, { Settings } from 'react-slick';\r\nimport \"slick-carousel/slick/slick.css\";\r\nimport \"slick-carousel/slick/slick-theme.css\";\r\nimport { isError, useQuery } from 'react-query';\r\nimport { fetchPropertyTypes } from '../../API';\r\n\r\nvar settings: Settings = {\r\n    dots: true,\r\n    infinite: true,\r\n    speed: 500,\r\n    slidesToShow: 4,\r\n    slidesToScroll: 1,\r\n    initialSlide: 0,\r\n    swipeToSlide: true,\r\n    responsive: [\r\n        {\r\n            breakpoint: 1024,\r\n            settings: {\r\n                slidesToShow: 4,\r\n                slidesToScroll: 1,\r\n                infinite: true,\r\n                dots: true\r\n            }\r\n        },\r\n        {\r\n            breakpoint: 600,\r\n            settings: {\r\n                slidesToShow: 3,\r\n                slidesToScroll: 1,\r\n                initialSlide: 2\r\n            }\r\n        },\r\n        {\r\n            breakpoint: 480,\r\n            settings: {\r\n                slidesToShow: 1,\r\n                slidesToScroll: 1\r\n            }\r\n        }\r\n    ]\r\n};\r\n\r\nconst PropertyTypeList = () => {\r\n    const { data, isError } = useQuery<unknown, unknown, PropertyTypeType[]>(\"propertypeList\", fetchPropertyTypes, {\r\n        staleTime: 1000 * 60 * 10\r\n    });\r\n\r\n    if (isError) return <Box>Something's wrong</Box>\r\n    return (\r\n        <div>\r\n            <Slider {...settings}>\r\n                {data?.map((d, key) => <PropertyType type={d} key={key} />)}\r\n            </Slider>\r\n        </div>\r\n    )\r\n}\r\n\r\ntype PropertyTypeProps = {\r\n    type: PropertyTypeType;\r\n}\r\n\r\n\r\n\r\nconst PropertyType: React.FC<PropertyTypeProps> = ({ type, children }) => {\r\n    return (\r\n        <VStack alignItems=\"start\" p=\"4\">\r\n            <ChakraLink as={Link} to={'/rooms?typeId=' + type.id}>\r\n                <Tooltip hasArrow placement=\"top\" aria-label={\"tooltips\"} label={type.description} openDelay={500}>\r\n                    <Box>\r\n                        <Box maxW=\"sm\" maxH=\"sm\" minH=\"100px\">\r\n                            <Image width=\"inherit\" height=\"inherit\" src={type.thumbnailImg} objectFit=\"cover\"></Image>\r\n                        </Box>\r\n\r\n                        <Box\r\n                            mt=\"1\"\r\n                            fontWeight=\"semibold\"\r\n                            as=\"h4\"\r\n                            lineHeight=\"tight\"\r\n                            isTruncated\r\n                        >\r\n                            {type.propertyType}\r\n                        </Box>\r\n                    </Box>\r\n                </Tooltip>\r\n            </ChakraLink>\r\n            <Box color=\"gray.500\" fontSize=\"md\">\r\n                {type.count + \" \" + type.propertyType + \"\"}\r\n            </Box>\r\n        </VStack>\r\n    )\r\n}\r\n\r\nexport default PropertyTypeList;","E:\\Repos\\hostel-chakra\\Hostel\\src\\Components\\NavComponents\\SearchBar.tsx",["228","229"],"import { Box, Button, Center, Flex, Input, InputGroup, InputLeftElement, InputRightElement, Popover, PopoverContent, PopoverTrigger, Spinner } from '@chakra-ui/react';\r\nimport axios from 'axios';\r\nimport React from 'react';\r\nimport { BsSearch } from 'react-icons/bs';\r\nimport { useQuery } from 'react-query';\r\nimport { fetchCities } from '../../API';\r\n// import 'react-day-picker/lib/style.css';\r\nimport PickRangeDay from './PickRangeDay';\r\nimport PopDetail from './PopDetail';\r\n\r\ntype CityResponse = {\r\n    cityName: string;\r\n    cityId: string;\r\n    countryName: string;\r\n    countryId: string;\r\n}\r\n\r\ntype SearchBarProps = {\r\n    country?: string;\r\n    city?: string;\r\n    from?: Date;\r\n    to?: Date;\r\n    adultNum?: number;\r\n    childrenNum?: number;\r\n    bedRoom?: number;\r\n}\r\n\r\nconst defaultValue: SearchBarProps = {\r\n    adultNum: 1,\r\n    childrenNum: 0,\r\n    bedRoom: 1\r\n}\r\n\r\n\r\n\r\nconst SearchBar = () => {\r\n    const { data: cities, isLoading, status } = useQuery<unknown, unknown, CityResponse[]>(\"cities\", fetchCities, {\r\n        staleTime: 1000 * 60 * 10\r\n    });\r\n    // console.log(cities);\r\n    const [form, setForm] = React.useState<SearchBarProps>(defaultValue);\r\n\r\n    // if (isLoading) return <>loading...</>;\r\n\r\n    const UpdateDate = (from?: Date, to?: Date) => {\r\n        setForm(s => ({\r\n            ...s,\r\n            from: from,\r\n            to: to\r\n        }))\r\n    }\r\n\r\n    const UpdatePeople = (adult: number, children: number, room: number) => {\r\n        setForm(s => ({\r\n            ...s,\r\n            childrenNum: children,\r\n            adultNum: adult,\r\n            bedRoom: room\r\n        }))\r\n        console.log(adult, children, room);\r\n    }\r\n\r\n    return (<div>\r\n        <Box p=\"2\" border=\"1px\" borderColor=\"yellow.400\" style={{ backdropFilter: \"blur(5px)\" }}>\r\n            <Flex display={{ lg: \"flex\" }} alignItems=\"center\">\r\n                <InputGroup>\r\n                    <InputLeftElement pointerEvents=\"none\" children={<BsSearch />} />\r\n                    <Input list=\"datalist-cities\" placeholder=\"City\" size=\"lg\" borderRadius=\"0\" />\r\n                    {isLoading ? <InputRightElement children={<Spinner alignSelf=\"center\" />}></InputRightElement> :\r\n                        <datalist id=\"datalist-cities\" style={{}}>\r\n                            <Box>\r\n                                {cities?.map(c => {\r\n                                    return <option key={c.cityId} value={c.cityName} />\r\n                                })}\r\n                                {status === 'error' && <>\r\n                                    <option value=\"Hanoi\" />\r\n                                    <option value=\"Moscow\" />\r\n                                    <option value=\"Danang\" />\r\n                                    <option value=\"Ivanovo\" />\r\n                                </>}\r\n                            </Box>\r\n                        </datalist>\r\n                    }\r\n                </InputGroup>\r\n                <Popover closeOnBlur={true}>\r\n                    <PopoverTrigger>\r\n                        <Button variant=\"outline\" w={[\"100%\", \"100%\", \"100%\", \"150%\"]}\r\n                            size=\"lg\" _focusVisible={{ border: \"0\" }} borderRadius=\"0\" px=\"2\">\r\n                            {form?.from?.toLocaleDateString() || \"From\"} - {form?.to?.toLocaleDateString() || \"To\"}\r\n                        </Button>\r\n                    </PopoverTrigger>\r\n                    <PopoverContent\r\n                        flexWrap=\"nowrap\" alignItems=\"center\" style={{ backdropFilter: \"blur(5px)\" }}\r\n                        w=\"550px\" borderRadius=\"0\" bgColor=\"rgba(66, 153, 225, 0.5)\">\r\n                        <PickRangeDay updateDate={UpdateDate} />\r\n                    </PopoverContent>\r\n                </Popover>\r\n                <Popover>\r\n                    <PopoverTrigger>\r\n                        <Button variant=\"outline\" w={[\"100%\", \"100%\", \"100%\", \"150%\"]} size=\"lg\" borderRadius=\"0\" px=\"2\">{form.adultNum + ' adult(s) - ' + form.childrenNum + ' child(s) - ' + form.bedRoom + ' room(s)'}</Button>\r\n                    </PopoverTrigger>\r\n                    <PopoverContent flexWrap=\"nowrap\" borderRadius=\"0\" bg=\"inherit\" bgColor=\"rgba(66, 153, 225, 0.5)\">\r\n                        <PopDetail updatePeople={UpdatePeople} adult={form.adultNum!} bedRoom={form.bedRoom!} children={form.childrenNum!}></PopDetail>\r\n                    </PopoverContent>\r\n                </Popover>\r\n                <Button alignSelf=\"center\" size=\"lg\" minW=\"100px\" ml={[0, 0, 0, 2]}\r\n                    mt={[2, 2, 2, 0]} w={[\"100%\", \"100%\", \"100%\", \"30%\"]} borderRadius=\"0\">Search</Button>\r\n            </Flex>\r\n        </Box>\r\n    </div>)\r\n}\r\n\r\nexport default SearchBar;","E:\\Repos\\hostel-chakra\\Hostel\\src\\Components\\NavComponents\\Navbar.tsx",[],"E:\\Repos\\hostel-chakra\\Hostel\\src\\Components\\FilterComponents\\RoomCardList.tsx",["230","231"],"import { SimpleGrid, Box } from '@chakra-ui/react'\r\nimport React from 'react'\r\nimport RoomCard from './RoomCard'\r\n\r\ntype RoomCardListProps = {\r\n    rooms?: RoomCard[];\r\n}\r\n\r\nconst RoomCardList: React.FC<RoomCardListProps> = ({ rooms }) => {\r\n    // rooms = defaultRooms;\r\n    if (!rooms || rooms.length === 0) return <Box>\r\n        Not found any room\r\n    </Box>\r\n\r\n    return (\r\n        <SimpleGrid spacing=\"8\" columns={[1, 1, 1, 2, 3]} >\r\n            {rooms && rooms.map((r, index) => {\r\n                return (\r\n                    <RoomCard key={r.id} room={r} isSaved={false}></RoomCard>\r\n                )\r\n            })}\r\n        </SimpleGrid>\r\n    )\r\n}\r\n\r\nconst defaultRoom: RoomCard = {\r\n    id: \"random-id-12321\",\r\n    name: \"Crystal palace\",\r\n    thumbnailUrl: \"https://picsum.photos/1100/1000?random=1\",\r\n    thumbnailAlt: \"rear view house with pool\",\r\n    description: \"Best place in townBest place in townBest place in townBest \",\r\n    location: \"Dark side, the moon\",\r\n    totalReview: 4,\r\n    totalStar: 23,\r\n    formattedPrice: 2021.00,\r\n    services: [\"Pet\", \"Kitchen\", \"Breakfast\", \"Wifi\"]\r\n}\r\n\r\nconst defaultRooms: Array<RoomCard> = [\r\n    { ...defaultRoom, thumbnailUrl: \"https://picsum.photos/1100/1000?random=1\" },\r\n    { ...defaultRoom, thumbnailUrl: \"https://picsum.photos/1100/1000?random=2\" },\r\n    { ...defaultRoom, thumbnailUrl: \"https://picsum.photos/1100/1000?random=3\" },\r\n    { ...defaultRoom, thumbnailUrl: \"https://picsum.photos/1100/1000?random=4\" },\r\n    { ...defaultRoom, thumbnailUrl: \"https://picsum.photos/1100/1000?random=5\" },\r\n]\r\nconst str = \"Lorem ipsum dolor sit amet consectetur adipisicing elit. Delectus non laboriosam blanditiis ipsa voluptas assumenda earum fugiat vel nemo rem totam modi officiis corporis accusamus consectetur, soluta optio, quas maiores!\"\r\nexport default RoomCardList;","E:\\Repos\\hostel-chakra\\Hostel\\src\\Components\\NavComponents\\PickRangeDay.tsx",["232","233"],"import { Box, Button, Center, Flex, useToast } from '@chakra-ui/react';\r\nimport React from 'react'\r\nimport DayPicker from 'react-day-picker';\r\nimport { DateUtils } from \"react-day-picker\";\r\nimport 'react-day-picker/lib/style.css';\r\n\r\nconst today = new Date(Date.now());\r\n\r\ntype PropertySchedule = {\r\n    reservedDates?: {\r\n        fromDate: string;\r\n        toDate: string;\r\n    }[],\r\n\r\n    dayOff?: Date[];\r\n}\r\n\r\nconst defaultSchedules: PropertySchedule = {\r\n    reservedDates: [\r\n        {\r\n            fromDate: \"2021-04-19\",\r\n            toDate: \"2021-04-21\"\r\n        },\r\n        {\r\n            fromDate: \"2021-04-21\",\r\n            toDate: \"2021-04-24\"\r\n        },\r\n        {\r\n            fromDate: \"2021-04-30\",\r\n            toDate: \"2021-05-01\"\r\n        }\r\n    ],\r\n}\r\n\r\nexport const getDatesBetween = (fromDate: string, toDate: string) => {\r\n    const from = new Date(fromDate);\r\n    const to = new Date(toDate);\r\n    let datesBtw: Date[] = [];\r\n    let start = from;\r\n    start.setDate(start.getDate() + 1);\r\n\r\n    while (start.getDate() < to.getDate()) {\r\n        datesBtw.push(new Date(start));\r\n        start.setDate(start.getDate() + 1);\r\n    }\r\n    return datesBtw;\r\n}\r\n\r\nconst getDisabledDates = (schedules?: PropertySchedule) => {\r\n    let disabledDates: Date[] = [];\r\n\r\n    if (schedules?.reservedDates) {\r\n        for (let i = 0; i < schedules.reservedDates.length; i++) {\r\n            disabledDates.push(...getDatesBetween(schedules.reservedDates[i].fromDate, schedules.reservedDates[i].toDate))\r\n        }\r\n    }\r\n\r\n    if (schedules?.dayOff) disabledDates.push(...schedules.dayOff);\r\n    return disabledDates;\r\n}\r\n\r\nconst getDateCheckOutOnly = (schedules?: PropertySchedule) => {\r\n    return schedules?.reservedDates?.map(r => new Date(r.fromDate));\r\n}\r\n\r\nconst getNextPossibleDate = (day: Date, schedules?: PropertySchedule) => {\r\n    let nextDay: Date | undefined = undefined;\r\n    console.log(day);\r\n\r\n    if (schedules?.reservedDates) {\r\n        schedules.reservedDates.forEach(r => {\r\n            const rFrom = new Date(r.fromDate);\r\n            console.log(rFrom < day);\r\n            // console.log(rFrom >= day && rFrom <= nextDay);\r\n\r\n            if (rFrom > day) {\r\n                if (!nextDay) nextDay = rFrom;\r\n                else if (rFrom <= nextDay) nextDay = rFrom;\r\n                console.log(nextDay);\r\n            }\r\n        })\r\n    }\r\n    if (nextDay !== day) return nextDay;\r\n    return null;\r\n}\r\n\r\ntype PickRangeDayState = {\r\n    from?: Date;\r\n    to?: Date;\r\n    enteredTo?: Date; // keep track of the last day for mouseEnter\r\n}\r\n\r\ntype PickRangeDayProps = {\r\n    from?: Date,\r\n    to?: Date,\r\n    updateDate: (from?: Date, to?: Date) => void,\r\n    schedules?: PropertySchedule\r\n}\r\n\r\nconst defaultDate: PickRangeDayState = {\r\n    from: undefined,\r\n    to: undefined,\r\n    enteredTo: undefined\r\n}\r\n\r\nconst PickRangeDay: React.FC<PickRangeDayProps> = ({ from, to, updateDate, schedules }) => {\r\n    const toast = useToast();\r\n    const [state, setState] = React.useState<PickRangeDayState>({ from: from, to: to });\r\n    schedules = defaultSchedules;\r\n\r\n    const disabled = [\r\n        {\r\n            before: new Date(Date.now())\r\n        },\r\n        ...getDisabledDates(schedules),\r\n    ]\r\n\r\n    const [disabledDays, setDisabledDays] = React.useState(disabled)\r\n\r\n    React.useEffect(() => {\r\n        updateDate(state.from, state.to);\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [state.from, state.to]);\r\n\r\n    const isSelectingFirstDay = (day: Date, from?: Date, to?: Date) => {\r\n        const isBeforeFirstDay = from && DateUtils.isDayBefore(day, from);\r\n        const isRangeSelected = from && to;\r\n        return !from || isBeforeFirstDay || isRangeSelected;\r\n    }\r\n\r\n    const handleDayMouseEnter = (day: Date) => {\r\n        const { from, to } = state;\r\n        if (!isSelectingFirstDay(day, from, to)) {\r\n            setState(s => ({\r\n                ...s,\r\n                enteredTo: day,\r\n            }));\r\n        }\r\n    }\r\n\r\n    const handleDayClick = (day: Date, modifiers: any) => {\r\n        if (modifiers.disabled) return;\r\n\r\n        const today = new Date(Date.now());\r\n        if (day < today) return;\r\n        const { from, to } = state;\r\n        if (from && to && day >= from && day <= to) {\r\n            handleResetClick();\r\n            return;\r\n        }\r\n        // if selecting first day, recalculate disabled days to this chosen day\r\n        if (isSelectingFirstDay(day, from, to)) {\r\n            if (modifiers.checkoutOnly) {\r\n                toast({\r\n                    status: \"info\",\r\n                    description: \"Check out only!\",\r\n                    duration: 3000\r\n                })\r\n                return;\r\n            }\r\n            setDisabledDays((s) => ({ ...s, before: day, after: getNextPossibleDate(day, schedules) }))\r\n\r\n            setState({\r\n                from: day,\r\n                to: undefined,\r\n                enteredTo: undefined,\r\n            });\r\n        }\r\n        // else, set every things back to normal\r\n        else {\r\n            setDisabledDays(disabled);\r\n            // prevent from = to\r\n            if (state.from?.getDate() === day.getDate()) {\r\n                setState({\r\n                    from: undefined,\r\n                    to: undefined,\r\n                    enteredTo: undefined,\r\n                });\r\n                return;\r\n            }\r\n            setState(s => ({\r\n                ...s,\r\n                to: day,\r\n                enteredTo: day,\r\n            }));\r\n        }\r\n    }\r\n\r\n    const handleResetClick = () => {\r\n        setState(defaultDate);\r\n    }\r\n\r\n    const selected = [state.from, { from: state.from, to: state.enteredTo }];\r\n\r\n\r\n    const modifiers = {\r\n        start: state.from,\r\n        end: state.enteredTo,\r\n        checkoutOnly: getDateCheckOutOnly(schedules),\r\n    }\r\n\r\n    return (\r\n        <Box alignSelf=\"stretch\">\r\n            <Flex alignItems=\"stretch\" flexDir=\"column\">\r\n                <DayPicker\r\n                    numberOfMonths={2}\r\n                    fromMonth={state.from}\r\n                    modifiers={modifiers as any}\r\n                    onDayClick={handleDayClick}\r\n                    disabledDays={disabledDays}\r\n                    onDayMouseEnter={handleDayMouseEnter}\r\n                    selectedDays={selected as any}>\r\n                </DayPicker>\r\n            </Flex>\r\n            <Flex justifyContent=\"center\" alignItems=\"center\">\r\n                {!state.from && !state.to && 'Please select the first day.'}\r\n                {state.from && !state.to && 'Please select the last day.'}\r\n                {state.from &&\r\n                    state.to &&\r\n                    `Selected from ${state.from.toLocaleDateString()} to\r\n                ${state.to.toLocaleDateString()}`}{' '}\r\n                {state.from && state.to && (\r\n                    <Button onClick={handleResetClick}>\r\n                        Reset\r\n                    </Button>\r\n                )}\r\n            </Flex>\r\n        </Box>\r\n    )\r\n}\r\n\r\nexport default PickRangeDay;","E:\\Repos\\hostel-chakra\\Hostel\\src\\Components\\NavComponents\\PopDetail.tsx",["234","235"],"import { Box, Flex, VStack, Text, Spacer, Square, Button, StackDivider } from '@chakra-ui/react';\r\nimport React from 'react';\r\n\r\ntype PopDetailState = {\r\n    adult: number;\r\n    children: number;\r\n    bedRoom: number;\r\n}\r\n\r\ninterface PopDetailProps extends PopDetailState {\r\n    updatePeople: (adult: number, children: number, room: number) => void;\r\n}\r\n\r\nconst PopDetail: React.FC<PopDetailProps> = ({ adult, children, bedRoom, updatePeople }) => {\r\n    return (\r\n        <div>\r\n            <Box p=\"4\" style={{ backdropFilter: \"blur(5px)\" }}>\r\n                <VStack align=\"stretch\" spacing={4}>\r\n                    <Flex alignItems=\"center\">\r\n                        <Text mr=\"auto\" fontSize=\"md\">Adult</Text>\r\n                        <Square border=\"1px\" borderColor=\"yellow.400\">\r\n                            <Button variant=\"ghost\" borderRadius=\"0\" disabled={adult <= 1 ? true : false}\r\n                                onClick={() => updatePeople(--adult, children, bedRoom)}>-</Button>\r\n                        </Square>\r\n                        <Text mx=\"4\" fontSize=\"md\">{adult}</Text>\r\n                        <Square border=\"1px\" borderColor=\"yellow.400\">\r\n                            <Button variant=\"ghost\" borderRadius=\"0\"\r\n                                onClick={() => updatePeople(++adult, children, bedRoom)}>+</Button>\r\n                        </Square>\r\n                    </Flex>\r\n                    <Flex alignItems=\"center\">\r\n                        <Text mr=\"auto\" fontSize=\"md\">Children</Text>\r\n                        <Square border=\"1px\" borderColor=\"yellow.400\">\r\n                            <Button variant=\"ghost\" borderRadius=\"0\" disabled={children <= 0 ? true : false}\r\n                                onClick={() => updatePeople(adult, --children, bedRoom)}>-</Button>\r\n                        </Square>\r\n                        <Text mx=\"4\" fontSize=\"md\">{children}</Text>\r\n                        <Square border=\"1px\" borderColor=\"yellow.400\">\r\n                            <Button variant=\"ghost\" borderRadius=\"0\"\r\n                                onClick={() => updatePeople(adult, ++children, bedRoom)}>+</Button>\r\n                        </Square>\r\n                    </Flex>\r\n                    <Flex alignItems=\"center\">\r\n                        <Text mr=\"auto\" fontSize=\"md\">Room</Text>\r\n                        <Square border=\"1px\" borderColor=\"yellow.400\">\r\n                            <Button variant=\"ghost\" borderRadius=\"0\" disabled={bedRoom <= 1 ? true : false}\r\n                                onClick={() => updatePeople(adult, children, --bedRoom)}>-</Button>\r\n                        </Square>\r\n                        <Text mx=\"4\" fontSize=\"md\">{bedRoom}</Text>\r\n                        <Square border=\"1px\" borderColor=\"yellow.400\">\r\n                            <Button variant=\"ghost\" borderRadius=\"0\"\r\n                                onClick={() => updatePeople(adult, children, ++bedRoom)}>+</Button>\r\n                        </Square>\r\n                    </Flex>\r\n                </VStack>\r\n            </Box>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default PopDetail;","E:\\Repos\\hostel-chakra\\Hostel\\src\\Components\\FilterComponents\\RoomCard.tsx",["236","237"],"import { Badge, Box, Image, LinkOverlay, Text, Link } from '@chakra-ui/react';\r\nimport React from 'react';\r\nimport { BsStar, BsStarFill } from 'react-icons/bs';\r\nimport { Link as LinkReact } from 'react-router-dom';\r\n\r\ntype RoomCardProps = {\r\n    room: RoomCard;\r\n    isSaved: boolean;\r\n}\r\n\r\nconst RoomCard = ({ room, isSaved }: RoomCardProps) => {\r\n    return (\r\n        <Box borderWidth=\"1px\" borderRadius=\"lg\">\r\n            <Box overflow=\"hidden\">\r\n                <Link as={LinkReact} to={\"/rooms/\" + room.id}>\r\n                    <Image src={room.thumbnailUrl}\r\n                        alt={room.thumbnailAlt} overflow=\"hidden\"\r\n                        style={{ transition: \"ease 0.5s\" }}\r\n                        _hover={{ transform: \"scale(1.1)\" }} />\r\n                </Link>\r\n            </Box>\r\n\r\n            <Box p=\"4\" d=\"flex\" flexDir=\"column\">\r\n                {!isSaved &&\r\n                    <Box d=\"flex\" alignItems=\"baseline\">\r\n                        <Badge borderRadius=\"full\" px=\"2\" colorScheme=\"teal\">\r\n                            New\r\n                        </Badge>\r\n                        {room.services.map((s, key) => {\r\n                            return (\r\n                                <Box\r\n                                    key={key}\r\n                                    color=\"gray.500\"\r\n                                    fontWeight=\"semibold\"\r\n                                    letterSpacing=\"wide\"\r\n                                    fontSize=\"xs\"\r\n                                    textTransform=\"uppercase\"\r\n                                    ml=\"2\"\r\n                                    isTruncated\r\n                                >{s} {room.services[room.services.length - 1] !== s && <>&bull;</>} </Box>\r\n                            )\r\n                        })}\r\n                    </Box>\r\n                }\r\n                <Box\r\n                    mt=\"1\"\r\n                    fontWeight=\"semibold\"\r\n                    as=\"h4\"\r\n                    lineHeight=\"tight\"\r\n                >\r\n                    {room.name}\r\n                </Box>\r\n\r\n                {!isSaved &&\r\n                    <Box\r\n                        as={\"p\"}\r\n                        lineHeight=\"tight\"\r\n                        textOverflow=\"ellipsis\"\r\n                        overflow=\"hidden\"\r\n                    >\r\n                        {room.description.length > 100 ? room.description.substring(0, 100) + \"...\" : room.description}\r\n                    </Box>\r\n                }\r\n\r\n                <Box d='flex' justifyContent=\"space-between\" justifySelf=\"end\">\r\n                    <Box as=\"h4\" fontSize=\"3xl\">\r\n                        {room.formattedPrice + \"$\"}\r\n                    </Box>\r\n\r\n                    <Box d=\"flex\" alignItems=\"center\">\r\n                        {Array(5).fill(\"\").map((_, i) => {\r\n                            return (i < Math.round(room.totalStar / room.totalReview) ? <BsStarFill key={i} colorRendering=\"teal.400\" /> : <BsStar key={i} />)\r\n                        })}\r\n                    </Box>\r\n                </Box>\r\n            </Box>\r\n        </Box>\r\n    )\r\n}\r\n\r\nexport default RoomCard;","E:\\Repos\\hostel-chakra\\Hostel\\src\\Components\\NavComponents\\Footer.tsx",[],"E:\\Repos\\hostel-chakra\\Hostel\\src\\Components\\SingleRoomComponents\\MyRoomBadge.tsx",["238"],"import { Box, Icon, HStack, VStack, Center } from '@chakra-ui/react'\r\nimport React from 'react'\r\nimport { IconType } from 'react-icons'\r\nimport { RiStarLine, RiUserStarLine } from \"react-icons/ri\";\r\n\r\ntype MyRoomBadgeProps = {\r\n    id: string;\r\n}\r\n\r\nconst MyRoomBadge: React.FC<MyRoomBadgeProps> = ({ id }) => {\r\n    const [icon, setIcon] = React.useState<IconType>();\r\n    const [badge, setBadge] = React.useState<RoomBadge>();\r\n\r\n    React.useEffect(() => {\r\n        let foundBadge = defaultRoomBadges.find(b => b.id === id);\r\n        setBadge(foundBadge);\r\n        switch (id) {\r\n            case \"1\":\r\n                setIcon(RiUserStarLine);\r\n                break;\r\n\r\n            default:\r\n                setIcon(RiStarLine);\r\n                break;\r\n        }\r\n    }, [id])\r\n\r\n    return (\r\n        <HStack alignContent=\"center\" spacing=\"0\" mb=\"2\">\r\n            <Icon d=\"flex\" boxSize=\"10\" alignItems=\"center\" justifyContent=\"center\" mt=\"2\" ml=\"2\">{icon}</Icon>\r\n            <VStack alignItems=\"start\" spacing=\"0\">\r\n                <Box as=\"h4\" fontSize=\"md\" fontWeight=\"semibold\">{badge?.title}</Box>\r\n                <Box as=\"h5\" fontSize=\"sm\" m=\"0\">{badge?.description}</Box>\r\n            </VStack>\r\n        </HStack>\r\n    )\r\n}\r\n\r\nexport const defaultRoomBadges: RoomBadge[] = [\r\n    {\r\n        id: \"1\",\r\n        title: \"Helpful owner\",\r\n        description: \"Owner provides best services\"\r\n    },\r\n    {\r\n        id: \"2\",\r\n        title: \"Extra clean\",\r\n        description: \"Owner follows our strict policies of enhanced clealiness\"\r\n    },\r\n    {\r\n        id: \"3\",\r\n        title: \"Not smoking\",\r\n        description: \"Owner does not allow smoking inside\"\r\n    },\r\n    {\r\n        id: \"4\",\r\n        title: \"Free cancelation\",\r\n        description: \"You can cancel with full refund in 24 hours\"\r\n    }\r\n]\r\n\r\nexport default MyRoomBadge;","e:\\Repos\\hostel-chakra\\Hostel\\src\\index.tsx",[],"e:\\Repos\\hostel-chakra\\Hostel\\src\\reportWebVitals.ts",[],"e:\\Repos\\hostel-chakra\\Hostel\\src\\serviceWorker.ts",[],"e:\\Repos\\hostel-chakra\\Hostel\\src\\App.tsx",["239"],"e:\\Repos\\hostel-chakra\\Hostel\\src\\Pages\\HomePage.tsx",["240"],"e:\\Repos\\hostel-chakra\\Hostel\\src\\Pages\\SingleRoom.tsx",["241","242","243","244","245"],"e:\\Repos\\hostel-chakra\\Hostel\\src\\Pages\\RoomsPage.tsx",[],"e:\\Repos\\hostel-chakra\\Hostel\\src\\Pages\\ErrorPage.tsx",[],"e:\\Repos\\hostel-chakra\\Hostel\\src\\Components\\NavComponents\\Footer.tsx",[],"e:\\Repos\\hostel-chakra\\Hostel\\src\\Components\\NavComponents\\SearchBar.tsx",[],"e:\\Repos\\hostel-chakra\\Hostel\\src\\Components\\NavComponents\\PickRangeDay.tsx",["246"],"e:\\Repos\\hostel-chakra\\Hostel\\src\\Components\\NavComponents\\Navbar.tsx",[],"e:\\Repos\\hostel-chakra\\Hostel\\src\\Components\\NavComponents\\PopDetail.tsx",["247","248"],"e:\\Repos\\hostel-chakra\\Hostel\\src\\Components\\HomeComponents\\PropertyTypeList.tsx",["249","250","251"],"e:\\Repos\\hostel-chakra\\Hostel\\src\\Components\\SingleRoomComponents\\MyRoomBadge.tsx",["252"],"e:\\Repos\\hostel-chakra\\Hostel\\src\\Components\\FilterComponents\\RoomCardList.tsx",[],"e:\\Repos\\hostel-chakra\\Hostel\\src\\Logo.tsx",[],"e:\\Repos\\hostel-chakra\\Hostel\\src\\ColorModeSwitcher.tsx",[],"e:\\Repos\\hostel-chakra\\Hostel\\src\\Components\\FilterComponents\\RoomCard.tsx",["253"],"E:\\Repos\\hostel-chakra\\Hostel\\src\\Components\\LoginButton.tsx",["254","255","256","257","258"],"import { FormControl, FormLabel } from '@chakra-ui/form-control';\r\nimport { Box, Button, Input, Modal, ModalBody, ModalCloseButton, ModalContent, ModalFooter, ModalHeader, ModalOverlay, useDisclosure } from '@chakra-ui/react';\r\nimport React from 'react'\r\nimport { FaArrowRight } from 'react-icons/fa';\r\nimport LoginForm from './LoginForm';\r\n\r\nconst LoginButton = () => {\r\n    const { isOpen, onOpen, onClose } = useDisclosure();\r\n    const initRef = React.useRef<HTMLInputElement>(null);\r\n\r\n    return (\r\n        <Box>\r\n            <Button variant=\"ghost\" onClick={onOpen}>Login</Button>\r\n\r\n            <Modal isOpen={isOpen} onClose={onClose} size=\"xl\" motionPreset=\"slideInBottom\" isCentered initialFocusRef={initRef}>\r\n                <ModalOverlay />\r\n\r\n                <ModalContent>\r\n                    <ModalHeader>Login</ModalHeader>\r\n                    <ModalCloseButton />\r\n                    <ModalBody pb=\"2\">\r\n                        <LoginForm initRef={initRef}></LoginForm>\r\n                    </ModalBody>\r\n                </ModalContent>\r\n            </Modal>\r\n        </Box>\r\n    )\r\n}\r\n\r\nexport default LoginButton;","E:\\Repos\\hostel-chakra\\Hostel\\src\\Components\\RegisterButton.tsx",[],"E:\\Repos\\hostel-chakra\\Hostel\\src\\Components\\RegisterForm.tsx",["259"],"import { Box, Button, Collapse, FormControl, HStack, Input, PinInput, PinInputField, Select, VStack } from '@chakra-ui/react';\r\nimport React from 'react'\r\nimport { FaArrowRight } from 'react-icons/fa';\r\n\r\ntype ActionType =\r\n    | { type: \"ChangeInput\"; country?: string; phone?: string }\r\n    | { type: \"RegisterPhone\" }\r\n    | { type: \"CheckPincode\" }\r\n    | { type: \"RegisterDetail\"; name: string; email: string; password: string }\r\n    | { type: \"SetLoading\"; isLoading: boolean }\r\n    | { type: \"ResetForm\"; }\r\n\r\n\r\ntype FormState = {\r\n    country?: string;\r\n    phone?: string;\r\n    name?: string;\r\n    pincode?: string;\r\n    email?: string;\r\n    password?: string;\r\n}\r\n\r\ntype RegisterState = {\r\n    form?: FormState;\r\n    show: \"none\" | \"pin\" | \"detail\"\r\n    isLoading?: boolean;\r\n}\r\n\r\nconst reducer = (state: RegisterState, action: ActionType): RegisterState => {\r\n    switch (action.type) {\r\n        case \"ChangeInput\":\r\n            return {\r\n                ...state,\r\n                form: {\r\n                    ...state.form,\r\n                    country: action.country,\r\n                    phone: action.phone\r\n                }\r\n            }\r\n        case 'RegisterPhone':\r\n            return {\r\n                ...state,\r\n                show: 'pin',\r\n                isLoading: true,\r\n            }\r\n        case 'CheckPincode':\r\n            return {\r\n                ...state,\r\n                show: 'detail',\r\n                isLoading: true\r\n            }\r\n        case 'RegisterDetail':\r\n            return {\r\n                ...state,\r\n            }\r\n        case \"SetLoading\":\r\n            return {\r\n                ...state,\r\n                isLoading: action.isLoading,\r\n            }\r\n        case \"ResetForm\":\r\n            return initialState;\r\n\r\n        default:\r\n            return {\r\n                ...state,\r\n            }\r\n    }\r\n}\r\n\r\nconst getRandomInt = (min: number, max: number) => {\r\n    min = Math.ceil(min);\r\n    max = Math.floor(max);\r\n    return Math.floor(Math.random() * (max - min) + min);\r\n}\r\n\r\nconst fetchPincode = async (phone: number) => {\r\n    setTimeout(() => {\r\n        return getRandomInt(1000, 9999);\r\n    }, 1000);\r\n}\r\n\r\nconst CheckPin = (pin: string) => {\r\n    return new Promise<boolean>((resolve, reject) => {\r\n        if (pin.length === 4)\r\n            setTimeout(() => { resolve(true) }, 1000);\r\n        else\r\n            setTimeout(() => { reject(\"Pin not correct\") }, 1000);\r\n    })\r\n}\r\n\r\nconst initialState: RegisterState = {\r\n    form: {},\r\n    isLoading: false,\r\n    show: \"none\"\r\n}\r\n\r\nconst RegisterForm: React.FC = ({ children }) => {\r\n    const [countries, setCountries] = React.useState<string[]>();\r\n    const [state, dispatch] = React.useReducer(reducer, initialState);\r\n\r\n    // fetching countries\r\n    React.useEffect(() => {\r\n        setCountries(defaultCountries);\r\n    }, [])\r\n\r\n    const handleRegisterButton = async (pin?: string) => {\r\n        if (state.show === \"none\") {\r\n            dispatch({ type: 'RegisterPhone' })\r\n            // send to api server\r\n            setTimeout(() => {\r\n                dispatch({ type: 'SetLoading', isLoading: false })\r\n            }, 1000)\r\n        }\r\n\r\n        else if (state.show === \"pin\" && pin !== undefined) {\r\n            dispatch({ type: 'SetLoading', isLoading: true })\r\n            CheckPin(pin).then(res => {\r\n                if (res === true) {\r\n                    console.log(\"Pincode correct\");\r\n                    dispatch({ type: 'CheckPincode' })\r\n                }\r\n                else {\r\n                    console.log(\"Pincode not correct\");\r\n                }\r\n            }).catch((r) => {\r\n                console.log(r);\r\n            }).finally(() => {\r\n                dispatch({ type: 'SetLoading', isLoading: false })\r\n            })\r\n        }\r\n    }\r\n\r\n    return (\r\n        <FormControl d=\"flex\" flexDir=\"column\">\r\n            <Select borderBottomRadius=\"0\" isDisabled={state.show !== \"none\"} onChange={(e) => dispatch({ type: 'ChangeInput', country: e.target.value, phone: state.form?.phone })} size=\"lg\" isRequired placeholder=\"Choose your country\">\r\n                {countries?.map((c, index) => {\r\n                    return <option value={c} key={index}>{c}</option>\r\n                })}\r\n            </Select>\r\n            <Input borderTopRadius=\"0\" placeholder=\"Phone number\" isDisabled={state.show !== \"none\"} size=\"lg\" value={state.form?.phone} onChange={(e) => dispatch({ type: 'ChangeInput', phone: e.target.value, country: state.form?.country })} />\r\n\r\n            <Collapse in={state.show === \"pin\"}>\r\n                <VStack spacing=\"1\" my=\"2\">\r\n                    <Box as=\"h2\"> We've sent you a verification code</Box>\r\n                    <HStack>\r\n                        <PinInput value={state.form?.pincode} isDisabled={state.isLoading} onComplete={(value) => handleRegisterButton(value)}>\r\n                            <PinInputField />\r\n                            <PinInputField />\r\n                            <PinInputField />\r\n                            <PinInputField />\r\n                        </PinInput>\r\n                    </HStack>\r\n                </VStack>\r\n            </Collapse>\r\n\r\n            <Collapse in={state.show === \"detail\"}>\r\n                <Box my=\"2\">\r\n                    <Input borderBottomRadius=\"0\" size=\"lg\" placeholder=\"Your name\" />\r\n                    <Input borderRadius=\"0\" size=\"lg\" placeholder=\"Email address\" />\r\n                    <Input borderTopRadius=\"0\" size=\"lg\" placeholder=\"Password\" />\r\n                </Box>\r\n            </Collapse>\r\n\r\n            <Button my=\"3\" w=\"30%\" rounded=\"full\" type=\"submit\" alignSelf=\"center\" isLoading={state.isLoading}\r\n                isDisabled={((state.form?.phone !== undefined && state.form?.phone !== \"\")\r\n                    && (state.form?.country != null && state.form?.country !== \"\")) ? false : true}\r\n                title=\"Next step\" onClick={() => handleRegisterButton()}\r\n            >\r\n                <FaArrowRight />\r\n            </Button>\r\n            {/* <Button alignSelf=\"flex-end\" variant=\"ghost\" colorScheme=\"red\" onClick={() => dispatch({ type: \"ResetForm\" })}>Reset</Button> */}\r\n\r\n        </FormControl>\r\n    )\r\n}\r\n\r\nconst defaultCountries: string[] = [\r\n    \"Russia\", \"Vietnam\"\r\n]\r\n\r\nexport default RegisterForm;","E:\\Repos\\hostel-chakra\\Hostel\\src\\Contexts\\AuthContext.tsx",["260","261","262"],"import { useToast } from '@chakra-ui/toast';\r\nimport axios, { AxiosResponse } from 'axios';\r\nimport React from 'react';\r\nimport { useMutation, useQuery } from 'react-query';\r\nimport { API_URL, authenticate, validateToken } from '../API';\r\n\r\n\r\ntype AuthContextStates = {\r\n    loginAsync: (request: LoginRequest) => any\r\n    logoutAsync: () => Promise<void>;\r\n    registerAsync?: () => Promise<void>;\r\n    user?: UserResponse;\r\n    isLoading: boolean;\r\n}\r\n\r\nexport const AuthContext = React.createContext<AuthContextStates>({} as AuthContextStates);\r\n\r\nexport const AuthProvider: React.FC = ({ children }) => {\r\n    const [isLoading, setIsLoading] = React.useState<boolean>(false);\r\n    const [user, setUser] = React.useState<UserResponse | undefined>(undefined);\r\n    const toast = useToast();\r\n\r\n    const mutateLogin = useMutation<AxiosResponse<UserResponse>, any, LoginRequest>(authenticate, {\r\n        onSuccess: (res) => {\r\n            setUser(res.data);\r\n            localStorage.setItem(\"user\", JSON.stringify(res.data));\r\n            toast({ description: \"Logged in successfully\", status: \"success\", duration: 3000 });\r\n        },\r\n        onError: (res) => { toast({ description: res.data.message, status: \"error\", duration: 3000 }) },\r\n        onSettled: () => setIsLoading(false)\r\n    })\r\n\r\n    React.useEffect(() => {\r\n        const foundUser = localStorage.getItem(\"user\");\r\n        if (foundUser) {\r\n            const user = JSON.parse(foundUser) as UserResponse;\r\n\r\n            validateToken(user.token).then(res => {\r\n                console.log(\"validating...\")\r\n                console.log(res);\r\n                if (res.status !== 200) return logoutAsync(\"Token expired\");\r\n            })\r\n\r\n            setUser(user);\r\n            axios.interceptors.request.use((config) => {\r\n                if (user.token) {\r\n                    config.headers.Authorization = `Bearer ${user.token}`;\r\n                }\r\n                return config;\r\n            }, (e) => {\r\n                return Promise.reject(e);\r\n            })\r\n        }\r\n    }, [])\r\n\r\n    React.useEffect(() => {\r\n        axios.interceptors.request.use((config) => {\r\n            if (user?.token) config.headers.Authorization = `Bearer ${user.token}`;\r\n            return config;\r\n        }, (e) => {\r\n            return Promise.reject(e);\r\n        })\r\n    }, [user])\r\n\r\n    const logoutAsync = async (msg?: string) => {\r\n        await new Promise(resolve => setTimeout(resolve, 1000));\r\n        setUser(undefined);\r\n        localStorage.removeItem(\"user\");\r\n        toast({\r\n            title: msg ? msg : \"Logged out successfully!\",\r\n            isClosable: true,\r\n            duration: 3000,\r\n            status: \"success\"\r\n        })\r\n        await new Promise(resolve => setTimeout(resolve, 500));\r\n        // window.location.reload();\r\n    }\r\n\r\n    const loginAsync = async (request: LoginRequest) => {\r\n        setIsLoading(true);\r\n        await new Promise(resolve => setTimeout(resolve, 2000));\r\n        try {\r\n            mutateLogin.mutate(request);\r\n        }\r\n        catch (e) {\r\n            console.log(e);\r\n        }\r\n        finally {\r\n            setIsLoading(false);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <AuthContext.Provider value={{ loginAsync: loginAsync, logoutAsync: logoutAsync, isLoading: isLoading, user: user }}>\r\n            {children}\r\n        </AuthContext.Provider>\r\n    )\r\n}","E:\\Repos\\hostel-chakra\\Hostel\\src\\Components\\LoginForm.tsx",["263","264","265","266","267"],"import { Box, FormControl, FormLabel, Input, Button, Checkbox, FormErrorMessage, chakra } from '@chakra-ui/react';\r\nimport React from 'react'\r\nimport { FaArrowRight } from 'react-icons/fa';\r\nimport { useHistory } from 'react-router';\r\nimport { AuthContext } from '../Contexts/AuthContext';\r\n\r\ntype LoginFormProps = {\r\n    initRef?: React.RefObject<HTMLInputElement>;\r\n    fromUrl?: string;\r\n}\r\n\r\nfunction validateEmail(email: string | undefined) {\r\n    if (!email) return false;\r\n    const re = /^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\r\n    return re.test(email);\r\n}\r\n\r\n\r\nconst LoginForm: React.FC<LoginFormProps> = ({ initRef, fromUrl }) => {\r\n    const history = useHistory();\r\n\r\n    const [loginForm, setLoginForm] = React.useState<LoginRequest>({\r\n        remember: false\r\n    });\r\n\r\n    const [emailError, setEmailError] = React.useState(false);\r\n    const [passwordError, setPasswordError] = React.useState(false);\r\n\r\n    const validateForm = (email: string | undefined, password: string | undefined) => {\r\n        if (validateEmail(email)) {\r\n            setEmailError(false);\r\n        } else setEmailError(true);\r\n        if (password === \"\") {\r\n            setPasswordError(true)\r\n        } else setPasswordError(false);\r\n    }\r\n\r\n    React.useEffect(() => {\r\n        validateForm(loginForm.email, loginForm.password);\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [loginForm.email, loginForm.password])\r\n\r\n    const authContext = React.useContext(AuthContext);\r\n\r\n    const handleLogin = () => {\r\n        authContext.loginAsync(loginForm);\r\n        if (fromUrl) history.replace(fromUrl);\r\n    }\r\n\r\n    return (\r\n        <chakra.form>\r\n            <FormControl isRequired isDisabled={authContext.isLoading} isInvalid={emailError || passwordError} d=\"flex\" flexDir=\"column\">\r\n                <FormLabel htmlFor=\"email\">Email</FormLabel>\r\n                <Input placeholder=\"Enter your email\" id=\"email\" isInvalid={emailError} ref={initRef} variant=\"filled\" size=\"lg\" type=\"email\"\r\n                    value={loginForm.email} isRequired\r\n                    onChange={(e) => setLoginForm(s => ({\r\n                        ...s,\r\n                        email: e.target.value.trim()\r\n                    }))}></Input>\r\n                <FormErrorMessage>{\"Email not correct\"}</FormErrorMessage>\r\n\r\n                <FormLabel htmlFor=\"password\" my=\"2\">Password</FormLabel>\r\n                <Input placeholder=\"Enter your password\" id=\"password\" isInvalid={passwordError} variant=\"filled\" size=\"lg\" type=\"password\"\r\n                    value={loginForm.password} required={true} minLength={1} isRequired\r\n                    onChange={(e) => setLoginForm(s => ({\r\n                        ...s,\r\n                        password: e.target.value\r\n                    }))}></Input>\r\n\r\n                <Checkbox size=\"lg\" checked={loginForm.remember} mt=\"2\"\r\n                    onChange={(e) => setLoginForm(s => ({ ...s, remember: e.target.checked }))}>\r\n                    Remember me\r\n                </Checkbox>\r\n\r\n                <Button my=\"3\" w=\"30%\" rounded=\"full\" type=\"submit\" alignSelf=\"center\" title=\"Login\"\r\n                    isLoading={authContext.isLoading}\r\n                    isDisabled={emailError || passwordError}\r\n                    onClick={handleLogin}>\r\n                    <FaArrowRight />\r\n                </Button>\r\n            </FormControl>\r\n        </chakra.form>\r\n\r\n    );\r\n}\r\n\r\nexport default LoginForm;","E:\\Repos\\hostel-chakra\\Hostel\\src\\Pages\\ProfilePage.tsx",["268","269","270"],"import { Avatar, Box, Button, Divider, Icon, SimpleGrid, Spacer, VStack } from '@chakra-ui/react';\r\nimport React from 'react'\r\nimport { FaCheck, FaUserShield } from 'react-icons/fa';\r\nimport { useMutation, useQuery } from 'react-query';\r\nimport { useLocation } from 'react-router';\r\nimport { toggleLike } from '../API';\r\nimport RoomCard from '../Components/FilterComponents/RoomCard';\r\nimport { AuthContext } from '../Contexts/AuthContext';\r\n\r\nconst useQueryParam = () => {\r\n    return new URLSearchParams(useLocation().search);\r\n}\r\n\r\nconst ProfilePage = () => {\r\n    const { user } = React.useContext(AuthContext);\r\n\r\n    let query = useQueryParam();\r\n    let view = query.get(\"view\")?.toLowerCase();\r\n\r\n    return (\r\n        <Box d=\"flex\" flexDir={{ base: \"column\", md: \"row\" }}>\r\n            {/* LEFT */}\r\n            <Box w={{ base: \"100%\", md: \"25%\" }} minW=\"300px\">\r\n                <Box d=\"flex\" overflow=\"hidden\" borderWidth=\"1px\" borderRadius=\"lg\" p=\"4\" flexDir={{ base: \"row-reverse\", md: \"column\" }} spacing=\"2\">\r\n                    <VStack alignSelf=\"center\" justifySelf=\"start\">\r\n                        <Avatar name={user?.name} boxSize={{ base: \"20\", md: \"40\" }}></Avatar>\r\n                        <Button variant=\"link\" my=\"2\" fontSize=\"sm\">Update photo</Button>\r\n                    </VStack>\r\n\r\n                    <VStack alignItems=\"start\" spacing=\"2\">\r\n                        <Icon as={FaUserShield} boxSize=\"8\" />\r\n                        <Box as=\"h4\" fontWeight=\"bold\" fontSize=\"lg\" fontFamily=\"mono\">Identity verification</Box>\r\n                        <Box as=\"h4\">Show others you’re really you with the identity verification badge.</Box>\r\n\r\n                        <Divider />\r\n\r\n                        <Box as=\"h4\" fontWeight=\"bold\" fontSize=\"lg\" fontFamily=\"mono\">{user?.name + \" confirmed\"}</Box>\r\n                        <Box d=\"flex\" flexDir=\"row\" alignItems=\"baseline\">\r\n                            <FaCheck />\r\n                            <Box as=\"h4\" ml=\"4\">Email confirmed</Box>\r\n                        </Box>\r\n                        <Box d=\"flex\" flexDir=\"row\" alignItems=\"baseline\">\r\n                            <FaCheck />\r\n                            <Box as=\"h4\" ml=\"4\">Phone confirmed</Box>\r\n                        </Box>\r\n                    </VStack>\r\n                </Box>\r\n            </Box>\r\n\r\n            <Spacer />\r\n\r\n            {/* RIGHT */}\r\n            <Box w={{ base: \"100%\", md: \"65%\" }}>\r\n                {(view === \"likes\" || view === null) && <UserLikesProperties userToken={user?.token}></UserLikesProperties>}\r\n                {view === \"notifications\" && <Notifications></Notifications>}\r\n            </Box>\r\n        </Box>\r\n    )\r\n}\r\n\r\ntype LikesProps = {\r\n    userToken?: string;\r\n}\r\n\r\nconst UserLikesProperties: React.FC<LikesProps> = ({ userToken, children }) => {\r\n    const rooms: RoomCardType[] = defaultRooms;\r\n    return (\r\n        <Box>\r\n            <Box as={\"h1\"} fontFamily={\"heading\"} fontWeight=\"bold\" fontSize=\"4xl\" mb=\"3\">Rooms that you saved</Box>\r\n            <SimpleGrid spacing=\"4\" columns={[1, 2, 2, 3]}>\r\n                {rooms.map(r => <RoomCard room={r} key={r.id} isSaved={true} />)}\r\n            </SimpleGrid>\r\n        </Box>\r\n    );\r\n}\r\n\r\nconst Notifications: React.FC = () => {\r\n    return (\r\n        <Box>Notification</Box>\r\n    )\r\n}\r\n\r\nexport default ProfilePage;\r\n\r\nconst defaultRoom: RoomCardType = {\r\n    id: \"random-id-12321\",\r\n    name: \"Crystal palace\",\r\n    thumbnailUrl: \"https://picsum.photos/1100/1000?random=1\",\r\n    thumbnailAlt: \"rear view house with pool\",\r\n    description: \"Best place in townBest place in townBest place in townBest \",\r\n    location: \"Dark side, the moon\",\r\n    totalReview: 4,\r\n    totalStar: 23,\r\n    formattedPrice: 2021.00,\r\n    services: [\"Pet\", \"Kitchen\", \"Breakfast\", \"Wifi\"]\r\n}\r\n\r\nconst defaultRooms: Array<RoomCardType> = [\r\n    { ...defaultRoom, thumbnailUrl: \"https://picsum.photos/1100/1000?random=1\" },\r\n    { ...defaultRoom, thumbnailUrl: \"https://picsum.photos/1100/1000?random=2\" },\r\n    { ...defaultRoom, thumbnailUrl: \"https://picsum.photos/1100/1000?random=3\" },\r\n    { ...defaultRoom, thumbnailUrl: \"https://picsum.photos/1100/1000?random=4\" },\r\n    { ...defaultRoom, thumbnailUrl: \"https://picsum.photos/1100/1000?random=5\" },\r\n]","E:\\Repos\\hostel-chakra\\Hostel\\src\\Pages\\PublishRoomPage.tsx",["271","272"],"E:\\Repos\\hostel-chakra\\Hostel\\src\\API.ts",["273"],"E:\\Repos\\hostel-chakra\\Hostel\\src\\Pages\\PreviewRoomPage.tsx",[],{"ruleId":"274","replacedBy":"275"},{"ruleId":"276","replacedBy":"277"},{"ruleId":"274","replacedBy":"278"},{"ruleId":"276","replacedBy":"279"},{"ruleId":"280","severity":1,"message":"281","line":7,"column":37,"nodeType":"282","messageId":"283","endLine":7,"endColumn":50},{"ruleId":"280","severity":1,"message":"284","line":7,"column":87,"nodeType":"282","messageId":"283","endLine":7,"endColumn":97},{"ruleId":"280","severity":1,"message":"285","line":13,"column":10,"nodeType":"282","messageId":"283","endLine":13,"endColumn":14},{"ruleId":"280","severity":1,"message":"286","line":1,"column":144,"nodeType":"282","messageId":"283","endLine":1,"endColumn":151},{"ruleId":"280","severity":1,"message":"287","line":1,"column":153,"nodeType":"282","messageId":"283","endLine":1,"endColumn":161},{"ruleId":"280","severity":1,"message":"288","line":2,"column":10,"nodeType":"282","messageId":"283","endLine":2,"endColumn":18},{"ruleId":"280","severity":1,"message":"289","line":6,"column":16,"nodeType":"282","messageId":"283","endLine":6,"endColumn":24},{"ruleId":"280","severity":1,"message":"290","line":7,"column":8,"nodeType":"282","messageId":"283","endLine":7,"endColumn":18},{"ruleId":"280","severity":1,"message":"291","line":9,"column":8,"nodeType":"282","messageId":"283","endLine":9,"endColumn":14},{"ruleId":"280","severity":1,"message":"292","line":12,"column":8,"nodeType":"282","messageId":"283","endLine":12,"endColumn":17},{"ruleId":"280","severity":1,"message":"293","line":51,"column":19,"nodeType":"282","messageId":"283","endLine":51,"endColumn":26},{"ruleId":"280","severity":1,"message":"294","line":51,"column":28,"nodeType":"282","messageId":"283","endLine":51,"endColumn":33},{"ruleId":"280","severity":1,"message":"295","line":51,"column":35,"nodeType":"282","messageId":"283","endLine":51,"endColumn":44},{"ruleId":"280","severity":1,"message":"296","line":1,"column":15,"nodeType":"282","messageId":"283","endLine":1,"endColumn":19},{"ruleId":"280","severity":1,"message":"297","line":1,"column":21,"nodeType":"282","messageId":"283","endLine":1,"endColumn":25},{"ruleId":"280","severity":1,"message":"298","line":1,"column":47,"nodeType":"282","messageId":"283","endLine":1,"endColumn":53},{"ruleId":"280","severity":1,"message":"299","line":7,"column":10,"nodeType":"282","messageId":"283","endLine":7,"endColumn":17},{"ruleId":"280","severity":1,"message":"300","line":1,"column":23,"nodeType":"282","messageId":"283","endLine":1,"endColumn":29},{"ruleId":"280","severity":1,"message":"301","line":2,"column":8,"nodeType":"282","messageId":"283","endLine":2,"endColumn":13},{"ruleId":"280","severity":1,"message":"302","line":39,"column":7,"nodeType":"282","messageId":"283","endLine":39,"endColumn":36},{"ruleId":"280","severity":1,"message":"303","line":46,"column":7,"nodeType":"282","messageId":"283","endLine":46,"endColumn":10},{"ruleId":"280","severity":1,"message":"300","line":1,"column":23,"nodeType":"282","messageId":"283","endLine":1,"endColumn":29},{"ruleId":"280","severity":1,"message":"304","line":7,"column":7,"nodeType":"282","messageId":"283","endLine":7,"endColumn":12},{"ruleId":"280","severity":1,"message":"298","line":1,"column":35,"nodeType":"282","messageId":"283","endLine":1,"endColumn":41},{"ruleId":"280","severity":1,"message":"305","line":1,"column":59,"nodeType":"282","messageId":"283","endLine":1,"endColumn":71},{"ruleId":"280","severity":1,"message":"306","line":1,"column":29,"nodeType":"282","messageId":"283","endLine":1,"endColumn":40},{"ruleId":"280","severity":1,"message":"307","line":1,"column":42,"nodeType":"282","messageId":"283","endLine":1,"endColumn":46},{"ruleId":"280","severity":1,"message":"300","line":1,"column":37,"nodeType":"282","messageId":"283","endLine":1,"endColumn":43},{"ruleId":"280","severity":1,"message":"285","line":13,"column":10,"nodeType":"282","messageId":"283","endLine":13,"endColumn":14},{"ruleId":"280","severity":1,"message":"308","line":4,"column":15,"nodeType":"282","messageId":"283","endLine":4,"endColumn":23},{"ruleId":"280","severity":1,"message":"288","line":2,"column":10,"nodeType":"282","messageId":"283","endLine":2,"endColumn":18},{"ruleId":"280","severity":1,"message":"292","line":9,"column":8,"nodeType":"282","messageId":"283","endLine":9,"endColumn":17},{"ruleId":"280","severity":1,"message":"309","line":22,"column":6,"nodeType":"282","messageId":"283","endLine":22,"endColumn":21},{"ruleId":"280","severity":1,"message":"310","line":41,"column":7,"nodeType":"282","messageId":"283","endLine":41,"endColumn":18},{"ruleId":"280","severity":1,"message":"311","line":45,"column":13,"nodeType":"282","messageId":"283","endLine":45,"endColumn":17},{"ruleId":"280","severity":1,"message":"300","line":1,"column":23,"nodeType":"282","messageId":"283","endLine":1,"endColumn":29},{"ruleId":"280","severity":1,"message":"298","line":1,"column":35,"nodeType":"282","messageId":"283","endLine":1,"endColumn":41},{"ruleId":"280","severity":1,"message":"305","line":1,"column":59,"nodeType":"282","messageId":"283","endLine":1,"endColumn":71},{"ruleId":"280","severity":1,"message":"296","line":1,"column":10,"nodeType":"282","messageId":"283","endLine":1,"endColumn":14},{"ruleId":"280","severity":1,"message":"297","line":1,"column":16,"nodeType":"282","messageId":"283","endLine":1,"endColumn":20},{"ruleId":"280","severity":1,"message":"298","line":1,"column":22,"nodeType":"282","messageId":"283","endLine":1,"endColumn":28},{"ruleId":"280","severity":1,"message":"300","line":1,"column":37,"nodeType":"282","messageId":"283","endLine":1,"endColumn":43},{"ruleId":"280","severity":1,"message":"312","line":6,"column":7,"nodeType":"282","messageId":"283","endLine":6,"endColumn":32},{"ruleId":"280","severity":1,"message":"313","line":1,"column":10,"nodeType":"282","messageId":"283","endLine":1,"endColumn":21},{"ruleId":"280","severity":1,"message":"314","line":1,"column":23,"nodeType":"282","messageId":"283","endLine":1,"endColumn":32},{"ruleId":"280","severity":1,"message":"315","line":2,"column":23,"nodeType":"282","messageId":"283","endLine":2,"endColumn":28},{"ruleId":"280","severity":1,"message":"316","line":2,"column":80,"nodeType":"282","messageId":"283","endLine":2,"endColumn":91},{"ruleId":"280","severity":1,"message":"317","line":4,"column":10,"nodeType":"282","messageId":"283","endLine":4,"endColumn":22},{"ruleId":"280","severity":1,"message":"318","line":77,"column":7,"nodeType":"282","messageId":"283","endLine":77,"endColumn":19},{"ruleId":"280","severity":1,"message":"319","line":4,"column":23,"nodeType":"282","messageId":"283","endLine":4,"endColumn":31},{"ruleId":"280","severity":1,"message":"320","line":5,"column":10,"nodeType":"282","messageId":"283","endLine":5,"endColumn":17},{"ruleId":"321","severity":1,"message":"322","line":54,"column":8,"nodeType":"323","endLine":54,"endColumn":10,"suggestions":"324"},{"ruleId":"280","severity":1,"message":"325","line":1,"column":10,"nodeType":"282","messageId":"283","endLine":1,"endColumn":13},{"ruleId":"326","severity":1,"message":"327","line":14,"column":38,"nodeType":"328","messageId":"329","endLine":14,"endColumn":39,"suggestions":"330"},{"ruleId":"326","severity":1,"message":"327","line":14,"column":63,"nodeType":"328","messageId":"329","endLine":14,"endColumn":64,"suggestions":"331"},{"ruleId":"326","severity":1,"message":"327","line":14,"column":72,"nodeType":"328","messageId":"329","endLine":14,"endColumn":73,"suggestions":"332"},{"ruleId":"326","severity":1,"message":"327","line":14,"column":76,"nodeType":"328","messageId":"329","endLine":14,"endColumn":77,"suggestions":"333"},{"ruleId":"280","severity":1,"message":"334","line":4,"column":10,"nodeType":"282","messageId":"283","endLine":4,"endColumn":21},{"ruleId":"280","severity":1,"message":"319","line":4,"column":23,"nodeType":"282","messageId":"283","endLine":4,"endColumn":31},{"ruleId":"280","severity":1,"message":"335","line":6,"column":10,"nodeType":"282","messageId":"283","endLine":6,"endColumn":20},{"ruleId":"280","severity":1,"message":"295","line":35,"column":27,"nodeType":"282","messageId":"283","endLine":35,"endColumn":36},{"ruleId":"280","severity":1,"message":"336","line":35,"column":38,"nodeType":"282","messageId":"283","endLine":35,"endColumn":44},{"ruleId":"280","severity":1,"message":"337","line":5,"column":7,"nodeType":"282","messageId":"283","endLine":5,"endColumn":26},"no-native-reassign",["338"],"no-negated-in-lhs",["339"],["338"],["339"],"@typescript-eslint/no-unused-vars","'BrowserRouter' is defined but never used.","Identifier","unusedVar","'useHistory' is defined but never used.","'mode' is defined but never used.","'Spinner' is defined but never used.","'Progress' is defined but never used.","'userInfo' is defined but never used.","'Redirect' is defined but never used.","'LoadingBar' is defined but never used.","'Navbar' is defined but never used.","'SearchBar' is defined but never used.","'isError' is assigned a value but never used.","'error' is assigned a value but never used.","'isLoading' is assigned a value but never used.","'Flex' is defined but never used.","'Grid' is defined but never used.","'Spacer' is defined but never used.","'isError' is defined but never used.","'Center' is defined but never used.","'axios' is defined but never used.","'defaultRooms' is assigned a value but never used.","'str' is assigned a value but never used.","'today' is assigned a value but never used.","'StackDivider' is defined but never used.","'LinkOverlay' is defined but never used.","'Text' is defined but never used.","'DarkMode' is defined but never used.","'SingleRoomProps' is defined but never used.","'GetRoomById' is assigned a value but never used.","'slug' is assigned a value but never used.","'defaultRoom' is assigned a value but never used.","'FormControl' is defined but never used.","'FormLabel' is defined but never used.","'Input' is defined but never used.","'ModalFooter' is defined but never used.","'FaArrowRight' is defined but never used.","'fetchPincode' is assigned a value but never used.","'useQuery' is defined but never used.","'API_URL' is defined but never used.","react-hooks/exhaustive-deps","React Hook React.useEffect has a missing dependency: 'logoutAsync'. Either include it or remove the dependency array.","ArrayExpression",["340"],"'Box' is defined but never used.","no-useless-escape","Unnecessary escape character: \\\".","Literal","unnecessaryEscape",["341","342"],["343","344"],["345","346"],["347","348"],"'useMutation' is defined but never used.","'toggleLike' is defined but never used.","'status' is assigned a value but never used.","'API_IMAGE_CLIENT_ID' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"349","fix":"350"},{"messageId":"351","fix":"352","desc":"353"},{"messageId":"354","fix":"355","desc":"356"},{"messageId":"351","fix":"357","desc":"353"},{"messageId":"354","fix":"358","desc":"356"},{"messageId":"351","fix":"359","desc":"353"},{"messageId":"354","fix":"360","desc":"356"},{"messageId":"351","fix":"361","desc":"353"},{"messageId":"354","fix":"362","desc":"356"},"Update the dependencies array to be: [logoutAsync]",{"range":"363","text":"364"},"removeEscape",{"range":"365","text":"366"},"Remove the `\\`. This maintains the current functionality.","escapeBackslash",{"range":"367","text":"368"},"Replace the `\\` with `\\\\` to include the actual backslash character.",{"range":"369","text":"366"},{"range":"370","text":"368"},{"range":"371","text":"366"},{"range":"372","text":"368"},{"range":"373","text":"366"},{"range":"374","text":"368"},[2060,2062],"[logoutAsync]",[517,518],"",[517,517],"\\",[542,543],[542,542],[551,552],[551,551],[555,556],[555,555]]