[{"E:\\Repos\\hostel-chakra\\Hostel\\src\\index.tsx":"1","E:\\Repos\\hostel-chakra\\Hostel\\src\\reportWebVitals.ts":"2","E:\\Repos\\hostel-chakra\\Hostel\\src\\serviceWorker.ts":"3","E:\\Repos\\hostel-chakra\\Hostel\\src\\App.tsx":"4","E:\\Repos\\hostel-chakra\\Hostel\\src\\Pages\\SingleRoom.tsx":"5","E:\\Repos\\hostel-chakra\\Hostel\\src\\Pages\\ErrorPage.tsx":"6","E:\\Repos\\hostel-chakra\\Hostel\\src\\ColorModeSwitcher.tsx":"7","E:\\Repos\\hostel-chakra\\Hostel\\src\\Logo.tsx":"8","E:\\Repos\\hostel-chakra\\Hostel\\src\\Pages\\HomePage.tsx":"9","E:\\Repos\\hostel-chakra\\Hostel\\src\\Pages\\RoomsPage.tsx":"10","E:\\Repos\\hostel-chakra\\Hostel\\src\\Components\\HomeComponents\\PropertyTypeList.tsx":"11","E:\\Repos\\hostel-chakra\\Hostel\\src\\Components\\NavComponents\\SearchBar.tsx":"12","E:\\Repos\\hostel-chakra\\Hostel\\src\\Components\\NavComponents\\Navbar.tsx":"13","E:\\Repos\\hostel-chakra\\Hostel\\src\\Components\\FilterComponents\\RoomCardList.tsx":"14","E:\\Repos\\hostel-chakra\\Hostel\\src\\Components\\NavComponents\\PickRangeDay.tsx":"15","E:\\Repos\\hostel-chakra\\Hostel\\src\\Components\\HomeComponents\\PropertyType.tsx":"16","E:\\Repos\\hostel-chakra\\Hostel\\src\\Components\\NavComponents\\PopDetail.tsx":"17","E:\\Repos\\hostel-chakra\\Hostel\\src\\Components\\FilterComponents\\RoomCard.tsx":"18","E:\\Repos\\hostel-chakra\\Hostel\\src\\Components\\NavComponents\\Footer.tsx":"19","E:\\Repos\\hostel-chakra\\Hostel\\src\\Components\\SingleRoomComponents\\MyRoomBadge.tsx":"20","E:\\Repos\\hostel-chakra\\Hostel\\src\\Components\\Authentication.tsx":"21","e:\\Repos\\hostel-chakra\\Hostel\\src\\index.tsx":"22","e:\\Repos\\hostel-chakra\\Hostel\\src\\reportWebVitals.ts":"23","e:\\Repos\\hostel-chakra\\Hostel\\src\\serviceWorker.ts":"24","e:\\Repos\\hostel-chakra\\Hostel\\src\\App.tsx":"25","e:\\Repos\\hostel-chakra\\Hostel\\src\\Pages\\HomePage.tsx":"26","e:\\Repos\\hostel-chakra\\Hostel\\src\\Pages\\SingleRoom.tsx":"27","e:\\Repos\\hostel-chakra\\Hostel\\src\\Pages\\RoomsPage.tsx":"28","e:\\Repos\\hostel-chakra\\Hostel\\src\\Pages\\ErrorPage.tsx":"29","e:\\Repos\\hostel-chakra\\Hostel\\src\\Components\\NavComponents\\Footer.tsx":"30","e:\\Repos\\hostel-chakra\\Hostel\\src\\Components\\NavComponents\\SearchBar.tsx":"31","e:\\Repos\\hostel-chakra\\Hostel\\src\\Components\\NavComponents\\PickRangeDay.tsx":"32","e:\\Repos\\hostel-chakra\\Hostel\\src\\Components\\NavComponents\\Navbar.tsx":"33","e:\\Repos\\hostel-chakra\\Hostel\\src\\Components\\NavComponents\\PopDetail.tsx":"34","e:\\Repos\\hostel-chakra\\Hostel\\src\\Components\\HomeComponents\\PropertyTypeList.tsx":"35","e:\\Repos\\hostel-chakra\\Hostel\\src\\Components\\SingleRoomComponents\\MyRoomBadge.tsx":"36","e:\\Repos\\hostel-chakra\\Hostel\\src\\Components\\FilterComponents\\RoomCardList.tsx":"37","e:\\Repos\\hostel-chakra\\Hostel\\src\\Logo.tsx":"38","e:\\Repos\\hostel-chakra\\Hostel\\src\\ColorModeSwitcher.tsx":"39","e:\\Repos\\hostel-chakra\\Hostel\\src\\Components\\Authentication.tsx":"40","e:\\Repos\\hostel-chakra\\Hostel\\src\\Components\\HomeComponents\\PropertyType.tsx":"41","e:\\Repos\\hostel-chakra\\Hostel\\src\\Components\\FilterComponents\\RoomCard.tsx":"42"},{"size":862,"mtime":1613928821144,"results":"43","hashOfConfig":"44"},{"size":431,"mtime":1612286281167,"results":"45","hashOfConfig":"44"},{"size":5404,"mtime":1612286281167,"results":"46","hashOfConfig":"44"},{"size":1411,"mtime":1614226432554,"results":"47","hashOfConfig":"44"},{"size":12386,"mtime":1615243150952,"results":"48","hashOfConfig":"44"},{"size":173,"mtime":1612286281165,"results":"49","hashOfConfig":"44"},{"size":773,"mtime":1612286281164,"results":"50","hashOfConfig":"44"},{"size":614,"mtime":1612286281165,"results":"51","hashOfConfig":"44"},{"size":1187,"mtime":1613423994602,"results":"52","hashOfConfig":"44"},{"size":826,"mtime":1613605467202,"results":"53","hashOfConfig":"44"},{"size":1475,"mtime":1613423216593,"results":"54","hashOfConfig":"44"},{"size":3254,"mtime":1615243042503,"results":"55","hashOfConfig":"44"},{"size":1785,"mtime":1613653710804,"results":"56","hashOfConfig":"44"},{"size":1319,"mtime":1615243153335,"results":"57","hashOfConfig":"44"},{"size":3977,"mtime":1613608465743,"results":"58","hashOfConfig":"44"},{"size":978,"mtime":1614011913250,"results":"59","hashOfConfig":"44"},{"size":3126,"mtime":1613423216595,"results":"60","hashOfConfig":"44"},{"size":3026,"mtime":1615243151987,"results":"61","hashOfConfig":"44"},{"size":690,"mtime":1613435526288,"results":"62","hashOfConfig":"44"},{"size":1847,"mtime":1613599095669,"results":"63","hashOfConfig":"44"},{"size":6357,"mtime":1613957227338,"results":"64","hashOfConfig":"44"},{"size":862,"mtime":1612286281166,"results":"65","hashOfConfig":"66"},{"size":431,"mtime":1612286281167,"results":"67","hashOfConfig":"66"},{"size":5404,"mtime":1612286281167,"results":"68","hashOfConfig":"66"},{"size":1405,"mtime":1613435563432,"results":"69","hashOfConfig":"66"},{"size":1187,"mtime":1613423994602,"results":"70","hashOfConfig":"66"},{"size":11934,"mtime":1613608974661,"results":"71","hashOfConfig":"66"},{"size":826,"mtime":1613605467202,"results":"72","hashOfConfig":"66"},{"size":173,"mtime":1612286281165,"results":"73","hashOfConfig":"66"},{"size":690,"mtime":1613435526288,"results":"74","hashOfConfig":"66"},{"size":3214,"mtime":1613608551630,"results":"75","hashOfConfig":"66"},{"size":3977,"mtime":1613608465743,"results":"76","hashOfConfig":"66"},{"size":1768,"mtime":1613606848363,"results":"77","hashOfConfig":"66"},{"size":3126,"mtime":1613423216595,"results":"78","hashOfConfig":"66"},{"size":1475,"mtime":1613423216593,"results":"79","hashOfConfig":"66"},{"size":1847,"mtime":1613599095669,"results":"80","hashOfConfig":"66"},{"size":1318,"mtime":1613606682010,"results":"81","hashOfConfig":"66"},{"size":614,"mtime":1612286281165,"results":"82","hashOfConfig":"66"},{"size":773,"mtime":1612286281164,"results":"83","hashOfConfig":"66"},{"size":335,"mtime":1613608013812,"results":"84","hashOfConfig":"66"},{"size":960,"mtime":1613423216593,"results":"85","hashOfConfig":"66"},{"size":3020,"mtime":1613608660633,"results":"86","hashOfConfig":"66"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"89"},"13hiuhw",{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"89"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"89"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"96","usedDeprecatedRules":"89"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"99","usedDeprecatedRules":"89"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"89"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"89"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"89"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"108","usedDeprecatedRules":"89"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"89"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"113","usedDeprecatedRules":"89"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"89"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"120","messages":"121","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"122","usedDeprecatedRules":"89"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"125","usedDeprecatedRules":"89"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"128","usedDeprecatedRules":"89"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"131","messages":"132","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"89"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"135","usedDeprecatedRules":"89"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"138","usedDeprecatedRules":"89"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"99iabf",{"filePath":"141","messages":"142","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"143","messages":"144","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"145","messages":"146","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"147","messages":"148","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"149","messages":"150","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"151","messages":"152","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"153","messages":"154","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"155","messages":"156","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"157","messages":"158","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"159","messages":"160","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"161","messages":"162","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"163","messages":"164","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"165","messages":"166","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"167","messages":"168","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"169","messages":"170","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"171","messages":"172","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"173","messages":"174","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"175","messages":"176","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"177","messages":"178","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"179","messages":"180","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"E:\\Repos\\hostel-chakra\\Hostel\\src\\index.tsx",[],["181","182"],"E:\\Repos\\hostel-chakra\\Hostel\\src\\reportWebVitals.ts",[],"E:\\Repos\\hostel-chakra\\Hostel\\src\\serviceWorker.ts",[],"E:\\Repos\\hostel-chakra\\Hostel\\src\\App.tsx",["183"],"import * as React from \"react\"\r\nimport {\r\n  ChakraProvider,\r\n  Box,\r\n  extendTheme,\r\n} from \"@chakra-ui/react\"\r\nimport { HashRouter, Route, Switch } from 'react-router-dom'\r\nimport HomePage from \"./Pages/HomePage\";\r\nimport SingleRoom from \"./Pages/SingleRoom\";\r\nimport ErrorPage from \"./Pages/ErrorPage\";\r\nimport RoomsPage from \"./Pages/RoomsPage\";\r\nimport \"./App.css\";\r\nimport { mode } from \"@chakra-ui/theme-tools\";\r\nimport \"slick-carousel/slick/slick.css\";\r\nimport \"slick-carousel/slick/slick-theme.css\";\r\nimport Footer from \"./Components/NavComponents/Footer\";\r\n// theme.components.Button.baseStyle.borderRadius = \"0\";\r\n\r\nconst myTheme = extendTheme({\r\n  components: {\r\n    Button: {\r\n      defaultProps: {\r\n      }\r\n    },\r\n  }\r\n})\r\n\r\n\r\nexport const App = () => (\r\n  <HashRouter basename=\"/\">\r\n    <ChakraProvider theme={myTheme}>\r\n\r\n      <Box d=\"flex\" flexDir=\"column\" minH=\"100vh\">\r\n        <Box flex=\"1\">\r\n          <Switch>\r\n            <Route exact path=\"/\" component={HomePage} />\r\n            <Route exact path=\"/room/:slug\" component={SingleRoom} />\r\n            <Route exact path=\"/rooms/:slug\" component={RoomsPage} />\r\n            <Route exact path=\"/rooms/\" component={RoomsPage} />\r\n            <Route component={ErrorPage} />\r\n          </Switch>\r\n        </Box>\r\n        <Box flexShrink={0}>\r\n          <Footer />\r\n        </Box>\r\n      </Box>\r\n\r\n    </ChakraProvider>\r\n  </HashRouter>\r\n)\r\n","E:\\Repos\\hostel-chakra\\Hostel\\src\\Pages\\SingleRoom.tsx",["184","185","186","187","188"],"import { Box, Button, Divider, Grid, GridItem, Spacer, Image, Popover, PopoverContent, PopoverTrigger, HStack, Flex, VStack, Avatar } from '@chakra-ui/react';\r\nimport { userInfo } from 'os';\r\nimport React from 'react'\r\nimport { BsStarFill, BsStar, BsHeart } from 'react-icons/bs';\r\nimport { Link, useParams } from 'react-router-dom';\r\nimport Navbar from '../Components/NavComponents/Navbar';\r\nimport PickRangeDay from '../Components/NavComponents/PickRangeDay';\r\nimport PopDetail from '../Components/NavComponents/PopDetail';\r\nimport SearchBar from '../Components/NavComponents/SearchBar';\r\nimport MyRoomBadge, { defaultRoomBadges } from '../Components/SingleRoomComponents/MyRoomBadge';\r\n\r\ntype SlugProps = {\r\n    slug: string;\r\n}\r\n\r\ninterface RoomType extends RoomCardType {\r\n    images: string[];\r\n    roomIntroduction: string;\r\n    roomBadges?: RoomBadge[];\r\n}\r\n\r\ntype SingleRoomProps = {\r\n    room: RoomType;\r\n}\r\n\r\ntype OwnerInfo = {\r\n    id: string;\r\n    name: string;\r\n}\r\n\r\ntype BookingInfo = {\r\n    roomId?: string;\r\n    userId?: string;\r\n    bookFromDate?: Date;\r\n    bookToDate?: Date;\r\n    children: number;\r\n    adult: number;\r\n    roomQuant: number;\r\n}\r\n\r\nconst GetRoomById = (id: string) => {\r\n}\r\n\r\nconst SingleRoom: React.FC = () => {\r\n    const { slug } = useParams<SlugProps>();\r\n    const [bookInfo, setBookInfo] = React.useState<BookingInfo>({ adult: 1, children: 0, roomQuant: 1 });\r\n    const [owner, setOwner] = React.useState<OwnerInfo>();\r\n\r\n    React.useEffect(() => {\r\n        setOwner(defaultOwner);\r\n    }, [])\r\n\r\n    const updateDate = (from?: Date, to?: Date) => {\r\n        setBookInfo(s => ({\r\n            ...s,\r\n            bookFromDate: from,\r\n            bookToDate: to\r\n        }));\r\n    }\r\n\r\n    const updatePeople = (adult: number, children: number, room: number) => {\r\n        setBookInfo((s) => ({\r\n            ...s,\r\n            adult: adult,\r\n            children: children,\r\n            roomQuant: room\r\n        }));\r\n    }\r\n\r\n    const room = defaultRoom;\r\n\r\n    return (\r\n        <Box mx=\"10%\" mt=\"5\">\r\n            <Navbar></Navbar>\r\n            <Divider my=\"5\" />\r\n\r\n            {/* title */}\r\n            <Box as=\"h2\" fontSize=\"3xl\" fontWeight=\"semibold\">{room.name}</Box>\r\n\r\n            {/* rating, location, like button */}\r\n            <Box d=\"flex\" mt=\"1\">\r\n                <Box d=\"flex\" alignItems=\"center\">\r\n                    {Array(5).fill(\"\").map((_, i) => {\r\n                        return (i < room.totalReview - 1 ? <BsStarFill colorRendering=\"teal.400\" /> : <BsStar />)\r\n                    })}\r\n\r\n                    <Box as=\"span\" ml=\"2\" color=\"gray.500\">{room.totalReview} reviews</Box>\r\n\r\n                    <Box mx=\"4\">&bull;</Box>\r\n\r\n                    <Link to=\"/\">\r\n                        <Button variant=\"link\">{room.location}</Button>\r\n                    </Link>\r\n                </Box>\r\n\r\n                <Spacer />\r\n\r\n                <Button variant=\"ghost\" size=\"sm\" leftIcon={<BsHeart />}>Like</Button>\r\n            </Box>\r\n\r\n            {/* image display */}\r\n            <Box borderRadius=\"lg\" overflow=\"hidden\" mt=\"4\">\r\n                <Grid gap=\"2\" h=\"40%\" maxH=\"450px\" objectFit=\"cover\"\r\n                    templateRows=\"repeat(2, 1fr)\"\r\n                    templateColumns=\"repeat(4, 1fr)\">\r\n\r\n                    {/* <GridItem colSpan={2} rowSpan={2} overflow=\"hidden\" >\r\n                        <Image src={room.images[0]} h=\"auto\" height=\"100%\" w=\"100%\" objectFit=\"cover\"></Image>\r\n                    </GridItem> */}\r\n\r\n                    {room.images.map((image, i) => {\r\n                        return (\r\n                            <GridItem colSpan={i === 0 ? 2 : 1} rowSpan={i === 0 ? 2 : 1} overflow=\"hidden\" >\r\n                                <Image src={image} h=\"auto\" height=\"100%\" w=\"100%\" objectFit=\"cover\" loading=\"lazy\"></Image>\r\n                            </GridItem>\r\n                        )\r\n                    })}\r\n\r\n                    {/* <GridItem colSpan={1} rowSpan={1} overflow=\"hidden\" >\r\n                        <Image src={room.images[1]} h=\"auto\" height=\"100%\" w=\"100%\" objectFit=\"cover\"></Image>\r\n                    </GridItem>\r\n                    <GridItem colSpan={1} rowSpan={1} overflow=\"hidden\" >\r\n                        <Image src={room.images[2]} h=\"auto\" height=\"100%\" w=\"100%\" objectFit=\"cover\"></Image>\r\n                    </GridItem>\r\n                    <GridItem colSpan={1} rowSpan={1} overflow=\"hidden\" >\r\n                        <Image src={room.images[3]} h=\"auto\" height=\"100%\" w=\"100%\" objectFit=\"cover\"></Image>\r\n                    </GridItem>\r\n                    <GridItem colSpan={1} rowSpan={1} overflow=\"hidden\" >\r\n                        <Image src={room.images[4]} h=\"auto\" height=\"100%\" w=\"100%\" objectFit=\"cover\"></Image>\r\n                    </GridItem> */}\r\n                </Grid>\r\n            </Box>\r\n\r\n            {/* info  */}\r\n            <Box mt=\"4\" d={[\"flex\", \"flex\", \"flex\", \"block\"]} flexDir=\"column-reverse\">\r\n                {/* floating form */}\r\n                <Box w={[\"100%\", \"100%\", \"100%\", \"35%\"]} boxShadow=\"2xl\" mt={{ base: \"4\", lg: \"0\" }} top=\"30%\" float={{ lg: \"right\" }} position={{ lg: \"sticky\" }}\r\n                    borderRadius=\"lg\"\r\n                    display=\"inline-flex\" flexDir=\"column\" zIndex={1} borderWidth=\"thin\"\r\n                    p=\"4\" alignContent=\"center\" justifyContent=\"center\">\r\n                    <Flex alignItems=\"baseline\">\r\n                        <Box as=\"h2\" fontFamily=\"mono\" fontSize=\"3xl\" fontWeight=\"semibold\">{room.formattedPrice}\r\n                        </Box>\r\n                        <Box as=\"span\" color=\"gray.500\">\r\n                            /per night\r\n                        </Box>\r\n                        <Spacer />\r\n                        <Box d=\"flex\" alignItems=\"center\">\r\n                            {Array(5).fill(\"\").map((_, i) => {\r\n                                return (i < room.totalReview - 1 ? <BsStarFill colorRendering=\"teal.400\" /> : <BsStar />)\r\n                            })}\r\n                        </Box>\r\n                    </Flex>\r\n\r\n                    <Box mt=\"4\">\r\n                        <Popover closeOnBlur={true}>\r\n                            <PopoverTrigger>\r\n                                <HStack spacing=\"0\">\r\n                                    <Button variant=\"outline\" borderTopLeftRadius=\"lg\"\r\n                                        size=\"lg\" w=\"100%\"\r\n                                        _focusVisible={{ border: \"0\" }}\r\n                                        borderRadius=\"0\">\r\n                                        {bookInfo?.bookFromDate?.toDateString() || \"From\"}\r\n                                    </Button>\r\n                                    <Button variant=\"outline\" borderTopRightRadius=\"lg\"\r\n                                        size=\"lg\" w=\"100%\"\r\n                                        _focusVisible={{ border: \"0\" }}\r\n                                        borderRadius=\"0\">\r\n                                        {bookInfo?.bookToDate?.toDateString() || \"To\"}\r\n                                    </Button>\r\n                                </HStack>\r\n                            </PopoverTrigger>\r\n                            <PopoverContent flexWrap=\"nowrap\" alignItems=\"center\" w={[\"100%\", \"100%\", \"200%\", \"200%\"]} left={[\"0%\", \"0%\", \"-50%\", \"-50%\"]} borderRadius=\"0\" bg=\"inherit\" bgColor=\"rgba(66, 153, 225, 0.8)\">\r\n                                <PickRangeDay updateDate={updateDate} />\r\n                            </PopoverContent>\r\n                        </Popover>\r\n                        <Popover>\r\n                            <PopoverTrigger>\r\n                                <Button variant=\"outline\" w=\"100%\" size=\"lg\" borderRadius=\"0\" borderBottomRadius=\"lg\" px=\"2\">{bookInfo.adult + ' adult(s) - ' + bookInfo.children + ' child(s) - ' + bookInfo.roomQuant + ' room(s)'}</Button>\r\n                            </PopoverTrigger>\r\n                            <PopoverContent flexWrap=\"nowrap\" borderRadius=\"0\" bg=\"inherit\" bgColor=\"rgba(66, 153, 225, 0.8)\">\r\n                                <PopDetail updatePeople={updatePeople} adult={bookInfo.adult} bedRoom={bookInfo.roomQuant} children={bookInfo.children}></PopDetail>\r\n                            </PopoverContent>\r\n                        </Popover>\r\n                    </Box>\r\n\r\n                    <Button variant=\"solid\" colorScheme=\"green\" alignSelf=\"stretch\" mt=\"4\">Check for reservation</Button>\r\n                </Box>\r\n\r\n                {/* Detail information about this room */}\r\n                <Box height=\"1000px\" w={[\"100%\", \"100%\", \"100%\", \"60%\"]}>\r\n                    {/* name, avatar */}\r\n                    <Flex alignItems=\"center\">\r\n                        <VStack alignItems=\"start\">\r\n                            <Box as=\"h1\" fontSize=\"2xl\" fontWeight=\"semibold\" >{\"Owner: \" + owner?.name}</Box>\r\n                            <HStack>\r\n                                {room.services.map(s => {\r\n                                    return (\r\n                                        <Box\r\n                                            color=\"gray.500\"\r\n                                            fontWeight=\"semibold\"\r\n                                            letterSpacing=\"wide\"\r\n                                            fontSize=\"xs\"\r\n                                            textTransform=\"uppercase\"\r\n                                            ml=\"2\"\r\n                                            isTruncated\r\n                                        >{s} {room.services[room.services.length - 1] !== s && <>&bull;</>} </Box>\r\n                                    )\r\n                                })}\r\n                            </HStack>\r\n                        </VStack>\r\n\r\n                        <Spacer />\r\n                        <Avatar name={owner?.name}></Avatar>\r\n                    </Flex>\r\n                    <Divider my=\"3\" />\r\n\r\n                    {/* room badges */}\r\n                    {room.roomBadges?.map((b, i) => {\r\n                        return <MyRoomBadge id={b.id} key={i}></MyRoomBadge>\r\n                    })}\r\n                    <Divider my=\"3\" />\r\n\r\n                    {/* room introduction */}\r\n                    <Box as=\"h5\" fontWeight=\"semibold\" fontSize=\"2xl\">More about room</Box>\r\n                    <Box as=\"p\">{room.roomIntroduction}</Box>\r\n                    <Divider my=\"3\" />\r\n\r\n                    {/* another datepicker here */}\r\n                    <Box w=\"100%\" display={{ base: \"none\", sm: \"block\", md: \"block\" }}>\r\n                        <PickRangeDay updateDate={updateDate}></PickRangeDay>\r\n                    </Box>\r\n                </Box>\r\n            </Box>\r\n\r\n            <Box height=\"1000px\" bg=\"yellow.600\" mt=\"4\"></Box>\r\n        </Box>\r\n    )\r\n}\r\n\r\nconst badges: RoomBadge[] = defaultRoomBadges;\r\n\r\nconst defaultRoom: RoomType = {\r\n    id: \"random-id-12321\",\r\n    name: \"Crystal palace\",\r\n    thumbnailUrl: \"https://bit.ly/2Z4KKcF\",\r\n    images: [\"https://picsum.photos/1100/1000\", \"https://picsum.photos/700/1200\",\r\n        \"https://picsum.photos/1000/1000\", \"https://picsum.photos/1200/1000\",\r\n        \"https://picsum.photos/1100/900\"],\r\n    thumbnailAlt: \"rear view house with pool\",\r\n    roomIntroduction: \"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Vestibulum congue eros id ligula porta, id fermentum ligula semper. Pellentesque eget pulvinar justo. Phasellus eu risus dolor. Aliquam mollis urna vel lectus ornare, nec ultricies augue gravida. Nunc dignissim diam vel massa cursus condimentum. Nulla pharetra molestie nunc, ac hendrerit felis posuere a. Sed finibus magna ut nibh luctus, ac dapibus mauris cursus. Sed eu porttitor lacus. Nulla venenatis erat quis orci consectetur efficitur. Phasellus nisl nisl, luctus et sapien nec, dictum feugiat felis. Nam nec ullamcorper mi, eu vulputate justo. Nullam nibh ipsum, dictum at commodo nec, molestie et ipsum. Aliquam sit amet tincidunt augue, sit amet consectetur mi.\",\r\n    description: \"Best place in town\",\r\n    location: \"Dark side, the moon\",\r\n    totalReview: 4,\r\n    totalStar: 23,\r\n    formattedPrice: \"2021.00$\",\r\n    services: [\"Pet\", \"Kitchen\", \"Breakfast\", \"Wifi\"],\r\n    roomBadges: badges,\r\n}\r\n\r\n\r\n\r\nconst defaultOwner: OwnerInfo = {\r\n    id: \"1234\",\r\n    name: \"Ivanov Ivan Ivanovich\",\r\n}\r\n\r\nexport default SingleRoom;","E:\\Repos\\hostel-chakra\\Hostel\\src\\Pages\\ErrorPage.tsx",[],"E:\\Repos\\hostel-chakra\\Hostel\\src\\ColorModeSwitcher.tsx",[],"E:\\Repos\\hostel-chakra\\Hostel\\src\\Logo.tsx",[],"E:\\Repos\\hostel-chakra\\Hostel\\src\\Pages\\HomePage.tsx",["189"],"import React from 'react'\r\nimport PropertyTypeList from '../Components/HomeComponents/PropertyTypeList'\r\nimport SearchBar from '../Components/NavComponents/SearchBar';\r\nimport { Box, DarkMode } from \"@chakra-ui/react\"\r\nimport BG from \"../Images/HomeBG.webp\";\r\nimport Navbar from '../Components/NavComponents/Navbar';\r\n\r\nconst px = \"10%\";\r\n\r\nconst HomePage = () => {\r\n    return (\r\n        <Box>\r\n            <Box minH={[\"50vh\", \"75vh\", \"85vh\"]} style={{ background: \"url('\" + BG + \"') center/cover no-repeat\" }}>\r\n                <Box px={px} pt=\"5\">\r\n                    <Navbar></Navbar>\r\n                    <SearchBar />\r\n                    <Box as=\"h1\" fontFamily=\"mono\" opacity=\"0.5\" fontWeight=\"bold\" fontSize={[\"3xl\", \"4xl\", \"6xl\", \"8xl\"]}\r\n                        position=\"relative\" mt={[\"5vh\", \"10vh\", \"20vh\", \"30vh\"]}>EXPLORE AROUND</Box>\r\n                </Box>\r\n            </Box>\r\n            <Box px={px} mt=\"10\">\r\n                <Box as=\"h2\" fontWeight=\"bold\" fontSize=\"4xl\" mb=\"5\">\r\n                    LIVE ANYWHERE\r\n                </Box>\r\n                <PropertyTypeList></PropertyTypeList>\r\n            </Box>\r\n        </Box>\r\n    )\r\n}\r\nexport default HomePage;","E:\\Repos\\hostel-chakra\\Hostel\\src\\Pages\\RoomsPage.tsx",[],"E:\\Repos\\hostel-chakra\\Hostel\\src\\Components\\HomeComponents\\PropertyTypeList.tsx",["190","191","192"],"import { Flex, Grid, Spacer } from '@chakra-ui/react';\r\nimport React from 'react'\r\nimport Slider, { Settings } from 'react-slick';\r\nimport PropertyType from './PropertyType';\r\nimport \"slick-carousel/slick/slick.css\";\r\nimport \"slick-carousel/slick/slick-theme.css\";\r\n\r\nvar settings: Settings = {\r\n    dots: true,\r\n    infinite: true,\r\n    speed: 500,\r\n    slidesToShow: 4,\r\n    slidesToScroll: 1,\r\n    initialSlide: 0,\r\n    swipeToSlide: true,\r\n    responsive: [\r\n        {\r\n            breakpoint: 1024,\r\n            settings: {\r\n                slidesToShow: 4,\r\n                slidesToScroll: 1,\r\n                infinite: true,\r\n                dots: true\r\n            }\r\n        },\r\n        {\r\n            breakpoint: 600,\r\n            settings: {\r\n                slidesToShow: 3,\r\n                slidesToScroll: 1,\r\n                initialSlide: 2\r\n            }\r\n        },\r\n        {\r\n            breakpoint: 480,\r\n            settings: {\r\n                slidesToShow: 1,\r\n                slidesToScroll: 1\r\n            }\r\n        }\r\n    ]\r\n};\r\n\r\nconst PropertyTypeList = () => {\r\n    return (\r\n        <div>\r\n            <Slider {...settings}>\r\n                <PropertyType></PropertyType>\r\n                <PropertyType></PropertyType>\r\n                <PropertyType></PropertyType>\r\n                <PropertyType></PropertyType>\r\n                <PropertyType></PropertyType>\r\n            </Slider>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default PropertyTypeList;","E:\\Repos\\hostel-chakra\\Hostel\\src\\Components\\NavComponents\\SearchBar.tsx",[],"E:\\Repos\\hostel-chakra\\Hostel\\src\\Components\\NavComponents\\Navbar.tsx",[],"E:\\Repos\\hostel-chakra\\Hostel\\src\\Components\\FilterComponents\\RoomCardList.tsx",[],"E:\\Repos\\hostel-chakra\\Hostel\\src\\Components\\NavComponents\\PickRangeDay.tsx",["193"],"import { Box, Button, Center, Flex } from '@chakra-ui/react';\r\nimport React from 'react'\r\nimport DayPicker from 'react-day-picker';\r\nimport { DateUtils } from \"react-day-picker\";\r\nimport 'react-day-picker/lib/style.css';\r\ntype PickRangeDayState = {\r\n    from?: Date;\r\n    to?: Date;\r\n    enteredTo?: Date; // keep track of the last day for mouseEnter\r\n}\r\n\r\ntype PickRangeDayProps = {\r\n    from?: Date,\r\n    to?: Date,\r\n    updateDate: (from?: Date, to?: Date) => void,\r\n}\r\n\r\nconst defaultDate: PickRangeDayState = {\r\n    from: undefined,\r\n    to: undefined,\r\n    enteredTo: undefined\r\n}\r\n\r\nconst PickRangeDay: React.FC<PickRangeDayProps> = ({ from, to, updateDate }) => {\r\n    const [state, setState] = React.useState<PickRangeDayState>({ from: from, to: to });\r\n\r\n    React.useEffect(() => {\r\n        updateDate(state.from, state.to);\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [state.from, state.to]);\r\n\r\n    const isSelectingFirstDay = (day: Date, from?: Date, to?: Date) => {\r\n        const isBeforeFirstDay = from && DateUtils.isDayBefore(day, from);\r\n        const isRangeSelected = from && to;\r\n        return !from || isBeforeFirstDay || isRangeSelected;\r\n    }\r\n\r\n    const handleDayMouseEnter = (day: Date) => {\r\n        const { from, to } = state;\r\n        if (!isSelectingFirstDay(day, from, to)) {\r\n            setState(s => ({\r\n                ...s,\r\n                enteredTo: day,\r\n            }));\r\n        }\r\n    }\r\n\r\n    const handleDayClick = (day: Date) => {\r\n        const today = new Date(Date.now());\r\n        if (day < today) return;\r\n        const { from, to } = state;\r\n        if (from && to && day >= from && day <= to) {\r\n            handleResetClick();\r\n            return;\r\n        }\r\n        if (isSelectingFirstDay(day, from, to)) {\r\n            setState({\r\n                from: day,\r\n                to: undefined,\r\n                enteredTo: undefined,\r\n            });\r\n        } else {\r\n            setState(s => ({\r\n                ...s,\r\n                to: day,\r\n                enteredTo: day,\r\n            }));\r\n        }\r\n    }\r\n\r\n    const handleResetClick = () => {\r\n        setState(defaultDate);\r\n    }\r\n\r\n    const selected = [state.from, { from: state.from, to: state.enteredTo }];\r\n\r\n    const disabled = {\r\n        before: new Date(Date.now())\r\n    }\r\n\r\n    const modifiers = {\r\n        start: state.from,\r\n        end: state.enteredTo,\r\n    }\r\n\r\n    const modifierStyles = {\r\n        start: {\r\n            backgroundColor: '#19456b',\r\n        },\r\n        end: {\r\n            backgroundColor: '#19456b',\r\n        },\r\n        disable: {\r\n            backgroundColor: '#ffffff',\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Box style={{ backdropFilter: \"blur(5px)\" }} alignSelf=\"stretch\">\r\n            <Flex alignItems=\"stretch\" flexDir=\"column\">\r\n                <DayPicker\r\n                    modifiersStyles={modifierStyles}\r\n                    numberOfMonths={2}\r\n                    fromMonth={state.from}\r\n                    modifiers={modifiers as any}\r\n                    onDayClick={handleDayClick}\r\n                    disabledDays={disabled}\r\n                    onDayMouseEnter={handleDayMouseEnter}\r\n                    selectedDays={selected as any}>\r\n                </DayPicker>\r\n            </Flex>\r\n            <Flex justifyContent=\"center\" alignItems=\"center\">\r\n                {!state.from && !state.to && 'Please select the first day.'}\r\n                {state.from && !state.to && 'Please select the last day.'}\r\n                {state.from &&\r\n                    state.to &&\r\n                    `Selected from ${state.from.toLocaleDateString()} to\r\n                ${state.to.toLocaleDateString()}`}{' '}\r\n                {state.from && state.to && (\r\n                    <Button onClick={handleResetClick}>\r\n                        Reset\r\n                    </Button>\r\n                )}\r\n            </Flex>\r\n        </Box>\r\n    )\r\n}\r\n\r\nexport default PickRangeDay;","E:\\Repos\\hostel-chakra\\Hostel\\src\\Components\\HomeComponents\\PropertyType.tsx",["194","195"],"import { Box, Flex, Image, Square, VStack } from '@chakra-ui/react';\r\nimport React from 'react'\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst PropertyType = () => {\r\n    return (\r\n        <Link to=\"/rooms\">\r\n            <VStack alignItems=\"start\" p=\"4\">\r\n                <Box maxW=\"sm\" maxH=\"sm\">\r\n                    <Image width=\"inherit\" height=\"inherit\" src=\"https://picsum.photos/1100/1000?random=1\" objectFit=\"cover\"></Image>\r\n                </Box>\r\n\r\n                <Box\r\n                    mt=\"1\"\r\n                    fontWeight=\"semibold\"\r\n                    as=\"h4\"\r\n                    lineHeight=\"tight\"\r\n                    isTruncated\r\n                >\r\n                    Apartment\r\n            </Box>\r\n                <Box>\r\n                    <Box as=\"span\" color=\"gray.500\" fontSize=\"md\">\r\n                        100+ rooms\r\n          </Box>\r\n                </Box>\r\n            </VStack>\r\n        </Link>\r\n    )\r\n}\r\n\r\nexport default PropertyType;","E:\\Repos\\hostel-chakra\\Hostel\\src\\Components\\NavComponents\\PopDetail.tsx",["196","197"],"import { Box, Flex, VStack, Text, Spacer, Square, Button, StackDivider } from '@chakra-ui/react';\r\nimport React from 'react';\r\n\r\ntype PopDetailState = {\r\n    adult: number;\r\n    children: number;\r\n    bedRoom: number;\r\n}\r\n\r\ninterface PopDetailProps extends PopDetailState {\r\n    updatePeople: (adult: number, children: number, room: number) => void;\r\n}\r\n\r\nconst PopDetail: React.FC<PopDetailProps> = ({ adult, children, bedRoom, updatePeople }) => {\r\n    return (\r\n        <div>\r\n            <Box p=\"4\" style={{ backdropFilter: \"blur(5px)\" }}>\r\n                <VStack align=\"stretch\" spacing={4}>\r\n                    <Flex alignItems=\"center\">\r\n                        <Text mr=\"auto\" fontSize=\"md\">Adult</Text>\r\n                        <Square border=\"1px\" borderColor=\"yellow.400\">\r\n                            <Button variant=\"ghost\" borderRadius=\"0\" disabled={adult <= 1 ? true : false}\r\n                                onClick={() => updatePeople(--adult, children, bedRoom)}>-</Button>\r\n                        </Square>\r\n                        <Text mx=\"4\" fontSize=\"md\">{adult}</Text>\r\n                        <Square border=\"1px\" borderColor=\"yellow.400\">\r\n                            <Button variant=\"ghost\" borderRadius=\"0\"\r\n                                onClick={() => updatePeople(++adult, children, bedRoom)}>+</Button>\r\n                        </Square>\r\n                    </Flex>\r\n                    <Flex alignItems=\"center\">\r\n                        <Text mr=\"auto\" fontSize=\"md\">Children</Text>\r\n                        <Square border=\"1px\" borderColor=\"yellow.400\">\r\n                            <Button variant=\"ghost\" borderRadius=\"0\" disabled={children <= 0 ? true : false}\r\n                                onClick={() => updatePeople(adult, --children, bedRoom)}>-</Button>\r\n                        </Square>\r\n                        <Text mx=\"4\" fontSize=\"md\">{children}</Text>\r\n                        <Square border=\"1px\" borderColor=\"yellow.400\">\r\n                            <Button variant=\"ghost\" borderRadius=\"0\"\r\n                                onClick={() => updatePeople(adult, ++children, bedRoom)}>+</Button>\r\n                        </Square>\r\n                    </Flex>\r\n                    <Flex alignItems=\"center\">\r\n                        <Text mr=\"auto\" fontSize=\"md\">Room</Text>\r\n                        <Square border=\"1px\" borderColor=\"yellow.400\">\r\n                            <Button variant=\"ghost\" borderRadius=\"0\" disabled={bedRoom <= 1 ? true : false}\r\n                                onClick={() => updatePeople(adult, children, --bedRoom)}>-</Button>\r\n                        </Square>\r\n                        <Text mx=\"4\" fontSize=\"md\">{bedRoom}</Text>\r\n                        <Square border=\"1px\" borderColor=\"yellow.400\">\r\n                            <Button variant=\"ghost\" borderRadius=\"0\"\r\n                                onClick={() => updatePeople(adult, children, ++bedRoom)}>+</Button>\r\n                        </Square>\r\n                    </Flex>\r\n                </VStack>\r\n            </Box>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default PopDetail;","E:\\Repos\\hostel-chakra\\Hostel\\src\\Components\\FilterComponents\\RoomCard.tsx",["198"],"E:\\Repos\\hostel-chakra\\Hostel\\src\\Components\\NavComponents\\Footer.tsx",[],"E:\\Repos\\hostel-chakra\\Hostel\\src\\Components\\SingleRoomComponents\\MyRoomBadge.tsx",["199"],"import { Box, Icon, HStack, VStack, Center } from '@chakra-ui/react'\r\nimport React from 'react'\r\nimport { IconType } from 'react-icons'\r\nimport { RiStarLine, RiUserStarLine } from \"react-icons/ri\";\r\n\r\ntype MyRoomBadgeProps = {\r\n    id: string;\r\n}\r\n\r\nconst MyRoomBadge: React.FC<MyRoomBadgeProps> = ({ id }) => {\r\n    const [icon, setIcon] = React.useState<IconType>();\r\n    const [badge, setBadge] = React.useState<RoomBadge>();\r\n\r\n    React.useEffect(() => {\r\n        let foundBadge = defaultRoomBadges.find(b => b.id === id);\r\n        setBadge(foundBadge);\r\n        switch (id) {\r\n            case \"1\":\r\n                setIcon(RiUserStarLine);\r\n                break;\r\n\r\n            default:\r\n                setIcon(RiStarLine);\r\n                break;\r\n        }\r\n    }, [id])\r\n\r\n    return (\r\n        <HStack alignContent=\"center\" spacing=\"0\" mb=\"2\">\r\n            <Icon d=\"flex\" boxSize=\"10\" alignItems=\"center\" justifyContent=\"center\" mt=\"2\" ml=\"2\">{icon}</Icon>\r\n            <VStack alignItems=\"start\" spacing=\"0\">\r\n                <Box as=\"h4\" fontSize=\"md\" fontWeight=\"semibold\">{badge?.title}</Box>\r\n                <Box as=\"h5\" fontSize=\"sm\" m=\"0\">{badge?.description}</Box>\r\n            </VStack>\r\n        </HStack>\r\n    )\r\n}\r\n\r\nexport const defaultRoomBadges: RoomBadge[] = [\r\n    {\r\n        id: \"1\",\r\n        title: \"Helpful owner\",\r\n        description: \"Owner provides best services\"\r\n    },\r\n    {\r\n        id: \"2\",\r\n        title: \"Extra clean\",\r\n        description: \"Owner follows our strict policies of enhanced clealiness\"\r\n    },\r\n    {\r\n        id: \"3\",\r\n        title: \"Not smoking\",\r\n        description: \"Owner does not allow smoking inside\"\r\n    },\r\n    {\r\n        id: \"4\",\r\n        title: \"Free cancelation\",\r\n        description: \"You can cancel with full refund in 24 hours\"\r\n    }\r\n]\r\n\r\nexport default MyRoomBadge;","E:\\Repos\\hostel-chakra\\Hostel\\src\\Components\\Authentication.tsx",["200","201","202","203"],"import { Box, Button, Collapse, FormControl, HStack, Input, InputGroup, PinInput, PinInputField, Select, VStack } from '@chakra-ui/react';\r\nimport { stat } from 'fs';\r\nimport React from 'react'\r\nimport { FaArrowRight } from 'react-icons/fa';\r\n\r\ntype ActionType =\r\n    | { type: \"ChangeInput\"; country?: string; phone?: string }\r\n    | { type: \"RegisterPhone\" }\r\n    | { type: \"CheckPincode\" }\r\n    | { type: \"RegisterDetail\"; name: string; email: string; password: string }\r\n    | { type: \"SetLoading\"; isLoading: boolean }\r\n    | { type: \"ResetForm\"; }\r\n\r\n\r\ntype FormState = {\r\n    country?: string;\r\n    phone?: string;\r\n    name?: string;\r\n    pincode?: string;\r\n    email?: string;\r\n    password?: string;\r\n}\r\n\r\ntype AuthenticationState = {\r\n    form?: FormState;\r\n    show: \"none\" | \"pin\" | \"detail\"\r\n    isLoading?: boolean;\r\n}\r\n\r\nconst reducer = (state: AuthenticationState, action: ActionType): AuthenticationState => {\r\n    switch (action.type) {\r\n        case \"ChangeInput\":\r\n            return {\r\n                ...state,\r\n                form: {\r\n                    ...state.form,\r\n                    country: action.country,\r\n                    phone: action.phone\r\n                }\r\n            }\r\n        case 'RegisterPhone':\r\n            return {\r\n                ...state,\r\n                show: 'pin',\r\n                isLoading: true,\r\n            }\r\n        case 'CheckPincode':\r\n            return {\r\n                ...state,\r\n                show: 'detail',\r\n                isLoading: true\r\n            }\r\n        case 'RegisterDetail':\r\n            return {\r\n                ...state,\r\n            }\r\n        case \"SetLoading\":\r\n            return {\r\n                ...state,\r\n                isLoading: action.isLoading,\r\n            }\r\n        case \"ResetForm\":\r\n            return initialState;\r\n\r\n        default:\r\n            return {\r\n                ...state,\r\n            }\r\n    }\r\n}\r\n\r\nconst getRandomInt = (min: number, max: number) => {\r\n    min = Math.ceil(min);\r\n    max = Math.floor(max);\r\n    return Math.floor(Math.random() * (max - min) + min);\r\n}\r\n\r\nconst fetchPincode = async (phone: number) => {\r\n    setTimeout(() => {\r\n        return getRandomInt(1000, 9999);\r\n    }, 1000);\r\n}\r\n\r\nconst CheckPin = (pin: string) => {\r\n    return new Promise<boolean>((resolve, reject) => {\r\n        if (pin.length === 4)\r\n            setTimeout(() => { resolve(true) }, 1000);\r\n        else\r\n            setTimeout(() => { reject(\"Pin not correct\") }, 1000);\r\n    })\r\n}\r\n\r\nconst initialState: AuthenticationState = {\r\n    form: {},\r\n    isLoading: false,\r\n    show: \"none\"\r\n}\r\n\r\nconst Authentication: React.FC = ({ }) => {\r\n    const [countries, setCountries] = React.useState<string[]>();\r\n    const [state, dispatch] = React.useReducer(reducer, initialState);\r\n\r\n    // fetching countries\r\n    React.useEffect(() => {\r\n        setCountries(defaultCountries);\r\n    }, [])\r\n\r\n    const handleRegisterButton = async (pin?: string) => {\r\n        if (state.show === \"none\") {\r\n            dispatch({ type: 'RegisterPhone' })\r\n            // send to api server\r\n            setTimeout(() => {\r\n                dispatch({ type: 'SetLoading', isLoading: false })\r\n            }, 1000)\r\n        }\r\n\r\n        else if (state.show === \"pin\" && pin !== undefined) {\r\n            dispatch({ type: 'SetLoading', isLoading: true })\r\n            CheckPin(pin).then(res => {\r\n                if (res === true) {\r\n                    console.log(\"Pincode correct\");\r\n                    dispatch({ type: 'CheckPincode' })\r\n                }\r\n                else {\r\n                    console.log(\"Pincode not correct\");\r\n                }\r\n            }).catch((r) => {\r\n                console.log(r);\r\n            }).finally(() => {\r\n                dispatch({ type: 'SetLoading', isLoading: false })\r\n            })\r\n        }\r\n    }\r\n\r\n    return (\r\n        <FormControl d=\"flex\" flexDir=\"column\">\r\n            <Select borderBottomRadius=\"0\" isDisabled={state.show !== \"none\"} onChange={(e) => dispatch({ type: 'ChangeInput', country: e.target.value, phone: state.form?.phone })} size=\"lg\" isRequired placeholder=\"Choose your country\">\r\n                {countries?.map((c, index) => {\r\n                    return <option value={c} key={index}>{c}</option>\r\n                })}\r\n            </Select>\r\n            <Input borderTopRadius=\"0\" placeholder=\"Phone number\" isDisabled={state.show !== \"none\"} size=\"lg\" value={state.form?.phone} onChange={(e) => dispatch({ type: 'ChangeInput', phone: e.target.value, country: state.form?.country })} />\r\n\r\n            <Collapse in={state.show === \"pin\"}>\r\n                <VStack spacing=\"1\" my=\"2\">\r\n                    <Box as=\"h2\"> We've sent you a verification code</Box>\r\n                    <HStack>\r\n                        <PinInput value={state.form?.pincode} isDisabled={state.isLoading} onComplete={(value) => handleRegisterButton(value)}>\r\n                            <PinInputField />\r\n                            <PinInputField />\r\n                            <PinInputField />\r\n                            <PinInputField />\r\n                        </PinInput>\r\n                    </HStack>\r\n                </VStack>\r\n            </Collapse>\r\n\r\n            <Collapse in={state.show === \"detail\"}>\r\n                <Box my=\"2\">\r\n                    <Input borderBottomRadius=\"0\" size=\"lg\" placeholder=\"Your name\" />\r\n                    <Input borderRadius=\"0\" size=\"lg\" placeholder=\"Email address\" />\r\n                    <Input borderTopRadius=\"0\" size=\"lg\" placeholder=\"Password\" />\r\n                </Box>\r\n            </Collapse>\r\n\r\n            <Button my=\"3\" w=\"30%\" rounded=\"full\" type=\"submit\" alignSelf=\"center\" isLoading={state.isLoading}\r\n                isDisabled={((state.form?.phone !== undefined && state.form?.phone !== \"\")\r\n                    && (state.form?.country != null && state.form?.country !== \"\")) ? false : true}\r\n                title=\"Next step\" onClick={() => handleRegisterButton()}\r\n            >\r\n                <FaArrowRight />\r\n            </Button>\r\n            {/* <Button alignSelf=\"flex-end\" variant=\"ghost\" colorScheme=\"red\" onClick={() => dispatch({ type: \"ResetForm\" })}>Reset</Button> */}\r\n\r\n        </FormControl>\r\n    )\r\n}\r\n\r\nconst defaultCountries: string[] = [\r\n    \"Russia\", \"Vietnam\"\r\n]\r\n\r\nexport default Authentication;","e:\\Repos\\hostel-chakra\\Hostel\\src\\index.tsx",[],"e:\\Repos\\hostel-chakra\\Hostel\\src\\reportWebVitals.ts",[],"e:\\Repos\\hostel-chakra\\Hostel\\src\\serviceWorker.ts",[],"e:\\Repos\\hostel-chakra\\Hostel\\src\\App.tsx",["204"],"e:\\Repos\\hostel-chakra\\Hostel\\src\\Pages\\HomePage.tsx",["205"],"e:\\Repos\\hostel-chakra\\Hostel\\src\\Pages\\SingleRoom.tsx",["206","207","208","209","210"],"e:\\Repos\\hostel-chakra\\Hostel\\src\\Pages\\RoomsPage.tsx",[],"e:\\Repos\\hostel-chakra\\Hostel\\src\\Pages\\ErrorPage.tsx",[],"e:\\Repos\\hostel-chakra\\Hostel\\src\\Components\\NavComponents\\Footer.tsx",[],"e:\\Repos\\hostel-chakra\\Hostel\\src\\Components\\NavComponents\\SearchBar.tsx",[],"e:\\Repos\\hostel-chakra\\Hostel\\src\\Components\\NavComponents\\PickRangeDay.tsx",["211"],"e:\\Repos\\hostel-chakra\\Hostel\\src\\Components\\NavComponents\\Navbar.tsx",[],"e:\\Repos\\hostel-chakra\\Hostel\\src\\Components\\NavComponents\\PopDetail.tsx",["212","213"],"e:\\Repos\\hostel-chakra\\Hostel\\src\\Components\\HomeComponents\\PropertyTypeList.tsx",["214","215","216"],"e:\\Repos\\hostel-chakra\\Hostel\\src\\Components\\SingleRoomComponents\\MyRoomBadge.tsx",["217"],"e:\\Repos\\hostel-chakra\\Hostel\\src\\Components\\FilterComponents\\RoomCardList.tsx",[],"e:\\Repos\\hostel-chakra\\Hostel\\src\\Logo.tsx",[],"e:\\Repos\\hostel-chakra\\Hostel\\src\\ColorModeSwitcher.tsx",[],"e:\\Repos\\hostel-chakra\\Hostel\\src\\Components\\Authentication.tsx",[],"e:\\Repos\\hostel-chakra\\Hostel\\src\\Components\\HomeComponents\\PropertyType.tsx",["218","219"],"e:\\Repos\\hostel-chakra\\Hostel\\src\\Components\\FilterComponents\\RoomCard.tsx",["220"],{"ruleId":"221","replacedBy":"222"},{"ruleId":"223","replacedBy":"224"},{"ruleId":"225","severity":1,"message":"226","line":13,"column":10,"nodeType":"227","messageId":"228","endLine":13,"endColumn":14},{"ruleId":"225","severity":1,"message":"229","line":2,"column":10,"nodeType":"227","messageId":"228","endLine":2,"endColumn":18},{"ruleId":"225","severity":1,"message":"230","line":9,"column":8,"nodeType":"227","messageId":"228","endLine":9,"endColumn":17},{"ruleId":"225","severity":1,"message":"231","line":22,"column":6,"nodeType":"227","messageId":"228","endLine":22,"endColumn":21},{"ruleId":"225","severity":1,"message":"232","line":41,"column":7,"nodeType":"227","messageId":"228","endLine":41,"endColumn":18},{"ruleId":"225","severity":1,"message":"233","line":45,"column":13,"nodeType":"227","messageId":"228","endLine":45,"endColumn":17},{"ruleId":"225","severity":1,"message":"234","line":4,"column":15,"nodeType":"227","messageId":"228","endLine":4,"endColumn":23},{"ruleId":"225","severity":1,"message":"235","line":1,"column":10,"nodeType":"227","messageId":"228","endLine":1,"endColumn":14},{"ruleId":"225","severity":1,"message":"236","line":1,"column":16,"nodeType":"227","messageId":"228","endLine":1,"endColumn":20},{"ruleId":"225","severity":1,"message":"237","line":1,"column":22,"nodeType":"227","messageId":"228","endLine":1,"endColumn":28},{"ruleId":"225","severity":1,"message":"238","line":1,"column":23,"nodeType":"227","messageId":"228","endLine":1,"endColumn":29},{"ruleId":"225","severity":1,"message":"235","line":1,"column":15,"nodeType":"227","messageId":"228","endLine":1,"endColumn":19},{"ruleId":"225","severity":1,"message":"239","line":1,"column":28,"nodeType":"227","messageId":"228","endLine":1,"endColumn":34},{"ruleId":"225","severity":1,"message":"237","line":1,"column":35,"nodeType":"227","messageId":"228","endLine":1,"endColumn":41},{"ruleId":"225","severity":1,"message":"240","line":1,"column":59,"nodeType":"227","messageId":"228","endLine":1,"endColumn":71},{"ruleId":"225","severity":1,"message":"241","line":6,"column":7,"nodeType":"227","messageId":"228","endLine":6,"endColumn":32},{"ruleId":"225","severity":1,"message":"238","line":1,"column":37,"nodeType":"227","messageId":"228","endLine":1,"endColumn":43},{"ruleId":"225","severity":1,"message":"242","line":1,"column":61,"nodeType":"227","messageId":"228","endLine":1,"endColumn":71},{"ruleId":"225","severity":1,"message":"243","line":2,"column":10,"nodeType":"227","messageId":"228","endLine":2,"endColumn":14},{"ruleId":"225","severity":1,"message":"244","line":78,"column":7,"nodeType":"227","messageId":"228","endLine":78,"endColumn":19},{"ruleId":"245","severity":1,"message":"246","line":99,"column":35,"nodeType":"247","messageId":"248","endLine":99,"endColumn":38},{"ruleId":"225","severity":1,"message":"226","line":13,"column":10,"nodeType":"227","messageId":"228","endLine":13,"endColumn":14},{"ruleId":"225","severity":1,"message":"234","line":4,"column":15,"nodeType":"227","messageId":"228","endLine":4,"endColumn":23},{"ruleId":"225","severity":1,"message":"229","line":2,"column":10,"nodeType":"227","messageId":"228","endLine":2,"endColumn":18},{"ruleId":"225","severity":1,"message":"230","line":9,"column":8,"nodeType":"227","messageId":"228","endLine":9,"endColumn":17},{"ruleId":"225","severity":1,"message":"231","line":22,"column":6,"nodeType":"227","messageId":"228","endLine":22,"endColumn":21},{"ruleId":"225","severity":1,"message":"232","line":41,"column":7,"nodeType":"227","messageId":"228","endLine":41,"endColumn":18},{"ruleId":"225","severity":1,"message":"233","line":45,"column":13,"nodeType":"227","messageId":"228","endLine":45,"endColumn":17},{"ruleId":"225","severity":1,"message":"238","line":1,"column":23,"nodeType":"227","messageId":"228","endLine":1,"endColumn":29},{"ruleId":"225","severity":1,"message":"237","line":1,"column":35,"nodeType":"227","messageId":"228","endLine":1,"endColumn":41},{"ruleId":"225","severity":1,"message":"240","line":1,"column":59,"nodeType":"227","messageId":"228","endLine":1,"endColumn":71},{"ruleId":"225","severity":1,"message":"235","line":1,"column":10,"nodeType":"227","messageId":"228","endLine":1,"endColumn":14},{"ruleId":"225","severity":1,"message":"236","line":1,"column":16,"nodeType":"227","messageId":"228","endLine":1,"endColumn":20},{"ruleId":"225","severity":1,"message":"237","line":1,"column":22,"nodeType":"227","messageId":"228","endLine":1,"endColumn":28},{"ruleId":"225","severity":1,"message":"238","line":1,"column":37,"nodeType":"227","messageId":"228","endLine":1,"endColumn":43},{"ruleId":"225","severity":1,"message":"235","line":1,"column":15,"nodeType":"227","messageId":"228","endLine":1,"endColumn":19},{"ruleId":"225","severity":1,"message":"239","line":1,"column":28,"nodeType":"227","messageId":"228","endLine":1,"endColumn":34},{"ruleId":"225","severity":1,"message":"241","line":6,"column":7,"nodeType":"227","messageId":"228","endLine":6,"endColumn":32},"no-native-reassign",["249"],"no-negated-in-lhs",["250"],"@typescript-eslint/no-unused-vars","'mode' is defined but never used.","Identifier","unusedVar","'userInfo' is defined but never used.","'SearchBar' is defined but never used.","'SingleRoomProps' is defined but never used.","'GetRoomById' is assigned a value but never used.","'slug' is assigned a value but never used.","'DarkMode' is defined but never used.","'Flex' is defined but never used.","'Grid' is defined but never used.","'Spacer' is defined but never used.","'Center' is defined but never used.","'Square' is defined but never used.","'StackDivider' is defined but never used.","'defaultRoom' is assigned a value but never used.","'InputGroup' is defined but never used.","'stat' is defined but never used.","'fetchPincode' is assigned a value but never used.","no-empty-pattern","Unexpected empty object pattern.","ObjectPattern","unexpected","no-global-assign","no-unsafe-negation"]