[{"E:\\Repos\\hostel-chakra\\Hostel\\src\\index.tsx":"1","E:\\Repos\\hostel-chakra\\Hostel\\src\\reportWebVitals.ts":"2","E:\\Repos\\hostel-chakra\\Hostel\\src\\serviceWorker.ts":"3","E:\\Repos\\hostel-chakra\\Hostel\\src\\App.tsx":"4","E:\\Repos\\hostel-chakra\\Hostel\\src\\Pages\\SingleRoom.tsx":"5","E:\\Repos\\hostel-chakra\\Hostel\\src\\Pages\\ErrorPage.tsx":"6","E:\\Repos\\hostel-chakra\\Hostel\\src\\ColorModeSwitcher.tsx":"7","E:\\Repos\\hostel-chakra\\Hostel\\src\\Logo.tsx":"8","E:\\Repos\\hostel-chakra\\Hostel\\src\\Pages\\HomePage.tsx":"9","E:\\Repos\\hostel-chakra\\Hostel\\src\\Pages\\RoomsPage.tsx":"10","E:\\Repos\\hostel-chakra\\Hostel\\src\\Components\\HomeComponents\\PropertyTypeList.tsx":"11","E:\\Repos\\hostel-chakra\\Hostel\\src\\Components\\NavComponents\\SearchBar.tsx":"12","E:\\Repos\\hostel-chakra\\Hostel\\src\\Components\\NavComponents\\Navbar.tsx":"13","E:\\Repos\\hostel-chakra\\Hostel\\src\\Components\\FilterComponents\\RoomCardList.tsx":"14","E:\\Repos\\hostel-chakra\\Hostel\\src\\Components\\NavComponents\\PickRangeDay.tsx":"15","E:\\Repos\\hostel-chakra\\Hostel\\src\\Components\\NavComponents\\PopDetail.tsx":"16","E:\\Repos\\hostel-chakra\\Hostel\\src\\Components\\FilterComponents\\RoomCard.tsx":"17","E:\\Repos\\hostel-chakra\\Hostel\\src\\Components\\NavComponents\\Footer.tsx":"18","E:\\Repos\\hostel-chakra\\Hostel\\src\\Components\\SingleRoomComponents\\MyRoomBadge.tsx":"19","e:\\Repos\\hostel-chakra\\Hostel\\src\\index.tsx":"20","e:\\Repos\\hostel-chakra\\Hostel\\src\\reportWebVitals.ts":"21","e:\\Repos\\hostel-chakra\\Hostel\\src\\serviceWorker.ts":"22","e:\\Repos\\hostel-chakra\\Hostel\\src\\App.tsx":"23","e:\\Repos\\hostel-chakra\\Hostel\\src\\Pages\\HomePage.tsx":"24","e:\\Repos\\hostel-chakra\\Hostel\\src\\Pages\\SingleRoom.tsx":"25","e:\\Repos\\hostel-chakra\\Hostel\\src\\Pages\\RoomsPage.tsx":"26","e:\\Repos\\hostel-chakra\\Hostel\\src\\Pages\\ErrorPage.tsx":"27","e:\\Repos\\hostel-chakra\\Hostel\\src\\Components\\NavComponents\\Footer.tsx":"28","e:\\Repos\\hostel-chakra\\Hostel\\src\\Components\\NavComponents\\SearchBar.tsx":"29","e:\\Repos\\hostel-chakra\\Hostel\\src\\Components\\NavComponents\\PickRangeDay.tsx":"30","e:\\Repos\\hostel-chakra\\Hostel\\src\\Components\\NavComponents\\Navbar.tsx":"31","e:\\Repos\\hostel-chakra\\Hostel\\src\\Components\\NavComponents\\PopDetail.tsx":"32","e:\\Repos\\hostel-chakra\\Hostel\\src\\Components\\HomeComponents\\PropertyTypeList.tsx":"33","e:\\Repos\\hostel-chakra\\Hostel\\src\\Components\\SingleRoomComponents\\MyRoomBadge.tsx":"34","e:\\Repos\\hostel-chakra\\Hostel\\src\\Components\\FilterComponents\\RoomCardList.tsx":"35","e:\\Repos\\hostel-chakra\\Hostel\\src\\Logo.tsx":"36","e:\\Repos\\hostel-chakra\\Hostel\\src\\ColorModeSwitcher.tsx":"37","e:\\Repos\\hostel-chakra\\Hostel\\src\\Components\\FilterComponents\\RoomCard.tsx":"38","E:\\Repos\\hostel-chakra\\Hostel\\src\\Components\\RegisterButton.tsx":"39","E:\\Repos\\hostel-chakra\\Hostel\\src\\Components\\RegisterForm.tsx":"40","E:\\Repos\\hostel-chakra\\Hostel\\src\\Contexts\\AuthContext.tsx":"41","E:\\Repos\\hostel-chakra\\Hostel\\src\\Components\\LoginForm.tsx":"42","E:\\Repos\\hostel-chakra\\Hostel\\src\\Pages\\ProfilePage.tsx":"43","E:\\Repos\\hostel-chakra\\Hostel\\src\\Pages\\PublishRoomPage.tsx":"44","E:\\Repos\\hostel-chakra\\Hostel\\src\\API.ts":"45","E:\\Repos\\hostel-chakra\\Hostel\\src\\Pages\\PreviewRoomPage.tsx":"46","E:\\Repos\\hostel-chakra\\Hostel\\src\\Pages\\RegisterHostPage.tsx":"47","E:\\Repos\\hostel-chakra\\Hostel\\src\\Pages\\OwnerListProperty.tsx":"48","E:\\Repos\\hostel-chakra\\Hostel\\src\\Components\\FloatingForm.tsx":"49","E:\\Repos\\hostel-chakra\\Hostel\\src\\Components\\AlertDialog.tsx":"50","E:\\Repos\\hostel-chakra\\Hostel\\src\\Pages\\VerificationPage.tsx":"51"},{"size":345,"mtime":1617925710355,"results":"52","hashOfConfig":"53"},{"size":431,"mtime":1612286281167,"results":"54","hashOfConfig":"53"},{"size":5404,"mtime":1612286281167,"results":"55","hashOfConfig":"53"},{"size":6599,"mtime":1623929060940,"results":"56","hashOfConfig":"53"},{"size":13264,"mtime":1623886764960,"results":"57","hashOfConfig":"53"},{"size":1605,"mtime":1620688917447,"results":"58","hashOfConfig":"53"},{"size":773,"mtime":1612286281164,"results":"59","hashOfConfig":"53"},{"size":614,"mtime":1612286281165,"results":"60","hashOfConfig":"53"},{"size":1892,"mtime":1620780799066,"results":"61","hashOfConfig":"53"},{"size":4633,"mtime":1620940588605,"results":"62","hashOfConfig":"53"},{"size":3203,"mtime":1620941418807,"results":"63","hashOfConfig":"53"},{"size":5633,"mtime":1621977014027,"results":"64","hashOfConfig":"53"},{"size":6534,"mtime":1623417532159,"results":"65","hashOfConfig":"53"},{"size":1891,"mtime":1623285801337,"results":"66","hashOfConfig":"53"},{"size":7189,"mtime":1622031257326,"results":"67","hashOfConfig":"53"},{"size":2254,"mtime":1620665435373,"results":"68","hashOfConfig":"53"},{"size":3740,"mtime":1623886098800,"results":"69","hashOfConfig":"53"},{"size":2524,"mtime":1621980996299,"results":"70","hashOfConfig":"53"},{"size":1847,"mtime":1613599095669,"results":"71","hashOfConfig":"53"},{"size":862,"mtime":1612286281166,"results":"72","hashOfConfig":"73"},{"size":431,"mtime":1612286281167,"results":"74","hashOfConfig":"73"},{"size":5404,"mtime":1612286281167,"results":"75","hashOfConfig":"73"},{"size":1405,"mtime":1613435563432,"results":"76","hashOfConfig":"73"},{"size":1187,"mtime":1613423994602,"results":"77","hashOfConfig":"73"},{"size":11934,"mtime":1613608974661,"results":"78","hashOfConfig":"73"},{"size":826,"mtime":1613605467202,"results":"79","hashOfConfig":"73"},{"size":173,"mtime":1612286281165,"results":"80","hashOfConfig":"73"},{"size":690,"mtime":1613435526288,"results":"81","hashOfConfig":"73"},{"size":3214,"mtime":1613608551630,"results":"82","hashOfConfig":"73"},{"size":3977,"mtime":1613608465743,"results":"83","hashOfConfig":"73"},{"size":1768,"mtime":1613606848363,"results":"84","hashOfConfig":"73"},{"size":3126,"mtime":1613423216595,"results":"85","hashOfConfig":"73"},{"size":1475,"mtime":1613423216593,"results":"86","hashOfConfig":"73"},{"size":1847,"mtime":1613599095669,"results":"87","hashOfConfig":"73"},{"size":1318,"mtime":1613606682010,"results":"88","hashOfConfig":"73"},{"size":614,"mtime":1612286281165,"results":"89","hashOfConfig":"73"},{"size":773,"mtime":1612286281164,"results":"90","hashOfConfig":"73"},{"size":3020,"mtime":1613608660633,"results":"91","hashOfConfig":"73"},{"size":997,"mtime":1616100395255,"results":"92","hashOfConfig":"53"},{"size":6298,"mtime":1616103124415,"results":"93","hashOfConfig":"53"},{"size":5294,"mtime":1623885016548,"results":"94","hashOfConfig":"53"},{"size":5901,"mtime":1620396689978,"results":"95","hashOfConfig":"53"},{"size":10491,"mtime":1623285901401,"results":"96","hashOfConfig":"53"},{"size":23731,"mtime":1623285715064,"results":"97","hashOfConfig":"53"},{"size":6583,"mtime":1623418655343,"results":"98","hashOfConfig":"53"},{"size":553,"mtime":1619174350149,"results":"99","hashOfConfig":"53"},{"size":2209,"mtime":1620688353319,"results":"100","hashOfConfig":"53"},{"size":746,"mtime":1623188324949,"results":"101","hashOfConfig":"53"},{"size":9428,"mtime":1623281914825,"results":"102","hashOfConfig":"53"},{"size":2496,"mtime":1623804457865,"results":"103","hashOfConfig":"53"},{"size":629,"mtime":1623419091730,"results":"104","hashOfConfig":"53"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"107"},"13hiuhw",{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"115","messages":"116","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"117","usedDeprecatedRules":"107"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"120","usedDeprecatedRules":"107"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"107"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"107"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"107"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":0,"source":"129","usedDeprecatedRules":"107"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"132","usedDeprecatedRules":"107"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"135","usedDeprecatedRules":"107"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"138","usedDeprecatedRules":"107"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"141","usedDeprecatedRules":"107"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"144","usedDeprecatedRules":"107"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"147","usedDeprecatedRules":"107"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"150","usedDeprecatedRules":"107"},{"filePath":"151","messages":"152","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"153","usedDeprecatedRules":"107"},{"filePath":"154","messages":"155","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"156","usedDeprecatedRules":"107"},{"filePath":"157","messages":"158","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"99iabf",{"filePath":"159","messages":"160","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"161","messages":"162","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"163","messages":"164","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"165","messages":"166","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"167","messages":"168","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"169","messages":"170","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"171","messages":"172","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"173","messages":"174","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"175","messages":"176","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"177","messages":"178","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"179","messages":"180","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"181","messages":"182","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"183","messages":"184","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"185","messages":"186","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"187","messages":"188","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"189","messages":"190","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"191","messages":"192","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"193","messages":"194","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"195","messages":"196","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"197"},{"filePath":"198","messages":"199","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"200","usedDeprecatedRules":"197"},{"filePath":"201","messages":"202","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"203","usedDeprecatedRules":"107"},{"filePath":"204","messages":"205","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"206","usedDeprecatedRules":"107"},{"filePath":"207","messages":"208","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"209","usedDeprecatedRules":"107"},{"filePath":"210","messages":"211","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"212","usedDeprecatedRules":"107"},{"filePath":"213","messages":"214","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"215","usedDeprecatedRules":"107"},{"filePath":"216","messages":"217","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"107"},{"filePath":"218","messages":"219","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"107"},{"filePath":"220","messages":"221","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"107"},{"filePath":"222","messages":"223","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"107"},{"filePath":"224","messages":"225","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"107"},{"filePath":"226","messages":"227","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"228","usedDeprecatedRules":"107"},"E:\\Repos\\hostel-chakra\\Hostel\\src\\index.tsx",[],["229","230"],"E:\\Repos\\hostel-chakra\\Hostel\\src\\reportWebVitals.ts",[],["231","232"],"E:\\Repos\\hostel-chakra\\Hostel\\src\\serviceWorker.ts",[],"E:\\Repos\\hostel-chakra\\Hostel\\src\\App.tsx",["233","234","235","236"],"E:\\Repos\\hostel-chakra\\Hostel\\src\\Pages\\SingleRoom.tsx",["237","238","239","240","241","242","243","244","245","246","247","248"],"import { Box, Button, Divider, Grid, GridItem, Spacer, Image, HStack, Flex, VStack, Avatar, useToast, BoxProps, Center, Spinner, useDisclosure } from '@chakra-ui/react';\r\nimport React from 'react'\r\nimport { BsStarFill, BsStar, BsHeart, BsHeartFill } from 'react-icons/bs';\r\nimport { useMutation, useQuery } from 'react-query';\r\nimport { Link, Redirect, useHistory, useLocation, useParams } from 'react-router-dom';\r\nimport { closeProperty, fetchPropertyById, fetchReviewsForProperty, toggleLike } from '../API';\r\nimport PickRangeDay from '../Components/NavComponents/PickRangeDay';\r\nimport FloatingForm from '../Components/FloatingForm';\r\nimport MyRoomBadge, { defaultRoomBadges } from '../Components/SingleRoomComponents/MyRoomBadge';\r\nimport { AuthContext } from '../Contexts/AuthContext';\r\nimport { ActionAlert } from '../Components/AlertDialog';\r\n\r\ntype SlugProps = {\r\n    slug: string;\r\n}\r\n\r\ntype SingleRoomProps = {\r\n    initRoom: Room;\r\n}\r\n\r\nconst SingleRoom: React.FC<SingleRoomProps> = ({ initRoom, children }) => {\r\n    const auth = React.useContext(AuthContext);\r\n\r\n    const [room, setRoom] = React.useState<Room>();\r\n    const [bookInfo, setBookInfo] = React.useState<BookingInfo>({ guest: 0, children: 0 });\r\n    const [didLike, setDidLike] = React.useState(false);\r\n\r\n    const { slug } = useParams<SlugProps>();\r\n    const toast = useToast();\r\n    const history = useHistory();\r\n\r\n    const alertDeleteDialog = useDisclosure();\r\n    const cancelRef = React.useRef(null);\r\n\r\n    const { data, isError, error, isLoading } = useQuery([\"property\", slug],\r\n        () => {\r\n            return fetchPropertyById(slug);\r\n        },\r\n        {\r\n            staleTime: 1000 * 60 * 3,\r\n            retry: 2,\r\n            onError: (error) => {\r\n                console.log(error);\r\n            },\r\n            onSuccess: (rs) => {\r\n                if (rs.data.liked) setDidLike(rs.data.liked);\r\n                console.log(rs.data);\r\n                setRoom({ ...rs.data, roomBadges: badges });\r\n                setBookInfo(bi => ({ ...bi, roomId: rs.data.id }))\r\n            },\r\n            onSettled: () => {\r\n            }\r\n        });\r\n\r\n    const likeMutation = useMutation(toggleLike, {\r\n        onSuccess: (res) => {\r\n            setDidLike(res.data.liked);\r\n            toast({\r\n                description: res.data.liked ? \"Saved room\" : \"Removed from wishlist\",\r\n                status: \"info\",\r\n                duration: 1000\r\n            });\r\n        },\r\n        onError: (error) => console.log(error)\r\n    })\r\n\r\n    const updateDate = (from?: Date, to?: Date) => {\r\n        setBookInfo(s => ({\r\n            ...s,\r\n            bookFromDate: from,\r\n            bookToDate: to\r\n        }));\r\n    }\r\n\r\n    const updatePeople = (adult: number, children: number) => {\r\n        setBookInfo((s) => ({\r\n            ...s,\r\n            guest: adult,\r\n            children: children,\r\n        }));\r\n    }\r\n\r\n    const handleLike = () => {\r\n        if (!room) return;\r\n        if (!auth.user) {\r\n            toast({\r\n                description: \"Login is required\",\r\n                status: \"info\",\r\n                duration: 1000\r\n            });\r\n            return;\r\n        }\r\n        likeMutation.mutate({ roomId: room.id, token: auth.user.token })\r\n    }\r\n\r\n    let location = useLocation();\r\n\r\n    const handleEditProp = () => {\r\n        history.push({ ...location, pathname: `/host/publish`, search: `?id=${room?.id}` });\r\n    }\r\n\r\n    const handleLocationOnClick = (location: string) => {\r\n        history.push({\r\n            pathname: \"/rooms\",\r\n            state: {\r\n                search: {\r\n                    city: location,\r\n                }\r\n            }\r\n        })\r\n    }\r\n\r\n    if (isLoading) return (\r\n        <Center><Spinner /></Center>\r\n    )\r\n\r\n    if (room) return (\r\n        <Box>\r\n            <Divider my=\"5\" />\r\n            {/* title */}\r\n            <Box as=\"h2\" fontSize=\"3xl\" fontWeight=\"semibold\">{room.name}</Box>\r\n\r\n            {/* rating, location, like button */}\r\n            <Box d=\"flex\" mt=\"1\" flexDir={{ base: \"column\", sm: \"row\" }} justifyItems=\"baseline\">\r\n                <Box d=\"flex\" alignItems=\"start\">\r\n                    <Box d=\"flex\" flexDir={{ base: \"column\", sm: \"row\" }}>\r\n                        <Box d=\"flex\" flexDir={{ base: \"row\" }}>\r\n                            {Array(5).fill(\"\").map((_, i) => {\r\n                                return (i < Math.round(room.totalStar / room.totalReview) ? <BsStarFill key={i} colorRendering=\"teal.400\" /> : <BsStar key={i} />)\r\n                            })}\r\n                        </Box>\r\n                        <Box as=\"span\" ml=\"2\" color=\"gray.500\">{room.totalReview} reviews</Box>\r\n                    </Box>\r\n                    <Box mx=\"4\">&bull;</Box>\r\n                    <Button variant=\"link\" onClick={() => handleLocationOnClick(room.location)}>\r\n                        {room.location}\r\n                    </Button>\r\n                </Box>\r\n\r\n                <Spacer />\r\n                {room.ownerInfo.userId === auth.user?.userId &&\r\n                    <>\r\n                        {room.propertyStatus == \"IsActive\" ?\r\n                            <Button colorScheme=\"red\" mr=\"2\" onClick={alertDeleteDialog.onOpen}>\r\n                                Close this property\r\n                            </Button> :\r\n                            <Button colorScheme=\"green\" mr='2' onClick={alertDeleteDialog.onOpen}>\r\n                                Reopen this property\r\n                            </Button>\r\n                        }\r\n                        <Button onClick={() => { handleEditProp() }}>\r\n                            Edit\r\n                        </Button>\r\n                        <ActionAlert\r\n                            isOpen={alertDeleteDialog.isOpen}\r\n                            onClose={alertDeleteDialog.onClose}\r\n                            propertyId={room.id}\r\n                            leastDestructiveRef={cancelRef}\r\n                            headerMessage={room.propertyStatus == \"IsActive\" ? \"Close your property\" : \"Reopen this property\"}\r\n                            message={room.propertyStatus == \"IsActive\" ?\r\n                                \"Closing this property will prevent further reservations. Please confirm your action!\" :\r\n                                \"Reopen this property will allow guest to find your property and make reservations\"}\r\n                        > </ActionAlert>\r\n                    </>\r\n                }\r\n                <Button alignSelf=\"start\" variant=\"ghost\"\r\n                    onClick={() => handleLike()}\r\n                    leftIcon={(!didLike || !auth.user) ? <BsHeart /> : <BsHeartFill color=\"red\" />}>Like</Button>\r\n            </Box>\r\n\r\n            {/* image display */}\r\n            <Box borderRadius=\"lg\" overflow=\"hidden\" mt=\"4\">\r\n                <Grid gap=\"2\" h=\"40%\" maxH=\"450px\" objectFit=\"cover\"\r\n                    templateRows=\"repeat(2, 1fr)\"\r\n                    templateColumns=\"repeat(4, 1fr)\">\r\n                    {room.images.slice(0, 5).map((image, i) => {\r\n                        return (\r\n                            <GridItem key={i} colSpan={i === 0 ? 2 : 1} rowSpan={i === 0 ? 2 : 1} overflow=\"hidden\" >\r\n                                <Image src={image.url} h=\"auto\" height=\"100%\" w=\"100%\" objectFit=\"cover\" loading=\"lazy\"></Image>\r\n                            </GridItem>\r\n                        )\r\n                    })}\r\n                </Grid>\r\n            </Box>\r\n\r\n            {/* info  */}\r\n            <Box mt=\"4\" d={[\"flex\", \"flex\", \"flex\", \"block\"]} flexDir=\"column-reverse\">\r\n                {/* floating form */}\r\n                <Box w={[\"100%\", \"100%\", \"100%\", \"35%\"]} boxShadow=\"2xl\" mt={{ base: \"4\", lg: \"0\" }} top=\"30%\" float={{ lg: \"right\" }} position={{ lg: \"sticky\" }}\r\n                    borderRadius=\"lg\"\r\n                    display=\"inline-flex\" flexDir=\"column\" zIndex={1} borderWidth=\"thin\"\r\n                    p=\"4\" alignContent=\"center\" justifyContent=\"center\">\r\n                    <FloatingForm room={room} bookInfo={bookInfo} updateDate={updateDate} updatePeople={updatePeople} />\r\n                </Box>\r\n                {/* Detail information about this room */}\r\n                <Box w={[\"100%\", \"100%\", \"100%\", \"60%\"]}>\r\n                    {/* name, avatar */}\r\n                    <Flex alignItems=\"center\">\r\n                        <VStack alignItems=\"start\">\r\n                            <Box as=\"h1\" fontSize=\"2xl\" fontWeight=\"semibold\" >{\"Owner: \" + room.ownerInfo.name}</Box>\r\n                            <HStack>\r\n                                {room.services && room.services.map((s, i) => {\r\n                                    return (\r\n                                        <Box\r\n                                            key={i}\r\n                                            color=\"gray.500\"\r\n                                            fontWeight=\"semibold\"\r\n                                            letterSpacing=\"wide\"\r\n                                            fontSize=\"xs\"\r\n                                            textTransform=\"uppercase\"\r\n                                            ml=\"2\"\r\n                                            isTruncated\r\n                                        >{s.serviceName} {room.services[room.services.length - 1] !== s && <>&bull;</>} </Box>\r\n                                    )\r\n                                })}\r\n                            </HStack>\r\n                        </VStack>\r\n\r\n                        <Spacer />\r\n                        <Avatar name={room.ownerInfo.name} src={room.ownerInfo.profileImageUrl}\r\n                            cursor=\"pointer\"\r\n                            onClick={() => alert(\"go to user's page\")}\r\n                        />\r\n                    </Flex>\r\n                    <Divider my=\"3\" />\r\n\r\n                    {/* room badges */}\r\n                    {room.roomBadges?.map((b, i) => {\r\n                        return <MyRoomBadge id={b.id} key={i}></MyRoomBadge>\r\n                    })}\r\n                    <Divider my=\"3\" />\r\n\r\n                    {/* room introduction */}\r\n                    <Box as=\"h5\" fontWeight=\"semibold\" fontSize=\"2xl\">More about room</Box>\r\n                    <Box as=\"p\">{room.introduction}</Box>\r\n                    <Divider my=\"3\" />\r\n\r\n                    {/* another datepicker here */}\r\n                    <Box w=\"100%\" display={{ base: \"none\", sm: \"block\" }}>\r\n                        <PickRangeDay schedules={{ reservedDates: room.reservedDates, dayOff: room.daysOff }} updateDate={updateDate} />\r\n                    </Box>\r\n                </Box>\r\n\r\n            </Box>\r\n            <Divider my=\"5\" />\r\n            <ReviewDisplay propId={room.id} />\r\n        </Box>\r\n    )\r\n    return <></>\r\n}\r\n\r\ntype ReviewDisplayProps = {\r\n    propId: string;\r\n}\r\n\r\nconst ReviewDisplay = (props: ReviewDisplayProps & BoxProps) => {\r\n    const { propId, ...boxProps } = props;\r\n\r\n    const fetchReviews = useQuery([\"reviews\", propId], () => fetchReviewsForProperty(propId), {\r\n        retry: 2,\r\n        onSuccess: (data) => {\r\n        },\r\n    });\r\n\r\n    const reviews: Review[] = fetchReviews.data?.data ? fetchReviews.data.data : [];\r\n    let totalStar = 0;\r\n    reviews.forEach(r => totalStar += r.starCount);\r\n\r\n    return (\r\n        <Box>\r\n            <Box d=\"flex\" gridGap=\"2\" alignItems=\"baseline\" fontWeight=\"semibold\" fontSize=\"2xl\" mb=\"5\">\r\n                <BsStarFill />\r\n                <Box as=\"h2\"> {reviews.length != 0 ? (totalStar / reviews.length).toPrecision(2) : 0} ({reviews.length} reviews)</Box>\r\n            </Box>\r\n\r\n            {fetchReviews.data?.data.length === 0\r\n                ? <Box fontWeight=\"light\">Looks like this property does not have any reviews</Box>\r\n                :\r\n                <Box d='flex' flexWrap=\"wrap\" gridGap=\"5\">\r\n                    {fetchReviews.data?.data.map(r => <ReviewComment review={r} key={r.reviewId} />)}\r\n                </Box>\r\n            }\r\n        </Box>\r\n    )\r\n}\r\n\r\nconst testReview: Review = {\r\n    user: {\r\n        name: \"Test user name\",\r\n        userId: \"123\",\r\n        profileImageUrl: \"\"\r\n    },\r\n    comment: \"Lorem ipsum dolor sit amet consectetur adipisicing elit. Id, repellat. Harum, facilis corrupti eligendi laborum minus nihil et a mollitia!\",\r\n    propertyId: \"1\",\r\n    reviewId: \"123123\",\r\n    starCount: 4,\r\n    timeCreated: \"20202020\",\r\n    timeUpdated: \"20202020\"\r\n}\r\n\r\ntype ReviewCommentProps = {\r\n    review: Review;\r\n}\r\n\r\nconst ReviewComment = (props: ReviewCommentProps & BoxProps) => {\r\n    const { review, ...boxProps } = props;\r\n    return (\r\n        <Box {...boxProps} flex=\"1 1 25em\">\r\n            <Box d=\"flex\" flexDir=\"row\" gridGap=\"2\">\r\n                <Avatar name={review.user?.name} src={review.user.profileImageUrl}></Avatar>\r\n                <Box d=\"flex\" flexDir=\"column\">\r\n                    <Box as=\"h4\" fontWeight=\"bold\">{review.user.name}</Box>\r\n                    <Box as=\"h4\" fontWeight=\"light\">{review.timeUpdated}</Box>\r\n                </Box>\r\n            </Box>\r\n            <Box as=\"h4\" >{review.comment}</Box>\r\n        </Box>\r\n    )\r\n}\r\n\r\nconst badges: RoomBadge[] = defaultRoomBadges;\r\n\r\nexport default SingleRoom;","E:\\Repos\\hostel-chakra\\Hostel\\src\\Pages\\ErrorPage.tsx",["249"],"import { Alert, AlertDescription, AlertIcon, AlertTitle, Box } from '@chakra-ui/react'\r\nimport React from 'react'\r\nimport { useLocation } from 'react-router'\r\n\r\ntype ErrorLocationState = {\r\n    message: string;\r\n}\r\n\r\nconst ErrorPage = () => {\r\n    const location = useLocation<ErrorLocationState>();\r\n    if (location.state) {\r\n        const { message } = location.state;\r\n        return <Alert\r\n            status=\"error\"\r\n            variant=\"subtle\"\r\n            flexDirection=\"column\"\r\n            alignItems=\"center\"\r\n            justifyContent=\"center\"\r\n            textAlign=\"center\"\r\n            height=\"200px\"\r\n        >\r\n            <AlertIcon boxSize=\"40px\" mr={0} />\r\n            <AlertTitle mt={4} mb={1} fontSize=\"lg\">\r\n                {message}\r\n            </AlertTitle>\r\n            <AlertDescription maxWidth=\"md\">\r\n                Look like you have some problems! Contact us for more info!\r\n                </AlertDescription>\r\n        </Alert>\r\n    }\r\n    return (\r\n        <Alert\r\n            status=\"info\"\r\n            variant=\"subtle\"\r\n            flexDirection=\"column\"\r\n            alignItems=\"center\"\r\n            justifyContent=\"center\"\r\n            textAlign=\"center\"\r\n            height=\"200px\"\r\n        >\r\n            <AlertIcon boxSize=\"40px\" mr={0} />\r\n            <AlertTitle mt={4} mb={1} fontSize=\"lg\">\r\n                Not Found!\r\n            </AlertTitle>\r\n            <AlertDescription maxWidth=\"md\">\r\n                The page you are looking does not exist or was deleted\r\n                </AlertDescription>\r\n        </Alert>\r\n    )\r\n}\r\n\r\nexport default ErrorPage;","E:\\Repos\\hostel-chakra\\Hostel\\src\\ColorModeSwitcher.tsx",[],"E:\\Repos\\hostel-chakra\\Hostel\\src\\Logo.tsx",[],"E:\\Repos\\hostel-chakra\\Hostel\\src\\Pages\\HomePage.tsx",[],"E:\\Repos\\hostel-chakra\\Hostel\\src\\Pages\\RoomsPage.tsx",["250","251","252","253","254","255","256","257","258","259","260","261","262","263","264","265"],"import { Box, CircularProgress, Divider, HStack, InputLeftAddon, NumberDecrementStepper, NumberIncrementStepper, NumberInput, NumberInputField, NumberInputStepper, Portal, Slider, SliderFilledTrack, SliderThumb, SliderTrack, Spinner, Tag, TagCloseButton, TagLabel, TagProps, useColorModeValue } from '@chakra-ui/react';\r\nimport React from 'react'\r\nimport { useQuery } from 'react-query';\r\nimport { useLocation } from 'react-router-dom';\r\nimport { fetchPropertiesView } from '../API';\r\nimport RoomCardList from '../Components/FilterComponents/RoomCardList';\r\nimport SearchBar from '../Components/NavComponents/SearchBar';\r\nimport { MdGraphicEq } from \"react-icons/md\";\r\n\r\ntype RoomsPageLocationState = {\r\n    type?: PropertyTypeType;\r\n    search?: SearchQuery;\r\n}\r\n\r\n\r\nconst RoomsPage = () => {\r\n    const queryStr = new URLSearchParams(useLocation().search);\r\n    const searchBoxColor = useColorModeValue(\"gray.100\", \"gray.900\");\r\n\r\n    const location = useLocation<RoomsPageLocationState>();\r\n\r\n    const [search, setSearch] = React.useState<SearchQuery>({ childrenNum: 0, guestNum: 0 });\r\n    const [type, setType] = React.useState<PropertyTypeType>();\r\n\r\n    const updateSearch = (search: SearchQuery) => {\r\n        setSearch(search);\r\n    }\r\n\r\n    React.useEffect(() => {\r\n        if (location.state !== undefined && location.state.search) {\r\n            setSearch(location.state.search)\r\n        }\r\n        if (location.state !== undefined && location.state.type) {\r\n            setType(location.state.type);\r\n        }\r\n    }, [])\r\n\r\n    let queryKeys = [type?.id, search];\r\n\r\n    const { data, isLoading, error, refetch, remove } = useQuery([\"propertyView\", queryKeys], () => fetchPropertiesView(type?.id, search),\r\n        {\r\n            staleTime: 1000 * 60\r\n        });\r\n\r\n    if (error) {\r\n        return <>Error</>\r\n    }\r\n\r\n    return (\r\n        <Box d=\"flex\" flexDir=\"column\" gridGap=\"5\">\r\n            <Box position={{ lg: \"sticky\" }} top={0}\r\n                bgColor={searchBoxColor} d=\"flex\" flexDir=\"column\"\r\n                boxShadow=\"2xl\"\r\n                gridGap=\"5\" pb=\"5\"\r\n            >\r\n                <SearchBar search={search}\r\n                    updateSearch={updateSearch}\r\n                    isLoading={isLoading}\r\n                    onClickSearch={() => { remove(); refetch(); }}\r\n                />\r\n                <HStack>\r\n                    {/* type tag */}\r\n                    {type && <QueryTag label={\"Property type: \" + type.propertyType}\r\n                        onClose={() => { setType(undefined) }}\r\n                    />}\r\n\r\n                    {/* city tag */}\r\n                    {search.city && <QueryTag label={search.city}\r\n                        onClose={() => { setSearch(s => ({ ...s, city: \"\" })) }}\r\n                    />}\r\n\r\n                    {/* from date tag */}\r\n                    {search.from && <QueryTag label={\"From: \" + search.from.toLocaleDateString()}\r\n                        onClose={() => { setSearch(s => ({ ...s, from: undefined })) }}\r\n                    />}\r\n\r\n                    {/* to date tag */}\r\n                    {search.to && <QueryTag label={\"To: \" + search.to.toLocaleDateString()}\r\n                        onClose={() => { setSearch(s => ({ ...s, to: undefined })) }}\r\n                    />}\r\n\r\n                    {/* guest num tag */}\r\n                    {search.guestNum > 0 && <QueryTag label={search.guestNum + \" guests\"}\r\n                        onClose={() => { setSearch(s => ({ ...s, guestNum: 0 })) }}\r\n                    />}\r\n\r\n                    {/* children num tag */}\r\n                    {search.childrenNum > 0 && <QueryTag label={search.childrenNum + \" children\"}\r\n                        onClose={() => { setSearch(s => ({ ...s, childrenNum: 0 })) }}\r\n                    />}\r\n                </HStack>\r\n            </Box>\r\n            <Box as=\"h3\" mb=\"5\" fontSize=\"4xl\" fontWeight=\"bold\" >Find place that fits you most...</Box>\r\n            {isLoading ?\r\n                <Spinner color=\"green\" size=\"lg\" alignSelf=\"center\" />\r\n                :\r\n                <RoomCardList rooms={data?.data}></RoomCardList>\r\n            }\r\n        </Box>\r\n    )\r\n}\r\n\r\ntype QueryTagProps = {\r\n    label: string;\r\n    onClose: () => void;\r\n}\r\nconst QueryTag = (props: QueryTagProps & TagProps) => {\r\n    const { label, onClose, ...tagProps } = props;\r\n\r\n    return (\r\n        <Tag size=\"lg\" colorScheme=\"green\" {...tagProps}>\r\n            <TagLabel>\r\n                {props.label}\r\n            </TagLabel>\r\n            <TagCloseButton onClick={() => props.onClose()} />\r\n        </Tag>\r\n    );\r\n}\r\n\r\nexport default RoomsPage;","E:\\Repos\\hostel-chakra\\Hostel\\src\\Components\\HomeComponents\\PropertyTypeList.tsx",["266","267","268","269","270","271"],"import { Box, Flex, Grid, Link as ChakraLink, Spacer, VStack, Image, Tooltip, Button } from '@chakra-ui/react';\r\nimport React from 'react';\r\nimport { Link, useHistory } from \"react-router-dom\"\r\nimport Slider, { Settings } from 'react-slick';\r\nimport \"slick-carousel/slick/slick.css\";\r\nimport \"slick-carousel/slick/slick-theme.css\";\r\nimport { isError, useQuery } from 'react-query';\r\nimport { fetchPropertyTypes } from '../../API';\r\n\r\nvar settings: Settings = {\r\n    dots: true,\r\n    infinite: true,\r\n    speed: 500,\r\n    slidesToShow: 4,\r\n    slidesToScroll: 1,\r\n    initialSlide: 0,\r\n    swipeToSlide: true,\r\n    responsive: [\r\n        {\r\n            breakpoint: 1024,\r\n            settings: {\r\n                slidesToShow: 4,\r\n                slidesToScroll: 1,\r\n                infinite: true,\r\n                dots: true\r\n            }\r\n        },\r\n        {\r\n            breakpoint: 600,\r\n            settings: {\r\n                slidesToShow: 3,\r\n                slidesToScroll: 1,\r\n                initialSlide: 2\r\n            }\r\n        },\r\n        {\r\n            breakpoint: 480,\r\n            settings: {\r\n                slidesToShow: 1,\r\n                slidesToScroll: 1\r\n            }\r\n        }\r\n    ]\r\n};\r\n\r\nconst PropertyTypeList = () => {\r\n    const { data, isError, isFetching } = useQuery<unknown, unknown, PropertyTypeType[]>(\"propertypeList\", fetchPropertyTypes, {\r\n        staleTime: 1000 * 60 * 10\r\n    });\r\n\r\n    if (isFetching) console.log(\"refetching prop\")\r\n\r\n    if (isError) return <Box>Something's wrong</Box>\r\n    return (\r\n        <div>\r\n            <Slider {...settings}>\r\n                {data?.map((d, key) => <PropertyType type={d} key={key} />)}\r\n            </Slider>\r\n        </div>\r\n    )\r\n}\r\n\r\ntype PropertyTypeProps = {\r\n    type: PropertyTypeType;\r\n}\r\n\r\n\r\n\r\nconst PropertyType: React.FC<PropertyTypeProps> = ({ type, children }) => {\r\n    const history = useHistory();\r\n\r\n    const handlePropTypeClick = () => {\r\n        history.push({\r\n            pathname: \"/rooms\",\r\n            state: {\r\n                type: type\r\n            }\r\n        })\r\n    }\r\n\r\n    return (\r\n        <VStack alignItems=\"start\" p=\"4\">\r\n            <ChakraLink onClick={handlePropTypeClick}>\r\n                <Tooltip hasArrow placement=\"top\" aria-label={\"tooltips\"} label={type.description} openDelay={500}>\r\n                    <Box>\r\n                        <Box maxW=\"sm\" maxH=\"sm\" minH=\"100px\">\r\n                            <Image width=\"inherit\" height=\"inherit\" src={type.thumbnailImg} objectFit=\"cover\"></Image>\r\n                        </Box>\r\n\r\n                        <Box\r\n                            mt=\"1\"\r\n                            fontWeight=\"semibold\"\r\n                            as=\"h4\"\r\n                            lineHeight=\"tight\"\r\n                            isTruncated\r\n                        >\r\n                            {type.propertyType}\r\n                        </Box>\r\n                    </Box>\r\n                </Tooltip>\r\n            </ChakraLink>\r\n            <Box color=\"gray.500\" fontSize=\"md\">\r\n                {type.count + \" \" + type.propertyType + \"\"}\r\n            </Box>\r\n        </VStack>\r\n    )\r\n}\r\n\r\nexport default PropertyTypeList;","E:\\Repos\\hostel-chakra\\Hostel\\src\\Components\\NavComponents\\SearchBar.tsx",["272","273","274","275","276","277"],"import { Box, Button, Center, Flex, Input, InputGroup, InputLeftElement, InputRightElement, Popover, PopoverContent, PopoverTrigger, Portal, Spinner, useColorModeValue } from '@chakra-ui/react';\r\nimport axios from 'axios';\r\nimport React from 'react';\r\nimport { BsSearch } from 'react-icons/bs';\r\nimport { useQuery } from 'react-query';\r\nimport { Redirect, useHistory } from 'react-router';\r\nimport { fetchCities } from '../../API';\r\n// import 'react-day-picker/lib/style.css';\r\nimport PickRangeDay from './PickRangeDay';\r\nimport PopDetail from './PopDetail';\r\n\r\nexport type CityResponse = {\r\n    cityName: string;\r\n    id: string;\r\n    countryName: string;\r\n    countryId: string;\r\n}\r\n\r\ntype SearchBarProps = {\r\n    search: SearchQuery;\r\n    isLoading?: boolean;\r\n    updateSearch?: (search: SearchQuery) => void;\r\n    onClickSearch?: () => void;\r\n}\r\n\r\nconst defaultValue: SearchQuery = {\r\n    guestNum: 0,\r\n    childrenNum: 0,\r\n}\r\n\r\n\r\nconst SearchBar = (props: SearchBarProps) => {\r\n    const { data: cities, isLoading, status } = useQuery<unknown, unknown, CityResponse[]>(\"cities\", fetchCities, {\r\n        staleTime: 1000 * 60 * 10\r\n    });\r\n    const history = useHistory();\r\n\r\n    const { search: form } = props;\r\n\r\n    React.useEffect(() => {\r\n        if (props.updateSearch) {\r\n            console.log(\"update form\")\r\n            props.updateSearch(form);\r\n        }\r\n    }, [form])\r\n\r\n    // if (isLoading) return <>loading...</>;\r\n\r\n    const UpdateDate = (from?: Date, to?: Date) => {\r\n        if (props.updateSearch) {\r\n            props?.updateSearch({\r\n                ...props.search,\r\n                from: from,\r\n                to: to\r\n            });\r\n        }\r\n    }\r\n\r\n    const UpdatePeople = (adult: number, children: number) => {\r\n        if (props.updateSearch) {\r\n            props?.updateSearch({\r\n                ...props.search,\r\n                guestNum: adult,\r\n                childrenNum: children\r\n            });\r\n        }\r\n    }\r\n\r\n    const UpdateCity = (city: string) => {\r\n        if (props.updateSearch) {\r\n            props?.updateSearch({\r\n                ...props.search,\r\n                city: city\r\n            });\r\n        }\r\n    }\r\n\r\n    const handleSearchClick = () => {\r\n        history.push({\r\n            pathname: \"/rooms\",\r\n            state: {\r\n                search: props.search\r\n            }\r\n        })\r\n    }\r\n\r\n    return (\r\n        <Box p=\"2\" border=\"1px\" borderColor=\"yellow.400\" style={{ backdropFilter: \"blur(5px)\" }}>\r\n            <Flex display={{ lg: \"flex\" }} alignItems=\"center\">\r\n                <InputGroup>\r\n                    <InputLeftElement pointerEvents=\"none\" children={<BsSearch />} />\r\n                    <Input list=\"datalist-cities\" placeholder=\"City\" size=\"lg\" borderRadius=\"0\"\r\n                        onChange={(e) => UpdateCity(e.target.value)}\r\n                        value={props.search.city}\r\n                    />\r\n                    {isLoading ? <InputRightElement children={<Spinner alignSelf=\"center\" />}></InputRightElement> :\r\n                        <datalist id=\"datalist-cities\">\r\n                            {cities?.map(c => {\r\n                                return <option key={c.id} value={c.cityName} />\r\n                            })}\r\n                        </datalist>\r\n                    }\r\n                </InputGroup>\r\n                <Popover closeOnBlur={true}>\r\n                    <PopoverTrigger>\r\n                        <Button variant=\"outline\" w={[\"100%\", \"100%\", \"100%\", \"150%\"]}\r\n                            size=\"lg\" _focusVisible={{ border: \"0\" }} borderRadius=\"0\" px=\"2\">\r\n                            {form?.from?.toLocaleDateString() || \"From\"} - {form?.to?.toLocaleDateString() || \"To\"}\r\n                        </Button>\r\n                    </PopoverTrigger>\r\n                    <Portal>\r\n                        <PopoverContent\r\n                            flexWrap=\"nowrap\" alignItems=\"center\" style={{ backdropFilter: \"blur(5px)\" }}\r\n                            w=\"100%\" borderRadius=\"0\"\r\n                            bgColor={useColorModeValue(\"gray.100\", \"gray.800\")}\r\n                        >\r\n                            <PickRangeDay updateDate={UpdateDate} />\r\n                        </PopoverContent>\r\n                    </Portal>\r\n                </Popover>\r\n                <Popover>\r\n                    <PopoverTrigger>\r\n                        <Button variant=\"outline\" w={[\"100%\", \"100%\", \"100%\", \"150%\"]} size=\"lg\"\r\n                            borderRadius=\"0\" px=\"2\"\r\n                        >\r\n                            {form.guestNum + ' guests - ' + form.childrenNum + ' children'}\r\n                        </Button>\r\n                    </PopoverTrigger>\r\n                    <Portal>\r\n                        <PopoverContent flexWrap=\"nowrap\" borderRadius=\"0\" bg=\"inherit\"\r\n                            bgColor={useColorModeValue(\"gray.100\", \"gray.800\")}\r\n                        >\r\n                            <PopDetail updatePeople={UpdatePeople} guest={form.guestNum!} children={form.childrenNum!}></PopDetail>\r\n                        </PopoverContent>\r\n                    </Portal>\r\n                </Popover>\r\n                <Button alignSelf=\"center\" size=\"lg\" minW=\"100px\" ml={[0, 0, 0, 2]}\r\n                    onClick={props.onClickSearch ? props.onClickSearch : handleSearchClick}\r\n                    isLoading={props.isLoading}\r\n                    mt={[2, 2, 2, 0]} w={[\"100%\", \"100%\", \"100%\", \"30%\"]} borderRadius=\"0\">\r\n                    Search\r\n                </Button>\r\n            </Flex>\r\n        </Box>\r\n    )\r\n}\r\n\r\nexport default SearchBar;","E:\\Repos\\hostel-chakra\\Hostel\\src\\Components\\NavComponents\\Navbar.tsx",["278","279","280","281"],"import React, { FC } from 'react';\r\nimport { Box, BoxProps, Button, Center, DarkMode, Flex, Heading, HStack, Menu, MenuButton, MenuDivider, MenuItem, MenuList, Modal, ModalBody, ModalCloseButton, ModalContent, ModalHeader, ModalOverlay, Spacer, useColorModeValue, useDisclosure } from '@chakra-ui/react';\r\nimport { ColorModeSwitcher } from '../../ColorModeSwitcher';\r\nimport { Logo } from \"../../Logo\";\r\nimport { Link, Link as RouterLink, useLocation } from 'react-router-dom';\r\nimport { AuthContext } from '../../Contexts/AuthContext';\r\nimport { BsBell, BsBookmark, BsBoxArrowDown, BsCalendar, BsChevronDown, BsHouse, BsLock, BsPerson } from 'react-icons/bs';\r\nimport LoginForm from '../LoginForm';\r\n\r\nconst Navbar: FC<BoxProps> = ({ ...props }) => {\r\n    const auth = React.useContext(AuthContext);\r\n    const loginFormModal = useDisclosure();\r\n    const initRef = React.useRef<HTMLInputElement>(null);\r\n    const [isRegistering, setIsRegistering] = React.useState(false);\r\n\r\n    // check if we are at homepage, then do a bit of theme modification\r\n    const { pathname } = useLocation();\r\n    const bgColorMenuWhenHome = useColorModeValue(\"gray.800\", \"gray.800\");\r\n    const colorMenuWhenHome = useColorModeValue(\"white\", \"white\");\r\n\r\n    const becomehostColor = useColorModeValue(\"cyan.200\", \"blue.400\");\r\n\r\n    return (\r\n        <Box marginBottom={[\"5%\"]} {...props}>\r\n            <Flex justifyContent=\"center\" alignItems=\"center\">\r\n                <RouterLink to=\"/\">\r\n                    <HStack spacing={4}>\r\n                        <Center>\r\n                            <Logo />\r\n                        </Center>\r\n                        <Heading size=\"md\" display={{ base: \"none\", sm: \"block\" }}>Nice homestays</Heading>\r\n                    </HStack>\r\n                </RouterLink>\r\n                <Spacer />\r\n                <HStack spacing={4}>\r\n                    <ColorModeSwitcher />\r\n                    {auth.user === undefined ?\r\n                        <>\r\n                            <Button variant=\"ghost\" onClick={() => { loginFormModal.onOpen(); setIsRegistering(false); }}>Login</Button>\r\n                            <Modal isOpen={loginFormModal.isOpen} onClose={loginFormModal.onClose} size=\"xl\" motionPreset=\"slideInBottom\" isCentered initialFocusRef={initRef}>\r\n                                <ModalOverlay />\r\n\r\n                                <ModalContent>\r\n                                    <ModalHeader>{isRegistering ? \"Sign up new account\" : \"Login\"}</ModalHeader>\r\n                                    <ModalCloseButton />\r\n                                    <ModalBody pb=\"2\">\r\n                                        <LoginForm initRef={initRef} isRegistering={isRegistering}></LoginForm>\r\n                                    </ModalBody>\r\n                                </ModalContent>\r\n                            </Modal>\r\n                            <Button variant=\"ghost\" onClick={() => { loginFormModal.onOpen(); setIsRegistering(true); }}>Register</Button>\r\n                        </> :\r\n                        <>\r\n                            {auth.user.roles.includes(\"Admin\") &&\r\n                                <Button>\r\n                                    <Link to=\"/verify\">\r\n                                        Verify new properties\r\n                                    </Link>\r\n                                </Button>\r\n                            }\r\n                            <Menu>\r\n                                <MenuButton as={Button} variant=\"ghost\" rightIcon={<BsChevronDown />}>\r\n                                    {auth.user.name}\r\n                                </MenuButton>\r\n                                <MenuList>\r\n                                    <MenuItem as={RouterLink} to=\"/profile?view=likes\">\r\n                                        <Box mr={\"3\"}><BsBookmark /></Box>\r\n                                        Saved rooms\r\n                                    </MenuItem>\r\n                                    <MenuItem as={RouterLink} to=\"/profile?view=reservations\">\r\n                                        <Box mr={\"3\"}><BsCalendar /></Box>\r\n                                        Your Reservations\r\n                                    </MenuItem>\r\n                                    <MenuItem as={RouterLink} to=\"/profile?view=notifications\">\r\n                                        <Box mr=\"3\"><BsBell /></Box>\r\n                                        Notifications\r\n                                    </MenuItem>\r\n                                    <MenuDivider />\r\n                                    {auth.user.roles?.includes(\"Owner\") ?\r\n                                        <>\r\n                                            <MenuItem as={RouterLink} to=\"/host/publish\">\r\n                                                <Box mr=\"3\"><BsLock /></Box>\r\n                                                Host your property\r\n                                            </MenuItem>\r\n                                            <MenuItem as={RouterLink} to=\"/host/properties\">\r\n                                                <Box mr=\"3\"><BsHouse /></Box>\r\n                                                Your properties\r\n                                            </MenuItem>\r\n                                        </>\r\n                                        : !auth.user.roles.includes(\"Admin\") &&\r\n                                        <MenuItem bg={becomehostColor} as={RouterLink} to=\"/user/register-host\">\r\n                                            <Box mr=\"3\"><BsLock /></Box>\r\n                                            Become a host\r\n                                        </MenuItem>\r\n                                    }\r\n                                    <MenuItem as={RouterLink} to=\"/\">\r\n                                        <Box mr=\"3\"><BsPerson /></Box>\r\n                                        Account\r\n                                    </MenuItem>\r\n                                    <MenuDivider />\r\n                                    <MenuItem onClick={() => auth.logoutAsync()}>\r\n                                        <Box mr=\"3\"><BsBoxArrowDown /></Box>\r\n                                        Log Out\r\n                                    </MenuItem>\r\n                                </MenuList>\r\n                            </Menu>\r\n                        </>\r\n                    }\r\n                </HStack>\r\n            </Flex>\r\n        </Box>\r\n    )\r\n}\r\n\r\nexport default Navbar;","E:\\Repos\\hostel-chakra\\Hostel\\src\\Components\\FilterComponents\\RoomCardList.tsx",["282","283"],"import { SimpleGrid, Box, SimpleGridProps } from '@chakra-ui/react'\r\nimport React from 'react'\r\nimport RoomCard from './RoomCard'\r\n\r\ntype RoomCardListProps = {\r\n    rooms?: RoomCard[];\r\n}\r\n\r\nconst RoomCardList: React.FC<RoomCardListProps & SimpleGridProps> = (props) => {\r\n    // rooms = defaultRooms;\r\n    const { rooms, ...sgProps } = props;\r\n\r\n    if (!rooms || rooms.length === 0) return <Box>\r\n        Not found any room\r\n    </Box>\r\n\r\n    return (\r\n        <SimpleGrid spacing=\"8\" columns={[1, 1, 1, 2, 3]} {...sgProps}>\r\n            {rooms && rooms.map((r, index) => {\r\n                return (\r\n                    <RoomCard key={r.id} room={r} isSaved={false}></RoomCard>\r\n                )\r\n            })}\r\n        </SimpleGrid>\r\n    )\r\n}\r\n\r\nconst defaultRoom: RoomCard = {\r\n    id: \"random-id-12321\",\r\n    name: \"Crystal palace\",\r\n    thumbnailUrl: \"https://picsum.photos/1100/1000?random=1\",\r\n    thumbnailAlt: \"rear view house with pool\",\r\n    description: \"Best place in townBest place in townBest place in townBest \",\r\n    location: \"Dark side, the moon\",\r\n    totalReview: 4,\r\n    totalStar: 23,\r\n    formattedPrice: 2021.00,\r\n    services: []\r\n}\r\n\r\nconst defaultRooms: Array<RoomCard> = [\r\n    { ...defaultRoom, thumbnailUrl: \"https://picsum.photos/1100/1000?random=1\" },\r\n    { ...defaultRoom, thumbnailUrl: \"https://picsum.photos/1100/1000?random=2\" },\r\n    { ...defaultRoom, thumbnailUrl: \"https://picsum.photos/1100/1000?random=3\" },\r\n    { ...defaultRoom, thumbnailUrl: \"https://picsum.photos/1100/1000?random=4\" },\r\n    { ...defaultRoom, thumbnailUrl: \"https://picsum.photos/1100/1000?random=5\" },\r\n]\r\nconst str = \"Lorem ipsum dolor sit amet consectetur adipisicing elit. Delectus non laboriosam blanditiis ipsa voluptas assumenda earum fugiat vel nemo rem totam modi officiis corporis accusamus consectetur, soluta optio, quas maiores!\"\r\nexport default RoomCardList;","E:\\Repos\\hostel-chakra\\Hostel\\src\\Components\\NavComponents\\PickRangeDay.tsx",["284","285","286","287","288"],"import { Box, BoxProps, Button, Center, Flex, useBreakpointValue, useColorModeValue, useMediaQuery, useToast } from '@chakra-ui/react';\r\nimport React from 'react'\r\nimport DayPicker from 'react-day-picker';\r\nimport { DateUtils } from \"react-day-picker\";\r\nimport 'react-day-picker/lib/style.css';\r\n\r\nconst today = new Date(Date.now());\r\n\r\ntype PropertySchedule = {\r\n    reservedDates?: {\r\n        fromDate: string;\r\n        toDate: string;\r\n    }[],\r\n\r\n    dayOff?: Date[];\r\n}\r\n\r\nconst defaultSchedules: PropertySchedule = {\r\n    reservedDates: [\r\n        {\r\n            fromDate: \"2021-04-19\",\r\n            toDate: \"2021-04-21\"\r\n        },\r\n        {\r\n            fromDate: \"2021-04-21\",\r\n            toDate: \"2021-04-24\"\r\n        },\r\n        {\r\n            fromDate: \"2021-04-30\",\r\n            toDate: \"2021-05-01\"\r\n        }\r\n    ],\r\n}\r\n\r\nexport const getDatesBetween = (fromDate: string, toDate: string) => {\r\n    const from = new Date(fromDate);\r\n    const to = new Date(toDate);\r\n    let datesBtw: Date[] = [];\r\n    let start = from;\r\n    start.setDate(start.getDate() + 1);\r\n\r\n    while (start.getDate() < to.getDate()) {\r\n        datesBtw.push(new Date(start));\r\n        start.setDate(start.getDate() + 1);\r\n    }\r\n    return datesBtw;\r\n}\r\n\r\nconst getDisabledDates = (schedules?: PropertySchedule) => {\r\n    let disabledDates: Date[] = [];\r\n\r\n    if (schedules?.reservedDates) {\r\n        for (let i = 0; i < schedules.reservedDates.length; i++) {\r\n            disabledDates.push(...getDatesBetween(schedules.reservedDates[i].fromDate, schedules.reservedDates[i].toDate))\r\n        }\r\n    }\r\n\r\n    if (schedules?.dayOff) disabledDates.push(...schedules.dayOff);\r\n    return disabledDates;\r\n}\r\n\r\nconst getDateCheckOutOnly = (schedules?: PropertySchedule) => {\r\n    return schedules?.reservedDates?.map(r => new Date(r.fromDate));\r\n}\r\n\r\nconst getNextPossibleDate = (day: Date, schedules?: PropertySchedule) => {\r\n    let nextDay: Date | undefined = undefined;\r\n\r\n    if (schedules?.reservedDates) {\r\n        schedules.reservedDates.forEach(r => {\r\n            const rFrom = new Date(r.fromDate);\r\n\r\n            if (rFrom > day) {\r\n                if (!nextDay) nextDay = rFrom;\r\n                else if (rFrom <= nextDay) nextDay = rFrom;\r\n            }\r\n        })\r\n    }\r\n    if (nextDay !== day) return nextDay;\r\n    return null;\r\n}\r\n\r\ntype PickRangeDayState = {\r\n    from?: Date;\r\n    to?: Date;\r\n    enteredTo?: Date; // keep track of the last day for mouseEnter\r\n}\r\n\r\ntype PickRangeDayProps = {\r\n    from?: Date,\r\n    to?: Date,\r\n    updateDate: (from?: Date, to?: Date) => void,\r\n    schedules?: PropertySchedule\r\n}\r\n\r\nconst defaultDate: PickRangeDayState = {\r\n    from: undefined,\r\n    to: undefined,\r\n    enteredTo: undefined\r\n}\r\n\r\nconst PickRangeDay: React.FC<PickRangeDayProps & BoxProps> = (props) => {\r\n    const { from, to, updateDate, schedules, ...boxProps } = props;\r\n\r\n    const toast = useToast();\r\n    const [state, setState] = React.useState<PickRangeDayState>({ from: from, to: to });\r\n\r\n    const disabled = [\r\n        {\r\n            before: new Date(Date.now())\r\n        },\r\n        ...getDisabledDates(schedules),\r\n    ]\r\n\r\n    const [disabledDays, setDisabledDays] = React.useState(disabled)\r\n\r\n    React.useEffect(() => {\r\n        if ((state.from && state.to) || (!state.from && !state.to)) {\r\n            updateDate(state.from, state.to);\r\n        }\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [state.from, state.to]);\r\n\r\n    const isSelectingFirstDay = (day: Date, from?: Date, to?: Date) => {\r\n        const isBeforeFirstDay = from && DateUtils.isDayBefore(day, from);\r\n        const isRangeSelected = from && to;\r\n        return !from || isBeforeFirstDay || isRangeSelected;\r\n    }\r\n\r\n    const handleDayMouseEnter = (day: Date) => {\r\n        const { from, to } = state;\r\n        if (!isSelectingFirstDay(day, from, to)) {\r\n            setState(s => ({\r\n                ...s,\r\n                enteredTo: day,\r\n            }));\r\n        }\r\n    }\r\n\r\n    const handleDayClick = (day: Date, modifiers: any) => {\r\n        if (modifiers.disabled) return;\r\n\r\n        const today = new Date(Date.now());\r\n        if (day < today) return;\r\n        const { from, to } = state;\r\n        if (from && to && day >= from && day <= to) {\r\n            handleResetClick();\r\n            return;\r\n        }\r\n        // if selecting first day, recalculate disabled days to this chosen day\r\n        if (isSelectingFirstDay(day, from, to)) {\r\n            if (modifiers.checkoutOnly) {\r\n                toast({\r\n                    status: \"info\",\r\n                    description: \"Check out only!\",\r\n                    duration: 3000\r\n                })\r\n                return;\r\n            }\r\n            setDisabledDays((s) => ({ ...s, before: day, after: getNextPossibleDate(day, schedules) }))\r\n\r\n            setState({\r\n                from: day,\r\n                to: undefined,\r\n                enteredTo: undefined,\r\n            });\r\n        }\r\n        // else, set every things back to normal\r\n        else {\r\n            setDisabledDays(disabled);\r\n            // prevent from = to\r\n            if (state.from?.getDate() === day.getDate()) {\r\n                setState({\r\n                    from: undefined,\r\n                    to: undefined,\r\n                    enteredTo: undefined,\r\n                });\r\n                return;\r\n            }\r\n            setState(s => ({\r\n                ...s,\r\n                to: day,\r\n                enteredTo: day,\r\n            }));\r\n        }\r\n    }\r\n\r\n    const handleResetClick = () => {\r\n        setState(defaultDate);\r\n    }\r\n\r\n    const selected = [state.from, { from: state.from, to: state.enteredTo }];\r\n\r\n\r\n    const modifiers = {\r\n        start: state.from,\r\n        end: state.enteredTo,\r\n        checkoutOnly: getDateCheckOutOnly(schedules),\r\n    }\r\n\r\n    const [enoughFor2MonthsDisplay] = useMediaQuery(\"(min-width: 600px)\");\r\n\r\n    return (\r\n        <Box d=\"flex\" flexDir=\"column\" {...boxProps} overflow=\"clip\">\r\n            <Box alignSelf=\"center\">\r\n                <DayPicker\r\n                    numberOfMonths={enoughFor2MonthsDisplay ? 2 : 1}\r\n                    fromMonth={state.from}\r\n                    modifiers={modifiers as any}\r\n                    onDayClick={handleDayClick}\r\n                    disabledDays={disabledDays}\r\n                    onDayMouseEnter={handleDayMouseEnter}\r\n                    selectedDays={selected as any}>\r\n                </DayPicker>\r\n            </Box>\r\n            <Flex justifyContent=\"center\" alignItems=\"center\">\r\n                {!state.from && !state.to && 'Please select the first day.'}\r\n                {state.from && !state.to && 'Please select the last day.'}\r\n                {state.from &&\r\n                    state.to &&\r\n                    `Selected from ${state.from.toLocaleDateString()} to\r\n                ${state.to.toLocaleDateString()}`}{' '}\r\n                {state.from && state.to && (\r\n                    <Button onClick={handleResetClick}>\r\n                        Reset\r\n                    </Button>\r\n                )}\r\n            </Flex>\r\n        </Box>\r\n    )\r\n}\r\n\r\nexport default PickRangeDay;","E:\\Repos\\hostel-chakra\\Hostel\\src\\Components\\NavComponents\\PopDetail.tsx",["289","290"],"import { Box, Flex, VStack, Text, Spacer, Square, Button, StackDivider } from '@chakra-ui/react';\r\nimport React from 'react';\r\n\r\ntype PopDetailState = {\r\n    guest: number;\r\n    children: number;\r\n}\r\n\r\ninterface PopDetailProps extends PopDetailState {\r\n    updatePeople: (guest: number, children: number) => void;\r\n    maxGuest?: number;\r\n}\r\n\r\nconst PopDetail: React.FC<PopDetailProps> = ({ guest, children, updatePeople, maxGuest }) => {\r\n    return (\r\n        <Box p=\"4\" style={{ backdropFilter: \"blur(5px)\" }}>\r\n            <VStack align=\"stretch\" spacing={4}>\r\n                <Flex alignItems=\"center\">\r\n                    <Text mr=\"auto\" fontSize=\"md\">Guests</Text>\r\n                    <Square border=\"1px\" borderColor=\"yellow.400\">\r\n                        <Button variant=\"ghost\" borderRadius=\"0\" disabled={guest <= 0}\r\n                            onClick={() => updatePeople(--guest, children)}>-</Button>\r\n                    </Square>\r\n                    <Text mx=\"4\" fontSize=\"md\">{guest}</Text>\r\n                    <Square border=\"1px\" borderColor=\"yellow.400\">\r\n                        <Button variant=\"ghost\" borderRadius=\"0\"\r\n                            disabled={maxGuest !== undefined && guest >= maxGuest}\r\n                            onClick={() => updatePeople(++guest, children)}>+</Button>\r\n                    </Square>\r\n                </Flex>\r\n                <Flex alignItems=\"center\">\r\n                    <Text mr=\"auto\" fontSize=\"md\">Children</Text>\r\n                    <Square border=\"1px\" borderColor=\"yellow.400\">\r\n                        <Button variant=\"ghost\" borderRadius=\"0\" disabled={children <= 0 ? true : false}\r\n                            onClick={() => updatePeople(guest, --children)}>-</Button>\r\n                    </Square>\r\n                    <Text mx=\"4\" fontSize=\"md\">{children}</Text>\r\n                    <Square border=\"1px\" borderColor=\"yellow.400\">\r\n                        <Button variant=\"ghost\" borderRadius=\"0\"\r\n                            isDisabled={children >= 5}\r\n                            onClick={() => updatePeople(guest, ++children)}>+</Button>\r\n                    </Square>\r\n                </Flex>\r\n            </VStack>\r\n        </Box>\r\n    )\r\n}\r\n\r\nexport default PopDetail;","E:\\Repos\\hostel-chakra\\Hostel\\src\\Components\\FilterComponents\\RoomCard.tsx",["291","292","293"],"import { Badge, Box, Image, LinkOverlay, Text, Link, BoxProps, useColorModeValue, Spacer, Center } from '@chakra-ui/react';\r\nimport React from 'react';\r\nimport { BsStar, BsStarFill } from 'react-icons/bs';\r\nimport { Link as LinkReact } from 'react-router-dom';\r\n\r\ntype RoomCardProps = {\r\n    room: RoomCard;\r\n    isSaved: boolean;\r\n}\r\n\r\nconst RoomCard = ({ room, isSaved, ...props }: RoomCardProps & BoxProps) => {\r\n    console.log(room);\r\n    return (\r\n        <Box borderWidth=\"1px\" borderRadius=\"lg\" {...props} bg={useColorModeValue(\"gray.100\", \"gray.900\")} d=\"flex\" flexDir=\"column\">\r\n            <Link as={LinkReact} to={\"/rooms/\" + room.id} >\r\n                <Box minH=\"200px\" maxH=\"300px\" overflow=\"hidden\">\r\n                    <Image src={room.thumbnailUrl}\r\n                        objectFit=\"cover\" fit=\"cover\"\r\n                        fallback={<Box bgColor=\"gray\" color=\"gray\" />}\r\n                        alt={room.thumbnailAlt} overflow=\"hidden\"\r\n                        style={{ transition: \"ease 0.5s\" }}\r\n                        _hover={{ transform: \"scale(1.1)\" }} />\r\n                </Box>\r\n            </Link>\r\n\r\n            <Spacer />\r\n\r\n            <Box p=\"4\" d=\"flex\" flexDir=\"column\">\r\n                {!isSaved &&\r\n                    <Box d=\"flex\" alignItems=\"baseline\">\r\n                        <Badge borderRadius=\"full\" px=\"2\" colorScheme=\"teal\">\r\n                            New\r\n                        </Badge>\r\n                        {room.services && room.services.map((s, key) => {\r\n                            return (\r\n                                <Box\r\n                                    key={key}\r\n                                    color=\"gray.500\"\r\n                                    fontWeight=\"semibold\"\r\n                                    letterSpacing=\"wide\"\r\n                                    fontSize=\"xs\"\r\n                                    textTransform=\"uppercase\"\r\n                                    ml=\"2\"\r\n                                    isTruncated\r\n                                >{s.serviceName} {room.services[room.services.length - 1] !== s && <>&bull;</>} </Box>\r\n                            )\r\n                        })}\r\n                    </Box>\r\n                }\r\n                <Box\r\n                    mt=\"1\"\r\n                    fontWeight=\"semibold\"\r\n                    as=\"h4\"\r\n                    lineHeight=\"tight\"\r\n                >\r\n                    {room.name}\r\n                </Box>\r\n\r\n                {!isSaved &&\r\n                    <Box\r\n                        as={\"p\"}\r\n                        lineHeight=\"tight\"\r\n                        textOverflow=\"ellipsis\"\r\n                        overflow=\"hidden\"\r\n                    >\r\n                        {room.description.length > 100 ? room.description.substring(0, 100) + \"...\" : room.description}\r\n                    </Box>\r\n                }\r\n\r\n                <Box d='flex' flexWrap=\"wrap\" justifySelf=\"end\" alignItems=\"baseline\" flexDir=\"row\">\r\n                    <Box as=\"h4\" fontSize=\"3xl\">\r\n                        {room.formattedPrice + \"$\"}\r\n                    </Box>\r\n                    <Box as=\"span\" color=\"gray.500\" fontStyle=\"italic\">\r\n                        / per night\r\n                    </Box>\r\n\r\n                    <Box d=\"flex\" alignItems=\"center\" alignSelf=\"center\" ml=\"auto\">\r\n                        {Array(5).fill(\"\").map((_, i) => {\r\n                            return (i < Math.round(room.totalStar / room.totalReview) ? <BsStarFill key={i} colorRendering=\"teal.400\" /> : <BsStar key={i} />)\r\n                        })}\r\n                    </Box>\r\n                </Box>\r\n            </Box>\r\n        </Box>\r\n    )\r\n}\r\n\r\nexport default RoomCard;","E:\\Repos\\hostel-chakra\\Hostel\\src\\Components\\NavComponents\\Footer.tsx",["294","295","296","297","298","299","300","301","302","303","304","305"],"import { Box, BoxProps, Center, chakra, Divider, Heading, HeadingProps, Text, HTMLChakraProps, Link, SimpleGrid, SimpleGridProps, Stack, StackDivider, TextProps, useColorModeValue, useToken, ButtonGroup, IconButton, ButtonGroupProps } from '@chakra-ui/react'\r\nimport React from 'react'\r\nimport { BsHeartFill } from 'react-icons/bs';\r\nimport { FaGithub, FaFacebook, FaReddit } from 'react-icons/fa';\r\n// import { Logo } from '../../Logo';\r\n\r\nconst Footer: React.FC<BoxProps> = ({ children, ...props }) => {\r\n    return (\r\n        <Box as=\"footer\" role=\"contentinfo\" py=\"12\" {...props}>\r\n            <Stack spacing=\"10\" divider={<StackDivider />}>\r\n                {/* <Stack direction={{ base: 'column', lg: 'row' }} spacing={{ base: '10', lg: '28' }}>\r\n                    <Box flex=\"1\">\r\n                        <Logo />\r\n                    </Box>\r\n                    <Stack direction={{ base: 'column', md: 'row' }} spacing={{ base: '10', md: '20' }}>\r\n                        <LinkGrid spacing={{ base: '10', md: '20', lg: '28' }} flex=\"1\" />\r\n                    </Stack>\r\n                </Stack> */}\r\n                <Stack\r\n                    direction={{ base: 'column-reverse', md: 'row' }}\r\n                    justifyContent=\"space-between\"\r\n                    alignItems=\"center\"\r\n                >\r\n                    <Copyright />\r\n                    <SocialMediaLinks />\r\n                </Stack>\r\n            </Stack>\r\n        </Box>\r\n    )\r\n}\r\n\r\nconst Copyright = (props: TextProps) => (\r\n    <Text fontSize=\"sm\" {...props}>\r\n        &copy; {new Date().getFullYear()} Hai, Inc. All rights reserved.\r\n    </Text>\r\n)\r\n\r\nconst openSocio = (to: \"fb\" | \"github\" | \"reddit\") => {\r\n    let url = \"\";\r\n    if (to === \"fb\") url = \"https://facebook.com\";\r\n    else if (to === \"github\") url = \"https://github.com/haihaibeo\";\r\n    else if (to === \"reddit\") url = \"https://reddit.com/user/haihaibeo\";\r\n\r\n    window.open(url, '_blank')!.focus();\r\n}\r\n\r\nconst SocialMediaLinks = (props: ButtonGroupProps) => (\r\n    <ButtonGroup variant=\"ghost\" color=\"gray.600\" {...props}>\r\n        <IconButton as=\"a\" href=\"#\" aria-label=\"Facebook\" onClick={() => openSocio('fb')} icon={<FaFacebook fontSize=\"20px\" />} />\r\n        <IconButton as=\"a\" href=\"#\" aria-label=\"GitHub\" onClick={() => openSocio('github')} icon={<FaGithub fontSize=\"20px\" />} />\r\n        <IconButton as=\"a\" href=\"#\" aria-label=\"Reddit\" onClick={() => openSocio('reddit')} icon={<FaReddit fontSize=\"20px\" />} />\r\n    </ButtonGroup>\r\n)\r\n\r\nexport default Footer;","E:\\Repos\\hostel-chakra\\Hostel\\src\\Components\\SingleRoomComponents\\MyRoomBadge.tsx",["306"],"import { Box, Icon, HStack, VStack, Center } from '@chakra-ui/react'\r\nimport React from 'react'\r\nimport { IconType } from 'react-icons'\r\nimport { RiStarLine, RiUserStarLine } from \"react-icons/ri\";\r\n\r\ntype MyRoomBadgeProps = {\r\n    id: string;\r\n}\r\n\r\nconst MyRoomBadge: React.FC<MyRoomBadgeProps> = ({ id }) => {\r\n    const [icon, setIcon] = React.useState<IconType>();\r\n    const [badge, setBadge] = React.useState<RoomBadge>();\r\n\r\n    React.useEffect(() => {\r\n        let foundBadge = defaultRoomBadges.find(b => b.id === id);\r\n        setBadge(foundBadge);\r\n        switch (id) {\r\n            case \"1\":\r\n                setIcon(RiUserStarLine);\r\n                break;\r\n\r\n            default:\r\n                setIcon(RiStarLine);\r\n                break;\r\n        }\r\n    }, [id])\r\n\r\n    return (\r\n        <HStack alignContent=\"center\" spacing=\"0\" mb=\"2\">\r\n            <Icon d=\"flex\" boxSize=\"10\" alignItems=\"center\" justifyContent=\"center\" mt=\"2\" ml=\"2\">{icon}</Icon>\r\n            <VStack alignItems=\"start\" spacing=\"0\">\r\n                <Box as=\"h4\" fontSize=\"md\" fontWeight=\"semibold\">{badge?.title}</Box>\r\n                <Box as=\"h5\" fontSize=\"sm\" m=\"0\">{badge?.description}</Box>\r\n            </VStack>\r\n        </HStack>\r\n    )\r\n}\r\n\r\nexport const defaultRoomBadges: RoomBadge[] = [\r\n    {\r\n        id: \"1\",\r\n        title: \"Helpful owner\",\r\n        description: \"Owner provides best services\"\r\n    },\r\n    {\r\n        id: \"2\",\r\n        title: \"Extra clean\",\r\n        description: \"Owner follows our strict policies of enhanced clealiness\"\r\n    },\r\n    {\r\n        id: \"3\",\r\n        title: \"Not smoking\",\r\n        description: \"Owner does not allow smoking inside\"\r\n    },\r\n    {\r\n        id: \"4\",\r\n        title: \"Free cancelation\",\r\n        description: \"You can cancel with full refund in 24 hours\"\r\n    }\r\n]\r\n\r\nexport default MyRoomBadge;","e:\\Repos\\hostel-chakra\\Hostel\\src\\index.tsx",[],"e:\\Repos\\hostel-chakra\\Hostel\\src\\reportWebVitals.ts",[],"e:\\Repos\\hostel-chakra\\Hostel\\src\\serviceWorker.ts",[],"e:\\Repos\\hostel-chakra\\Hostel\\src\\App.tsx",["307"],"e:\\Repos\\hostel-chakra\\Hostel\\src\\Pages\\HomePage.tsx",["308"],"e:\\Repos\\hostel-chakra\\Hostel\\src\\Pages\\SingleRoom.tsx",["309","310","311","312","313"],"e:\\Repos\\hostel-chakra\\Hostel\\src\\Pages\\RoomsPage.tsx",[],"e:\\Repos\\hostel-chakra\\Hostel\\src\\Pages\\ErrorPage.tsx",[],"e:\\Repos\\hostel-chakra\\Hostel\\src\\Components\\NavComponents\\Footer.tsx",[],"e:\\Repos\\hostel-chakra\\Hostel\\src\\Components\\NavComponents\\SearchBar.tsx",[],"e:\\Repos\\hostel-chakra\\Hostel\\src\\Components\\NavComponents\\PickRangeDay.tsx",["314"],"e:\\Repos\\hostel-chakra\\Hostel\\src\\Components\\NavComponents\\Navbar.tsx",[],"e:\\Repos\\hostel-chakra\\Hostel\\src\\Components\\NavComponents\\PopDetail.tsx",["315","316"],"e:\\Repos\\hostel-chakra\\Hostel\\src\\Components\\HomeComponents\\PropertyTypeList.tsx",["317","318","319"],"e:\\Repos\\hostel-chakra\\Hostel\\src\\Components\\SingleRoomComponents\\MyRoomBadge.tsx",["320"],"e:\\Repos\\hostel-chakra\\Hostel\\src\\Components\\FilterComponents\\RoomCardList.tsx",[],"e:\\Repos\\hostel-chakra\\Hostel\\src\\Logo.tsx",[],"e:\\Repos\\hostel-chakra\\Hostel\\src\\ColorModeSwitcher.tsx",[],"e:\\Repos\\hostel-chakra\\Hostel\\src\\Components\\FilterComponents\\RoomCard.tsx",["321"],"E:\\Repos\\hostel-chakra\\Hostel\\src\\Components\\RegisterButton.tsx",[],["322","323"],"E:\\Repos\\hostel-chakra\\Hostel\\src\\Components\\RegisterForm.tsx",["324"],"import { Box, Button, Collapse, FormControl, HStack, Input, PinInput, PinInputField, Select, VStack } from '@chakra-ui/react';\r\nimport React from 'react'\r\nimport { FaArrowRight } from 'react-icons/fa';\r\n\r\ntype ActionType =\r\n    | { type: \"ChangeInput\"; country?: string; phone?: string }\r\n    | { type: \"RegisterPhone\" }\r\n    | { type: \"CheckPincode\" }\r\n    | { type: \"RegisterDetail\"; name: string; email: string; password: string }\r\n    | { type: \"SetLoading\"; isLoading: boolean }\r\n    | { type: \"ResetForm\"; }\r\n\r\n\r\ntype FormState = {\r\n    country?: string;\r\n    phone?: string;\r\n    name?: string;\r\n    pincode?: string;\r\n    email?: string;\r\n    password?: string;\r\n}\r\n\r\ntype RegisterState = {\r\n    form?: FormState;\r\n    show: \"none\" | \"pin\" | \"detail\"\r\n    isLoading?: boolean;\r\n}\r\n\r\nconst reducer = (state: RegisterState, action: ActionType): RegisterState => {\r\n    switch (action.type) {\r\n        case \"ChangeInput\":\r\n            return {\r\n                ...state,\r\n                form: {\r\n                    ...state.form,\r\n                    country: action.country,\r\n                    phone: action.phone\r\n                }\r\n            }\r\n        case 'RegisterPhone':\r\n            return {\r\n                ...state,\r\n                show: 'pin',\r\n                isLoading: true,\r\n            }\r\n        case 'CheckPincode':\r\n            return {\r\n                ...state,\r\n                show: 'detail',\r\n                isLoading: true\r\n            }\r\n        case 'RegisterDetail':\r\n            return {\r\n                ...state,\r\n            }\r\n        case \"SetLoading\":\r\n            return {\r\n                ...state,\r\n                isLoading: action.isLoading,\r\n            }\r\n        case \"ResetForm\":\r\n            return initialState;\r\n\r\n        default:\r\n            return {\r\n                ...state,\r\n            }\r\n    }\r\n}\r\n\r\nconst getRandomInt = (min: number, max: number) => {\r\n    min = Math.ceil(min);\r\n    max = Math.floor(max);\r\n    return Math.floor(Math.random() * (max - min) + min);\r\n}\r\n\r\nconst fetchPincode = async (phone: number) => {\r\n    setTimeout(() => {\r\n        return getRandomInt(1000, 9999);\r\n    }, 1000);\r\n}\r\n\r\nconst CheckPin = (pin: string) => {\r\n    return new Promise<boolean>((resolve, reject) => {\r\n        if (pin.length === 4)\r\n            setTimeout(() => { resolve(true) }, 1000);\r\n        else\r\n            setTimeout(() => { reject(\"Pin not correct\") }, 1000);\r\n    })\r\n}\r\n\r\nconst initialState: RegisterState = {\r\n    form: {},\r\n    isLoading: false,\r\n    show: \"none\"\r\n}\r\n\r\nconst RegisterForm: React.FC = ({ children }) => {\r\n    const [countries, setCountries] = React.useState<string[]>();\r\n    const [state, dispatch] = React.useReducer(reducer, initialState);\r\n\r\n    // fetching countries\r\n    React.useEffect(() => {\r\n        setCountries(defaultCountries);\r\n    }, [])\r\n\r\n    const handleRegisterButton = async (pin?: string) => {\r\n        if (state.show === \"none\") {\r\n            dispatch({ type: 'RegisterPhone' })\r\n            // send to api server\r\n            setTimeout(() => {\r\n                dispatch({ type: 'SetLoading', isLoading: false })\r\n            }, 1000)\r\n        }\r\n\r\n        else if (state.show === \"pin\" && pin !== undefined) {\r\n            dispatch({ type: 'SetLoading', isLoading: true })\r\n            CheckPin(pin).then(res => {\r\n                if (res === true) {\r\n                    console.log(\"Pincode correct\");\r\n                    dispatch({ type: 'CheckPincode' })\r\n                }\r\n                else {\r\n                    console.log(\"Pincode not correct\");\r\n                }\r\n            }).catch((r) => {\r\n                console.log(r);\r\n            }).finally(() => {\r\n                dispatch({ type: 'SetLoading', isLoading: false })\r\n            })\r\n        }\r\n    }\r\n\r\n    return (\r\n        <FormControl d=\"flex\" flexDir=\"column\">\r\n            <Select borderBottomRadius=\"0\" isDisabled={state.show !== \"none\"} onChange={(e) => dispatch({ type: 'ChangeInput', country: e.target.value, phone: state.form?.phone })} size=\"lg\" isRequired placeholder=\"Choose your country\">\r\n                {countries?.map((c, index) => {\r\n                    return <option value={c} key={index}>{c}</option>\r\n                })}\r\n            </Select>\r\n            <Input borderTopRadius=\"0\" placeholder=\"Phone number\" isDisabled={state.show !== \"none\"} size=\"lg\" value={state.form?.phone} onChange={(e) => dispatch({ type: 'ChangeInput', phone: e.target.value, country: state.form?.country })} />\r\n\r\n            <Collapse in={state.show === \"pin\"}>\r\n                <VStack spacing=\"1\" my=\"2\">\r\n                    <Box as=\"h2\"> We've sent you a verification code</Box>\r\n                    <HStack>\r\n                        <PinInput value={state.form?.pincode} isDisabled={state.isLoading} onComplete={(value) => handleRegisterButton(value)}>\r\n                            <PinInputField />\r\n                            <PinInputField />\r\n                            <PinInputField />\r\n                            <PinInputField />\r\n                        </PinInput>\r\n                    </HStack>\r\n                </VStack>\r\n            </Collapse>\r\n\r\n            <Collapse in={state.show === \"detail\"}>\r\n                <Box my=\"2\">\r\n                    <Input borderBottomRadius=\"0\" size=\"lg\" placeholder=\"Your name\" />\r\n                    <Input borderRadius=\"0\" size=\"lg\" placeholder=\"Email address\" />\r\n                    <Input borderTopRadius=\"0\" size=\"lg\" placeholder=\"Password\" />\r\n                </Box>\r\n            </Collapse>\r\n\r\n            <Button my=\"3\" w=\"30%\" rounded=\"full\" type=\"submit\" alignSelf=\"center\" isLoading={state.isLoading}\r\n                isDisabled={((state.form?.phone !== undefined && state.form?.phone !== \"\")\r\n                    && (state.form?.country != null && state.form?.country !== \"\")) ? false : true}\r\n                title=\"Next step\" onClick={() => handleRegisterButton()}\r\n            >\r\n                <FaArrowRight />\r\n            </Button>\r\n            {/* <Button alignSelf=\"flex-end\" variant=\"ghost\" colorScheme=\"red\" onClick={() => dispatch({ type: \"ResetForm\" })}>Reset</Button> */}\r\n\r\n        </FormControl>\r\n    )\r\n}\r\n\r\nconst defaultCountries: string[] = [\r\n    \"Russia\", \"Vietnam\"\r\n]\r\n\r\nexport default RegisterForm;","E:\\Repos\\hostel-chakra\\Hostel\\src\\Contexts\\AuthContext.tsx",["325","326","327"],"import { useToast } from '@chakra-ui/toast';\r\nimport { AxiosResponse } from 'axios';\r\nimport jwtDecode, { JwtPayload } from 'jwt-decode';\r\nimport React from 'react';\r\nimport { useMutation, useQueryClient } from 'react-query';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { authenticate, axAuth, register, validateToken } from '../API';\r\n\r\ninterface UserTokenPayload extends JwtPayload {\r\n    roles: string[] | string;\r\n    email: string;\r\n    name: string;\r\n    userId: string;\r\n}\r\n\r\ntype AuthContextStates = {\r\n    loginAsync: (request: LoginRequest) => any\r\n    registerAsync: (request: RegisterRequest) => any\r\n    logoutAsync: () => Promise<void>;\r\n    updateToken: (token: string) => void;\r\n    user?: UserResponse;\r\n    isLoading: boolean;\r\n}\r\n\r\nexport const AuthContext = React.createContext<AuthContextStates>({} as AuthContextStates);\r\n\r\n// TODO: Refactoring: Get user from localStorage\r\nexport const AuthProvider: React.FC = ({ children }) => {\r\n    const [isLoading, setIsLoading] = React.useState<boolean>(false);\r\n    const [user, setUser] = React.useState<UserResponse>();\r\n    const [token, setToken] = React.useState(localStorage.getItem(\"token\"));\r\n\r\n    const history = useHistory();\r\n\r\n    const toast = useToast();\r\n\r\n    React.useEffect(() => {\r\n        axAuth.interceptors.response.use(config => config, (error) => {\r\n            console.log(error);\r\n            if (error.status === 404) {\r\n                // history.push(\"/notfound\");\r\n            }\r\n            return Promise.reject(error);\r\n        });\r\n    }, [])\r\n\r\n    /**\r\n     * Check for token in localStorage\r\n     */\r\n    React.useEffect(() => {\r\n        const tokenStorage = localStorage.getItem(\"token\");\r\n        if (tokenStorage) {\r\n            validateToken(tokenStorage).then(res => {\r\n                console.log(\"validating...\")\r\n                if (res.status !== 200) return logoutAsync(\"Token expired\");\r\n            })\r\n            setToken(tokenStorage);\r\n        }\r\n        else {\r\n            loginAsync({ email: \"test@mail.com\", password: \"password\" });\r\n        }\r\n    }, [])\r\n\r\n    React.useEffect(() => {\r\n        if (token) {\r\n            const decodedUser = jwtDecode<UserTokenPayload>(token);\r\n            setUser({\r\n                email: decodedUser.email,\r\n                name: decodedUser.name,\r\n                roles: decodedUser.roles,\r\n                token: token,\r\n                userId: decodedUser.userId,\r\n            })\r\n        }\r\n    }, [token]);\r\n\r\n    const updateToken = (token: string) => {\r\n        setToken(token);\r\n    }\r\n\r\n    const mutateLogin = useMutation<AxiosResponse<UserResponse>, any, LoginRequest>(authenticate, {\r\n        onSuccess: (res) => {\r\n            setToken(res.data.token);\r\n            localStorage.setItem(\"token\", res.data.token);\r\n            toast({ description: \"Logged in successfully\", status: \"success\", duration: 3000 });\r\n        },\r\n        onError: (res) => { toast({ description: res.data.message, status: \"error\", duration: 3000 }) },\r\n        onSettled: () => setIsLoading(false)\r\n    })\r\n\r\n    const mutateRegister = useMutation<AxiosResponse<UserResponse>, any, RegisterRequest>(register, {\r\n        onSuccess: (res) => {\r\n            // setUser(res.data);\r\n            setToken(res.data.token);\r\n            localStorage.setItem(\"token\", res.data.token);\r\n            toast({ description: \"Logged in successfully\", status: \"success\", duration: 3000 });\r\n        },\r\n        onError: (res) => {\r\n            console.log(res.data);\r\n            for (let i = 0; i < res.data.messages.length; i++) {\r\n                toast({ description: res.data.messages[i], status: \"error\", duration: 3000 })\r\n            }\r\n        },\r\n        onSettled: () => setIsLoading(false)\r\n    })\r\n\r\n    const logoutAsync = async (msg?: string) => {\r\n        await new Promise(resolve => setTimeout(resolve, 1000));\r\n        setUser(undefined);\r\n        setToken(null);\r\n        localStorage.removeItem(\"token\");\r\n        toast({\r\n            title: msg ? msg : \"Logged out successfully!\",\r\n            isClosable: true,\r\n            duration: 3000,\r\n            status: \"success\"\r\n        })\r\n        await new Promise(resolve => setTimeout(resolve, 500));\r\n    }\r\n\r\n    const loginAsync = async (request: LoginRequest) => {\r\n        setIsLoading(true);\r\n        await new Promise(resolve => setTimeout(resolve, 1000));\r\n        try {\r\n            mutateLogin.mutate(request);\r\n        }\r\n        catch (e) {\r\n            console.log(e);\r\n        }\r\n        finally {\r\n            setIsLoading(false);\r\n        }\r\n    }\r\n\r\n    const registerAsync = async (request: RegisterRequest) => {\r\n        setIsLoading(true);\r\n        await new Promise(resolve => setTimeout(resolve, 1000));\r\n        try {\r\n            mutateRegister.mutate(request);\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n        finally {\r\n            setIsLoading(false);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <AuthContext.Provider value={{\r\n            loginAsync: loginAsync,\r\n            logoutAsync: logoutAsync,\r\n            updateToken: updateToken,\r\n            isLoading: isLoading,\r\n            user: user,\r\n            registerAsync: registerAsync\r\n        }}>\r\n            {children}\r\n        </AuthContext.Provider>\r\n    )\r\n}","E:\\Repos\\hostel-chakra\\Hostel\\src\\Components\\LoginForm.tsx",["328","329","330","331","332","333"],"import { Box, FormControl, FormLabel, Input, Button, Checkbox, FormErrorMessage, chakra, useDisclosure, Collapse } from '@chakra-ui/react';\r\nimport React from 'react'\r\nimport { FaArrowRight } from 'react-icons/fa';\r\nimport { useHistory } from 'react-router';\r\nimport { AuthContext } from '../Contexts/AuthContext';\r\n\r\ntype LoginFormProps = {\r\n    initRef?: React.RefObject<HTMLInputElement>;\r\n    fromUrl?: string;\r\n    isRegistering: boolean;\r\n}\r\n\r\ntype FormState = {\r\n    email?: string;\r\n    password?: string;\r\n    confirmedPassword?: string;\r\n    remember: boolean;\r\n    isRegistering: boolean;\r\n}\r\n\r\nfunction validateEmail(email: string | undefined) {\r\n    if (!email) return false;\r\n    const re = /^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\r\n    return re.test(email);\r\n}\r\n\r\n\r\nconst LoginForm: React.FC<LoginFormProps> = ({ initRef, fromUrl, isRegistering }) => {\r\n    const history = useHistory();\r\n\r\n    const [loginForm, setLoginForm] = React.useState<FormState>({\r\n        remember: false,\r\n        isRegistering: isRegistering\r\n    });\r\n\r\n    const [emailError, setEmailError] = React.useState(false);\r\n    const [passwordError, setPasswordError] = React.useState(false);\r\n    const [confirmPasswordError, setConfirmPasswordError] = React.useState(false);\r\n\r\n    const validateForm = (email: string | undefined, password: string | undefined) => {\r\n        if (validateEmail(email)) {\r\n            setEmailError(false);\r\n        } else setEmailError(true);\r\n        if (password === \"\") {\r\n            setPasswordError(true)\r\n        } else setPasswordError(false);\r\n    }\r\n\r\n    React.useEffect(() => {\r\n        validateForm(loginForm.email, loginForm.password);\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [loginForm.email, loginForm.password])\r\n\r\n    React.useEffect(() => {\r\n        if (loginForm.isRegistering && loginForm.confirmedPassword === loginForm.password) {\r\n            console.log(loginForm.password);\r\n            console.log(loginForm.confirmedPassword);\r\n\r\n            setConfirmPasswordError(false);\r\n            console.log(confirmPasswordError);\r\n        } else setConfirmPasswordError(true);\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [loginForm.confirmedPassword, loginForm.isRegistering, loginForm.password])\r\n\r\n    const authContext = React.useContext(AuthContext);\r\n\r\n    const handleLogin = () => {\r\n        authContext.loginAsync(loginForm);\r\n        if (fromUrl) history.replace(fromUrl);\r\n    }\r\n\r\n    const handleRegister = () => {\r\n        authContext.registerAsync({ email: loginForm.email, password: loginForm.password, confirmPassword: loginForm.confirmedPassword });\r\n        if (fromUrl) history.replace(fromUrl);\r\n    }\r\n\r\n    const toggleMode = () => {\r\n        setLoginForm((s) => ({\r\n            ...s,\r\n            isRegistering: !s.isRegistering\r\n        }))\r\n    }\r\n\r\n    return (\r\n        <chakra.form d=\"flex\" flexDir=\"column\">\r\n            <FormControl isInvalid={emailError}>\r\n                <FormLabel htmlFor=\"email\">Email</FormLabel>\r\n                <Input placeholder=\"Enter your email\" id=\"email\" isInvalid={emailError} ref={initRef} variant=\"filled\" size=\"lg\" type=\"email\"\r\n                    value={loginForm.email} isRequired\r\n                    onChange={(e) => setLoginForm(s => ({\r\n                        ...s,\r\n                        email: e.target.value.trim()\r\n                    }))}></Input>\r\n                <FormErrorMessage>{\"Email not correct\"}</FormErrorMessage>\r\n            </FormControl>\r\n\r\n            <FormControl isInvalid={passwordError}>\r\n                <FormLabel htmlFor=\"password\" my=\"2\">Password</FormLabel>\r\n                <Input placeholder=\"Enter your password\" id=\"password\" isInvalid={passwordError} variant=\"filled\" size=\"lg\" type=\"password\"\r\n                    value={loginForm.password} minLength={1} isRequired\r\n                    onChange={(e) => setLoginForm(s => ({\r\n                        ...s,\r\n                        password: e.target.value\r\n                    }))}></Input>\r\n            </FormControl>\r\n\r\n            <Collapse in={loginForm.isRegistering}>\r\n                <FormControl isInvalid={confirmPasswordError}>\r\n                    <FormLabel htmlFor=\"confirm-password\" my=\"2\">Confirm Password</FormLabel>\r\n                    <Input placeholder=\"Confirm your password\" id=\"confirm-password\" isInvalid={confirmPasswordError} variant=\"filled\" size=\"lg\" type=\"password\"\r\n                        value={loginForm.confirmedPassword} minLength={1} isRequired\r\n                        onChange={(e) => setLoginForm(s => ({\r\n                            ...s,\r\n                            confirmedPassword: e.target.value\r\n                        }))}></Input>\r\n                </FormControl>\r\n                <FormErrorMessage>{\"Password does not match\"}</FormErrorMessage>\r\n            </Collapse>\r\n\r\n            <Checkbox size=\"lg\" checked={loginForm.remember} mt=\"2\"\r\n                onChange={(e) => setLoginForm(s => ({ ...s, remember: e.target.checked }))}>\r\n                Remember me\r\n                </Checkbox>\r\n\r\n            <Button my=\"3\" w=\"30%\" rounded=\"full\" type=\"submit\" alignSelf=\"center\" title=\"Login\"\r\n                isLoading={authContext.isLoading}\r\n                isDisabled={loginForm.isRegistering ? emailError || passwordError || confirmPasswordError : emailError || passwordError}\r\n                onClick={!loginForm.isRegistering ? handleLogin : handleRegister}>\r\n                <FaArrowRight />\r\n            </Button>\r\n\r\n            <Button variant=\"link\" alignSelf=\"center\" textStyle=\"\" onClick={() => toggleMode()}>{!loginForm.isRegistering ? \"Register your account!\" : \"Or login instead!\"}</Button >\r\n        </chakra.form>\r\n    );\r\n}\r\n\r\nexport default LoginForm;","E:\\Repos\\hostel-chakra\\Hostel\\src\\Pages\\ProfilePage.tsx",["334","335","336","337","338"],"import { Avatar, Box, BoxProps, Button, Divider, Flex, Grid, HStack, Icon, IconButton, ListItem, Modal, ModalBody, ModalContent, ModalHeader, ModalOverlay, ModalProps, SimpleGrid, Spacer, Stack, Textarea, UnorderedList, useColorModeValue, useDisclosure, useToast, VStack } from '@chakra-ui/react';\r\nimport React from 'react'\r\nimport { BsStar, BsStarFill } from 'react-icons/bs';\r\nimport { FaCheck, FaStar, FaUserShield } from 'react-icons/fa';\r\nimport { useMutation, useQuery } from 'react-query';\r\nimport { useLocation } from 'react-router';\r\nimport { deleteReservation, fetchPropertiesSaved, fetchUserReservation, postReview, toggleLike, useQueryParam } from '../API';\r\nimport RoomCard from '../Components/FilterComponents/RoomCard';\r\nimport { AuthContext } from '../Contexts/AuthContext';\r\n\r\n\r\nconst ProfilePage = () => {\r\n    const { user } = React.useContext(AuthContext);\r\n\r\n    let query = useQueryParam();\r\n    let view = query.get(\"view\")?.toLowerCase();\r\n\r\n    return (\r\n        <Box d=\"flex\" flexDir={{ base: \"column\", md: \"row\" }}>\r\n            {/* LEFT */}\r\n            <Box w={{ base: \"100%\", md: \"25%\" }} minW=\"300px\">\r\n                <Box d=\"flex\" overflow=\"hidden\" borderWidth=\"1px\" borderRadius=\"lg\" p=\"4\" flexDir={{ base: \"row-reverse\", md: \"column\" }} spacing=\"2\">\r\n                    <VStack alignSelf=\"center\" justifySelf=\"start\">\r\n                        <Avatar name={user?.name} boxSize={{ base: \"20\", md: \"40\" }}></Avatar>\r\n                        <Button variant=\"link\" my=\"2\" fontSize=\"sm\">Update photo</Button>\r\n                    </VStack>\r\n\r\n                    <VStack alignItems=\"start\" spacing=\"2\">\r\n                        <Icon as={FaUserShield} boxSize=\"8\" />\r\n                        <Box as=\"h4\" fontWeight=\"bold\" fontSize=\"lg\" fontFamily=\"mono\">Identity verification</Box>\r\n                        <Box as=\"h4\">Show others you’re really you with the identity verification badge.</Box>\r\n\r\n                        <Divider />\r\n\r\n                        <Box as=\"h4\" fontWeight=\"bold\" fontSize=\"lg\" fontFamily=\"mono\">{user?.name + \" confirmed\"}</Box>\r\n                        <Box d=\"flex\" flexDir=\"row\" alignItems=\"baseline\">\r\n                            <FaCheck />\r\n                            <Box as=\"h4\" ml=\"4\">Email confirmed</Box>\r\n                        </Box>\r\n                        <Box d=\"flex\" flexDir=\"row\" alignItems=\"baseline\">\r\n                            <FaCheck />\r\n                            <Box as=\"h4\" ml=\"4\">Phone confirmed</Box>\r\n                        </Box>\r\n                    </VStack>\r\n                </Box>\r\n            </Box>\r\n\r\n            <Spacer minW=\"2\" />\r\n\r\n            {/* RIGHT */}\r\n            <Box w={{ base: \"100%\", md: \"65%\" }}>\r\n                {(view === \"likes\" || view == null) && <UserLikesProperties></UserLikesProperties>}\r\n                {view === \"notifications\" && <Notifications></Notifications>}\r\n                {view === \"reservations\" && <Reservations></Reservations>}\r\n            </Box>\r\n        </Box>\r\n    )\r\n}\r\n\r\n\r\ntype ReviewModalProps = {\r\n    reservationId: string;\r\n    propId: string;\r\n}\r\nconst ReviewModal = (modalProps: ModalProps & ReviewModalProps) => {\r\n    const [starHover, setStarHover] = React.useState(0);\r\n    const [starReview, setStarReview] = React.useState(0);\r\n    const [comment, setComment] = React.useState<string>();\r\n    const starColor = useColorModeValue(\"red\", \"yellow\");\r\n\r\n    const toast = useToast();\r\n\r\n    const { onClose } = modalProps;\r\n\r\n    const mutateReview = useMutation(postReview, {\r\n        onSuccess: (res) => {\r\n            console.log(res.data);\r\n            toast({\r\n                description: \"Successfully sent review\",\r\n                status: \"success\"\r\n            })\r\n        },\r\n        onError: (e) => {\r\n            console.log(e);\r\n        }\r\n    });\r\n    const sendReview = () => {\r\n        mutateReview.mutate({\r\n            propertyId: modalProps.propId,\r\n            starCount: starReview,\r\n            reviewComment: comment,\r\n            reservationId: modalProps.reservationId\r\n        })\r\n    }\r\n\r\n    return (\r\n        <Modal {...modalProps} onClose={() => { setStarReview(0); onClose(); }}>\r\n            <ModalOverlay />\r\n            <ModalContent>\r\n                <ModalHeader>Write a review</ModalHeader>\r\n                <ModalBody>\r\n                    <Flex flexDir=\"column\" gridGap=\"2\">\r\n                        <Box>\r\n                            {Array(5).fill(5).map((_, index) => {\r\n                                return (\r\n                                    <IconButton variant=\"ghost\" aria-label=\"star\" key={index}\r\n                                        onClick={() => { setStarReview(index + 1) }}\r\n                                        _focus={{ borderWidth: \"1px\" }}\r\n                                        borderRadius=\"full\" onMouseOver={() => setStarHover(index + 1)} onMouseLeave={() => setStarHover(0)}\r\n                                        icon={starHover > index || starReview > index ? <BsStarFill color={starColor} /> : <BsStar />} />)\r\n                            })}\r\n                        </Box>\r\n                        <Textarea size=\"md\" placeholder=\"Please describe some of your thoughts\"\r\n                            value={comment}\r\n                            onChange={(e) => setComment(e.target.value)}\r\n                        />\r\n                        <Button ml=\"auto\" isDisabled={starReview <= 0} onClick={sendReview}>Send</Button>\r\n                    </Flex>\r\n                </ModalBody>\r\n            </ModalContent>\r\n        </Modal>\r\n    )\r\n}\r\n\r\nconst Reservations = (boxprops: BoxProps) => {\r\n    const reviewModal = useDisclosure();\r\n    const auth = React.useContext(AuthContext)\r\n    const toast = useToast();\r\n    const [propIdReview, setPropIdReview] = React.useState(\"\");\r\n\r\n    const { data, error, isError } = useQuery([\"reservations\", auth.user?.token], fetchUserReservation, {\r\n        onSuccess: (res) => {\r\n\r\n        },\r\n        retry: 2,\r\n    })\r\n\r\n    const deleteRsvMutate = useMutation<any, MessageResponse, any, any>(deleteReservation, {\r\n        onSuccess: () => { toast({ description: \"Reservation is canceled\", status: \"success\" }) },\r\n        onError: (error) => {\r\n            toast({ description: error.errors, status: \"success\" })\r\n        }\r\n    })\r\n\r\n    const handleDelete = (resId: string) => {\r\n        deleteRsvMutate.mutate(resId);\r\n    }\r\n\r\n    if (data?.data.length === 0) {\r\n        return <Box>\r\n            You don't have any reservations\r\n        </Box>\r\n    }\r\n\r\n    if (isError) return <Box>Something's wrong</Box>\r\n\r\n    return <Box {...boxprops}>\r\n        <Flex gridGap=\"2\" flexDir=\"column\">\r\n            <Box as={\"h1\"} fontFamily={\"heading\"} fontWeight=\"bold\" fontSize=\"4xl\" mb=\"3\">Your reservations</Box>\r\n            {data?.data.map(d =>\r\n                <Box borderWidth=\"1px\" p=\"2\"\r\n                    style={{ transition: \"ease 0.3s\" }}\r\n                    _hover={{ transform: \"scale(1.02)\" }}\r\n                    // eslint-disable-next-line react-hooks/rules-of-hooks\r\n                    bg={useColorModeValue('gray.100', 'gray.800')}\r\n                    borderRadius=\"10px\"\r\n                >\r\n                    <Flex key={d.id} w=\"100%\" flexDir=\"row\" gridGap=\"2\">\r\n                        <Stack w=\"100%\" gridGap=\"2\">\r\n                            <UnorderedList h=\"100%\">\r\n                                <Grid h=\"100%\" fontWeight=\"bold\" gridTemplateColumns={{ base: \"1fr\", md: \"1fr 1fr\" }} templateRows=\"auto\" gridGap=\"2\">\r\n                                    <ListItem><Box as=\"h3\">From Date: </Box></ListItem>\r\n                                    <Box fontWeight=\"light\">{d.fromDate}</Box>\r\n                                    <ListItem><Box as=\"h3\">To Date: </Box></ListItem>\r\n                                    <Box fontWeight=\"light\">{d.toDate}</Box>\r\n                                    <ListItem><Box as=\"h3\">Total Cost: </Box></ListItem>\r\n                                    <Box fontWeight=\"light\">{d.total}</Box>\r\n                                    <ListItem><Box as=\"h3\">Reserved from: </Box></ListItem>\r\n                                    <Box fontWeight=\"light\">{d.createdAt}</Box>\r\n                                    <ListItem><Box as=\"h3\">Reservations Status: </Box></ListItem>\r\n                                    <Box fontWeight=\"light\">{d.reservationStatus}</Box>\r\n                                    <ListItem><Box as=\"h3\">Payment Status: </Box></ListItem>\r\n                                    <Box fontWeight=\"light\">{d.paymentStatus}</Box>\r\n                                    <Button colorScheme=\"green\"\r\n                                        onClick={() => { setPropIdReview(d.property.id); reviewModal.onOpen(); }}>Write a review</Button>\r\n                                    <Button colorScheme=\"red\"\r\n                                        isDisabled={d.reservationStatus.toLowerCase() !== \"on reserved\"}\r\n                                        onClick={() => { handleDelete(d.id) }}>Cancel reservation</Button>\r\n                                </Grid>\r\n                            </UnorderedList>\r\n                        </Stack>\r\n                        <Box ml=\"auto\" >\r\n                            <Divider orientation=\"vertical\" borderColor=\"currentcolor\" />\r\n                        </Box>\r\n                        <RoomCard room={d.property} isSaved={true} flex='0 0 15em' borderWidth=\"0px\" />\r\n                    </Flex>\r\n                </Box>\r\n            )}\r\n            <ReviewModal isOpen={reviewModal.isOpen} isCentered onClose={reviewModal.onClose} reservationId=\"\" propId={propIdReview}>\r\n            </ReviewModal>\r\n        </Flex>\r\n    </Box>\r\n}\r\n\r\nconst UserLikesProperties = () => {\r\n    const { data } = useQuery(\"propertiesLiked\", () => fetchPropertiesSaved(), {\r\n        onSuccess: (res) => {\r\n        },\r\n        refetchOnMount: \"always\",\r\n    })\r\n\r\n    if (data?.data.length === 0) return <Box>Looks like you didn't save any room</Box>\r\n\r\n    return (\r\n        <Box>\r\n            <Box as={\"h1\"} fontFamily={\"heading\"} fontWeight=\"bold\" fontSize=\"4xl\" mb=\"3\">Rooms that you saved</Box>\r\n            <SimpleGrid spacing=\"4\" columns={{ base: 1, lg: 2 }}>\r\n                {data?.data.map(r => <RoomCard room={r} key={r.id} isSaved={true} />)}\r\n            </SimpleGrid>\r\n        </Box>\r\n    );\r\n}\r\n\r\nconst Notifications: React.FC = () => {\r\n    return (\r\n        <Box>Notification</Box>\r\n    )\r\n}\r\n\r\nexport default ProfilePage;","E:\\Repos\\hostel-chakra\\Hostel\\src\\Pages\\PublishRoomPage.tsx",["339","340","341","342","343","344","345","346"],"import { FormControl, FormLabel } from '@chakra-ui/form-control';\r\nimport { Input } from '@chakra-ui/input';\r\nimport { Box, BoxProps, Divider, SimpleGrid, VStack, Link, Flex, Spacer, Center } from '@chakra-ui/layout';\r\nimport { Button, chakra, CloseButton, IconButton, Image, NumberInput, NumberInputField, Slider, SliderFilledTrack, SliderThumb, SliderTrack, Spinner, Switch, useToast } from '@chakra-ui/react';\r\nimport { Select } from '@chakra-ui/select';\r\nimport { Textarea } from '@chakra-ui/textarea';\r\nimport React, { FC } from 'react'\r\nimport { FaMinus, FaPlus } from 'react-icons/fa';\r\nimport { useMutation, useQuery } from 'react-query';\r\nimport { Link as RouterLink, Redirect, RouteProps, SwitchProps, useLocation, useParams } from 'react-router-dom';\r\nimport { deleteImage, fetchCities, fetchPropertyById, fetchPropertyTypes, fetchServices, postImage, postRoom, useQueryParam } from '../API';\r\nimport { CityResponse } from '../Components/NavComponents/SearchBar';\r\n\r\n\r\ntype Country = {\r\n    id: string;\r\n    countryName: string;\r\n}\r\n\r\ntype QueryParams = {\r\n    isEditting?: boolean;\r\n    propId?: string;\r\n}\r\n\r\nconst getUniqeCountries = (res: CityResponse[]) => {\r\n    let countries: Country[] = [];\r\n    let indexes = new Set<string>();\r\n    for (let i of res) {\r\n        if (!indexes.has(i.countryId)) {\r\n            countries.push({ id: i.countryId, countryName: i.countryName });\r\n        }\r\n        indexes.add(i.countryId);\r\n    }\r\n    return countries;\r\n}\r\n\r\nconst PublishRoomPage: FC<BoxProps> = (props) => {\r\n    const toast = useToast();\r\n    const [queryParams, setQueryParams] = React.useState<QueryParams>({ isEditting: false });\r\n\r\n    const { data: resCities, isLoading, status } = useQuery<unknown, unknown, CityResponse[]>(\"cities\", fetchCities, {\r\n        staleTime: 1000 * 60 * 10,\r\n        onSuccess: (res) => {\r\n            console.log(res);\r\n            let ctr = getUniqeCountries(res)\r\n            setCountries(ctr);\r\n        }\r\n    });\r\n    const { data: resTypes, isError } = useQuery<unknown, unknown, PropertyTypeType[]>(\"propertypeList\", fetchPropertyTypes, {\r\n        staleTime: 1000 * 60 * 10,\r\n        onSuccess: () => { console.log(\"got types\") }\r\n    });\r\n    const serviceQuery = useQuery(\"services\", fetchServices, {\r\n        onSuccess: (rs) => {\r\n            console.log(rs.data);\r\n        },\r\n        onError: (e) => console.log(e),\r\n    });\r\n\r\n    const editingProp = useQuery([\"property\", queryParams.propId], () => {\r\n        if (queryParams.propId) return fetchPropertyById(queryParams.propId)\r\n    }, {\r\n        onSuccess: (rs) => {\r\n            console.log(rs?.data);\r\n            if (rs?.data) {\r\n                const editing = rs.data;\r\n                setRoom(r => ({\r\n                    ...r,\r\n                    name: editing.name,\r\n                    basePrice: editing.formattedPrice,\r\n                    cleaningFee: editing.cleaningFee,\r\n                    description: editing.description,\r\n                    introdution: editing.introduction,\r\n                    serviceFee: editing.serviceFee,\r\n                    maxGuest: editing.maxGuest,\r\n                    images: editing.images,\r\n                }));\r\n            }\r\n        },\r\n        refetchOnMount: false,\r\n        refetchOnReconnect: false,\r\n        refetchOnWindowFocus: false\r\n    })\r\n\r\n    const [countries, setCountries] = React.useState<Country[] | undefined>(resCities && getUniqeCountries(resCities));\r\n\r\n    const query = useQueryParam();\r\n    let location = useLocation();\r\n\r\n    // check editting property if location changes\r\n    React.useEffect(() => {\r\n        const id = query.get(\"id\")?.toLocaleLowerCase();\r\n        if (id) {\r\n            console.log(id);\r\n            setQueryParams({ propId: id, isEditting: true });\r\n        }\r\n        return function cleanup() {\r\n            setQueryParams({ propId: undefined, isEditting: false });\r\n        }\r\n    }, [location])\r\n\r\n    const [room, setRoom] = React.useState<PublishRoomState>({\r\n        cityId: \"1\",\r\n        countryId: \"\",\r\n        description: \"Test description\",\r\n        images: [\r\n            {\r\n                url: \"https://picsum.photos/1100/1000?random=1\",\r\n                alt: \"alt\",\r\n                deleteHash: \"delHash\"\r\n            },\r\n            {\r\n                url: \"https://picsum.photos/1100/1000?random=2\",\r\n                alt: \"alt\",\r\n                deleteHash: \"delHash\"\r\n            },\r\n            {\r\n                url: \"https://picsum.photos/1100/1000?random=3\",\r\n                alt: \"alt\",\r\n                deleteHash: \"delHash\"\r\n            },\r\n            {\r\n                url: \"https://picsum.photos/1100/1000?random=10\",\r\n                alt: \"alt\",\r\n                deleteHash: \"delHash\"\r\n            },\r\n            {\r\n                url: \"https://picsum.photos/1100/1000?random=15\",\r\n                alt: \"alt\",\r\n                deleteHash: \"delHash\"\r\n            }\r\n        ],\r\n        maxGuest: 0,\r\n        propTypeId: \"\",\r\n        introdution: \"Lorem ipsum dolor sit amet consectetur adipisicing elit. Architecto minus ad assumenda dignissimos. Perferendis optio est nam accusamus aliquid voluptas?\",\r\n        name: \"Lorem ipsum\",\r\n        refundPercent: 100,\r\n        number: \"12\",\r\n        streetName: \"Street asdfgg\",\r\n        serviceIdList: [\"1\", \"2\"],\r\n        basePrice: 250,\r\n        cleaningFee: 10,\r\n        serviceFee: 0\r\n    });\r\n\r\n    const publish = useMutation(postRoom, {\r\n        onSuccess: (res) => {\r\n            toast({ description: res.data, status: \"success\" })\r\n        },\r\n        onError: (err) => {\r\n            console.log(err);\r\n            toast({ description: \"Something's wrong\", status: \"error\" })\r\n        },\r\n    })\r\n\r\n    const handlePublish = (e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\r\n        e.preventDefault();\r\n        if (queryParams.isEditting) {\r\n\r\n        }\r\n        else {\r\n            publish.mutate(room);\r\n        }\r\n    }\r\n\r\n    React.useEffect(() => {\r\n        return function cleanup() { localStorage.removeItem(\"previewRoom\"); }\r\n    }, [])\r\n\r\n    const handleImagesInput = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n        if (e.target.files != null) {\r\n            const files = Array.from(e.target.files);\r\n            const formData = new FormData();\r\n\r\n            formData.append(\"image\", files[0]);\r\n            postImage(formData).then((msg) => msg.data).catch(e => console.log(e));\r\n            deleteImage(\"\").then(msg => console.log(msg.data));\r\n        }\r\n    }\r\n\r\n    const handleDeleteImage = (image: Image) => {\r\n        const imgs = room.images;\r\n        imgs.find((value, index) => {\r\n            if (value === image) delete imgs[index];\r\n        });\r\n        setRoom(r => ({ ...r, images: imgs }));\r\n    }\r\n\r\n    if (editingProp.isLoading) {\r\n        return (<Spinner />)\r\n    }\r\n\r\n    if (editingProp.isError) {\r\n        return <Redirect to=\"/error\" />\r\n    }\r\n\r\n    return (\r\n        <chakra.form>\r\n            <Box d='flex' flexDir=\"column\" mt=\"10\" {...props}>\r\n                <VStack spacing=\"8\" w=\"75%\" alignSelf=\"center\">\r\n                    <Box as=\"h1\" fontSize=\"3xl\" fontWeight=\"bold\" alignSelf=\"start\">{queryParams.propId ? \"Edit your property\" : \"Publish your new property\"}</Box>\r\n                    <Divider borderColor=\"currentcolor\" />\r\n\r\n                    {/* Property info */}\r\n                    <Box d={{ base: \"inline-block\", lg: \"flex\" }} flexDir=\"row\" w=\"100%\" fontWeight=\"medium\">\r\n                        <Box as=\"h2\" fontSize=\"lg\" w={{ base: \"100%\", lg: \"30%\" }} mb=\"5\">Property info</Box>\r\n\r\n                        <VStack alignItems=\"start\" w=\"100%\">\r\n                            <FormControl isRequired id=\"prop-name\">\r\n                                <FormLabel as=\"h2\" fontSize=\"md\">Property Name</FormLabel>\r\n                                <Input variant=\"filled\" required\r\n                                    value={room.name}\r\n                                    onChange={(e) =>\r\n                                        setRoom(r => ({\r\n                                            ...r,\r\n                                            name: e.target.value\r\n                                        }))\r\n                                    }\r\n                                />\r\n                            </FormControl>\r\n                            <FormControl isRequired id=\"prop-type\">\r\n                                <FormLabel as=\"h2\" fontSize=\"md\">Property's Type</FormLabel>\r\n                                <Select variant=\"filled\" placeholder=\"--Choose your property type--\"\r\n                                    onChange={(e) => setRoom((r) => ({ ...r, propTypeId: e.target.value, cityId: \"\" }))}\r\n                                >\r\n                                    {resTypes?.map(rt => {\r\n                                        return <option value={rt.id} key={rt.id}>{rt.propertyType}</option>\r\n                                    })}\r\n                                </Select>\r\n                            </FormControl>\r\n                            <FormControl isRequired id=\"prop-description\">\r\n                                <FormLabel as=\"h2\" fontSize=\"md\">Description</FormLabel>\r\n                                <Input variant=\"filled\" required\r\n                                    value={room.description}\r\n                                    onChange={(e) => setRoom((r) => ({ ...r, description: e.target.value }))}\r\n                                />\r\n                            </FormControl>\r\n                            <FormControl isRequired id=\"prop-introduction\">\r\n                                <FormLabel as=\"h2\" fontSize=\"md\">Introduction</FormLabel>\r\n                                <Textarea rows={4} required variant=\"filled\"\r\n                                    value={room.introdution}\r\n                                    onChange={(e) => setRoom((r) => ({ ...r, introdution: e.target.value }))}\r\n                                />\r\n                            </FormControl>\r\n                        </VStack>\r\n                    </Box>\r\n                    <Divider borderColor=\"currentcolor\" />\r\n\r\n                    {/* Location info */}\r\n                    <Box d={{ base: \"inline-block\", lg: \"flex\" }} flexDir=\"row\" w=\"100%\" fontWeight=\"medium\">\r\n                        <Box as=\"h2\" fontSize=\"lg\" w={{ base: \"100%\", lg: \"30%\" }} mb=\"5\">Location info</Box>\r\n                        <VStack alignItems=\"start\" w=\"100%\">\r\n                            <FormControl isRequired id=\"prop-country\">\r\n                                <FormLabel as=\"h2\" fontSize=\"md\">Country</FormLabel>\r\n                                <Select variant=\"filled\" placeholder=\"--Choose your country--\"\r\n                                    onChange={(e) => setRoom((r) => ({ ...r, countryId: e.target.value, cityId: \"\" }))}\r\n                                >\r\n                                    {countries?.map(c => {\r\n                                        return <option value={c.id} key={c.countryName}>{c.countryName}</option>\r\n                                    })}\r\n                                </Select>\r\n                            </FormControl>\r\n                            <FormControl isRequired id=\"prop-city\">\r\n                                <FormLabel as=\"h2\" fontSize=\"md\">City</FormLabel>\r\n                                <Select variant=\"filled\" placeholder=\"--Choose your city--\"\r\n                                    onChange={(e) => {\r\n                                        setRoom((r) => ({ ...r, cityId: e.target.value }))\r\n                                    }}\r\n                                >\r\n                                    {resCities?.filter(ct => ct.countryId === room.countryId).map(c => {\r\n                                        return <option value={c.id} key={c.id}>{c.cityName}</option>\r\n                                    })}\r\n                                </Select>\r\n                            </FormControl>\r\n                            <Flex gridGap=\"2\" w=\"100%\" flexDir={{ base: 'column', lg: \"row\" }}>\r\n                                <FormControl isRequired id=\"prop-street\" flex=\"0 1 60%\">\r\n                                    <FormLabel as=\"h2\" fontSize=\"md\">Street Name</FormLabel>\r\n                                    <Input required variant=\"filled\" value={room.streetName}\r\n                                        onChange={(e) => { setRoom((r) => ({ ...r, streetName: e.target.value })) }}\r\n                                    />\r\n                                </FormControl>\r\n                                <FormControl isRequired id=\"prop-number\" flex=\"0 1 40%\">\r\n                                    <FormLabel as=\"h2\" fontSize=\"md\">Property's number</FormLabel>\r\n                                    <Input required variant=\"filled\" value={room.number}\r\n                                        onChange={(e) => { setRoom((r) => ({ ...r, number: e.target.value })) }}\r\n                                    />\r\n                                </FormControl>\r\n                            </Flex>\r\n                            <FormControl id=\"prop-add-note\">\r\n                                <FormLabel as=\"h2\" fontSize=\"md\">Notes to client<Box as=\"span\" fontStyle=\"oblique\" fontWeight=\"light\">(optional)</Box></FormLabel>\r\n                                <Input variant=\"filled\" value={room.addressDesc}\r\n                                    onChange={(e) => { setRoom((r) => ({ ...r, addressDesc: e.target.value })) }}\r\n                                />\r\n                            </FormControl>\r\n                        </VStack>\r\n                    </Box>\r\n                    <Divider borderColor=\"currentcolor\" />\r\n\r\n                    {/* Images */}\r\n                    <Box d={{ base: \"inline-block\", lg: \"flex\" }} flexDir=\"row\" w=\"100%\" fontWeight=\"medium\" justifyContent=\"space-between\">\r\n                        <Box as=\"h2\" fontSize=\"lg\" w={{ base: \"100%\", lg: \"30%\" }} mb=\"5\" flexWrap=\"wrap\">\r\n                            Images\r\n                            <Box as=\"span\" fontStyle=\"oblique\" fontWeight=\"light\">{\" (At least 5 images)\"}</Box>\r\n                        </Box>\r\n                        <VStack alignItems=\"start\" w=\"100%\">\r\n                            <Input required variant=\"ghost\" type=\"file\" justifySelf=\"flex-end\" multiple accept=\"image/*\" onChange={(e) => handleImagesInput(e)} />\r\n                            <SimpleGrid columns={{ base: 2, md: 3, lg: 4 }} gridGap=\"2\">\r\n                                {room.images.map((i, index) =>\r\n                                    <Box key={index} position=\"relative\" transition=\"all ease 0.5s\">\r\n                                        <Image src={i.url}\r\n                                            display=\"block\"\r\n                                            _hover={{ opacity: \"0.5\" }}\r\n                                            style={{ backfaceVisibility: \"hidden\" }} />\r\n                                        <Center opacity=\"0\"\r\n                                            w=\"100%\"\r\n                                            h=\"100%\"\r\n                                            position=\"absolute\"\r\n                                            top=\"50%\" left=\"50%\"\r\n                                            transform=\"translate(-50%, -50%)\"\r\n                                            transition=\"all ease 0.5s\"\r\n                                            _hover={{ opacity: \"1\" }}>\r\n                                            <CloseButton size=\"lg\" colorScheme=\"red\" color=\"red\" onClick={() => { handleDeleteImage(i) }} />\r\n                                        </Center>\r\n                                    </Box>\r\n                                )}\r\n                            </SimpleGrid>\r\n                        </VStack>\r\n                    </Box>\r\n                    <Divider borderColor=\"currentcolor\" />\r\n\r\n                    {/* Services */}\r\n                    <Box d={{ base: \"inline-block\", lg: \"flex\" }} flexDir=\"row\" w=\"100%\" fontWeight=\"medium\">\r\n                        <Box as=\"h2\" fontSize=\"lg\" w={{ base: \"100%\", lg: \"30%\" }} mb=\"5\">Services</Box>\r\n                        <Box w=\"100%\" >\r\n                            <SimpleGrid minChildWidth=\"12em\" spacingX=\"5rem\" spacingY=\"2\">\r\n                                <Flex gridGap=\"2\" alignItems=\"center\">\r\n                                    <Box as=\"h2\" fontSize=\"md\">\r\n                                        Max Guests\r\n                                </Box>\r\n                                    <Spacer />\r\n                                    <IconButton aria-label=\"Minus\" size=\"sm\" icon={<FaMinus />}\r\n                                        isDisabled={room.maxGuest <= 0}\r\n                                        onClick={() => setRoom((r) => ({ ...r, maxGuest: r.maxGuest-- }))}\r\n                                    />\r\n                                    <Box as=\"h3\" fontSize=\"md\" w=\"3ch\" textAlign=\"center\">\r\n                                        {room.maxGuest}\r\n                                    </Box>\r\n                                    <IconButton aria-label=\"Plus\" size=\"sm\" icon={<FaPlus />}\r\n                                        isDisabled={room.maxGuest >= 10}\r\n                                        onClick={() => setRoom((r) => ({ ...r, maxGuest: r.maxGuest++ }))}\r\n                                    />\r\n                                </Flex>\r\n                                {\r\n                                    serviceQuery.data?.data.map(d =>\r\n                                        <ServiceDisplay name={d.serviceName} key={d.serviceId}\r\n                                            isOn={room.serviceIdList.includes(d.serviceId)}\r\n                                            toggle={() => {\r\n                                                if (room.serviceIdList.includes(d.serviceId)) {\r\n                                                    const newIdList = room.serviceIdList.filter(s => s != d.serviceId)\r\n                                                    setRoom(r => ({ ...r, serviceIdList: newIdList }));\r\n                                                }\r\n                                                else {\r\n                                                    setRoom(r => ({ ...r, serviceIdList: [...r.serviceIdList, d.serviceId] }));\r\n                                                }\r\n                                            }}\r\n                                        />\r\n                                    )\r\n                                }\r\n                            </SimpleGrid>\r\n                        </Box>\r\n                    </Box>\r\n                    <Divider borderColor=\"currentcolor\" />\r\n\r\n                    {/* Pricing */}\r\n                    <Box d={{ base: \"inline-block\", lg: \"flex\" }} flexDir=\"row\" w=\"100%\" fontWeight=\"medium\">\r\n                        <Box as=\"h2\" fontSize=\"lg\" w={{ base: \"100%\", lg: \"30%\" }} mb=\"5\">Pricing ($)</Box>\r\n                        <VStack alignItems=\"start\" w=\"100%\">\r\n                            <ServiceDisplay isOn={room.refundPercent === 100 ? true : false}\r\n                                name=\"Allow full refund\" size=\"lg\"\r\n                                toggle={(checked) => { setRoom((r) => ({ ...r, refundPercent: checked ? 100 : 80 })) }}\r\n                            />\r\n                            {room.refundPercent !== 100 &&\r\n                                <Box>\r\n                                    Amount refund: {room.refundPercent}%\r\n                                </Box>\r\n                            }\r\n                            <Slider value={room.refundPercent} min={0} max={100} step={5} colorScheme=\"blue\"\r\n                                onChange={(percent) => { setRoom((r) => ({ ...r, refundPercent: percent })) }}>\r\n                                <SliderTrack>\r\n                                    <SliderFilledTrack />\r\n                                </SliderTrack>\r\n                                <SliderThumb boxSize={6} />\r\n                            </Slider>\r\n                            <FormControl isRequired id=\"prop-price-base\" isInvalid={room.basePrice === 0 ? true : false}>\r\n                                <FormLabel opacity={room.basePrice === 0 ? 0.4 : 1} as=\"h2\" fontSize=\"md\">Base price</FormLabel>\r\n                                <NumberInput value={room.basePrice}\r\n                                    onChange={(price) => { setRoom((r) => ({ ...r, basePrice: parseInt(price) | 0 })) }}\r\n                                >\r\n                                    <NumberInputField variant=\"filled\" required />\r\n                                </NumberInput>\r\n                            </FormControl>\r\n                            <FormControl isRequired id=\"prop-price-cleaning\">\r\n                                <FormLabel opacity={room.cleaningFee === 0 ? 0.4 : 1} as=\"h2\" fontSize=\"md\">Cleaning fee</FormLabel>\r\n                                <NumberInput value={room.cleaningFee}\r\n                                    onChange={(price) => { setRoom((r) => ({ ...r, cleaningFee: parseInt(price) | 0 })) }}\r\n                                >\r\n                                    <NumberInputField variant=\"filled\" required />\r\n                                </NumberInput>\r\n                            </FormControl>\r\n                            <FormControl isRequired id=\"prop-price-service\">\r\n                                <FormLabel opacity={room.serviceFee === 0 ? 0.4 : 1} as=\"h2\" fontSize=\"md\">Service fee</FormLabel>\r\n                                <NumberInput value={room.serviceFee}\r\n                                    onChange={(price) => { setRoom((r) => ({ ...r, serviceFee: parseInt(price) | 0 })) }}\r\n                                >\r\n                                    <NumberInputField variant=\"filled\" required />\r\n                                </NumberInput>\r\n                            </FormControl>\r\n                        </VStack>\r\n                    </Box>\r\n\r\n                    <Flex justifyContent=\"space-between\" w=\"100%\" px=\"10%\">\r\n                        <Link as={RouterLink} to=\"/room/preview\" _hover={{ textStyle: \"none\" }} target=\"_blank\" onClick={() => localStorage.setItem(\"previewRoom\", JSON.stringify(room))}>\r\n                            <Button variant=\"solid\" colorScheme=\"green\">\r\n                                See a preview\r\n                            </Button>\r\n                        </Link>\r\n\r\n                        <Button variant=\"solid\" type=\"submit\" colorScheme=\"blue\" onClick={(e) => handlePublish(e)}>\r\n                            {queryParams.isEditting ? \"Update property\" : \"Publish\"}\r\n                        </Button>\r\n\r\n                        {queryParams?.propId &&\r\n                            <Button variant=\"solid\" colorScheme=\"red\">\r\n                                Close this property\r\n                        </Button>}\r\n                    </Flex>\r\n                </VStack>\r\n            </Box>\r\n        </chakra.form>\r\n    );\r\n}\r\n\r\ninterface ServiceDisplayProps {\r\n    name: string;\r\n    id?: string;\r\n    isOn: boolean;\r\n    toggle: (checked: boolean) => void;\r\n}\r\n\r\nconst ServiceDisplay: React.FC<ServiceDisplayProps & SwitchProps> = (props) =>\r\n    <FormControl display=\"flex\" alignItems=\"center\" justifyContent=\"space-between\" pr=\"2\">\r\n        <FormLabel htmlFor={\"service_\" + props.name} mb=\"0\" opacity={props.isOn ? 1 : 0.4}>\r\n            {props.name}\r\n        </FormLabel>\r\n        <Switch id={\"service_\" + props.name} isChecked={props.isOn}\r\n            {...props}\r\n            onChange={(e) => { props.toggle(e.target.checked) }} />\r\n    </FormControl>\r\n\r\nexport default PublishRoomPage;","E:\\Repos\\hostel-chakra\\Hostel\\src\\API.ts",["347","348","349"],"import axios, { AxiosResponse } from \"axios\";\r\nimport { useLocation } from \"react-router-dom\";\r\n\r\n// export const API_URL = \"http://localhost:44344\";\r\nexport const API_URL = process.env.NODE_ENV === \"development\" ? \"http://localhost:44344\" : \"https://nicehostel.herokuapp.com\";\r\nconst API_IMAGE_UPLOADER_URL = \"https://api.imgur.com/3/upload\";\r\nconst API_IMAGE_CLIENT_ID = \"30ca2ca5dd1f71d\";\r\n// const API_IMAGE_CLIENT_SECRET = \"5e497c2ba20ff36c20aa512366ddee25300c56e1\";\r\n\r\nexport const axAuth = axios.create();\r\nexport const axImageUpload = axios.create();\r\n\r\naxAuth.interceptors.request.use((config) => {\r\n    const token = localStorage.getItem(\"token\");\r\n    config.headers.Authorization = `Bearer ${token}`;\r\n\r\n    return config;\r\n})\r\n\r\naxAuth.interceptors.response.use((response) => {\r\n    return response;\r\n}, function (error) {\r\n    if(error.response.status === 403){\r\n        \r\n    }\r\n    // if (error.response.status === 401) {\r\n    //     console.log('unauthorized');\r\n    //     localStorage.removeItem(\"token\");\r\n    // }\r\n    // if (error.response.status === 403){\r\n    //     console.log(\"Forbidden\");\r\n    // }\r\n    // else if(error.response.status === 404){\r\n    //     return Promise.reject(\"Connection error\")\r\n    // }\r\n    return Promise.reject(error.response);\r\n});\r\n\r\n// axios.interceptors.request.use((req) => {\r\n//     req.headers.Authorization = `Client-ID : ${API_IMAGE_CLIENT_ID}`\r\n//     return req;\r\n// })\r\n\r\ntype ReviewRequest = {\r\n    comment?: string;\r\n    reviewStar: number;\r\n    \r\n}\r\nexport const postReview = (data: PostReviewRequest) => {\r\n    return axAuth({\r\n        url: API_URL + \"/api/reviews/\",\r\n        method: \"POST\",\r\n        data: data,\r\n    })\r\n}\r\n\r\nexport const postRoom = (data: PublishRoomState) => {\r\n    return axAuth({\r\n        method: \"POST\",\r\n        url: API_URL + \"/api/properties/\",\r\n        data: data,\r\n    })\r\n}\r\n\r\nexport const postImage = (data : any) => axImageUpload({\r\n    method: \"post\",\r\n    url: API_IMAGE_UPLOADER_URL,\r\n    data: data,\r\n    headers: {\r\n        'Content-Type' : 'multipart/form-data',\r\n    },\r\n})\r\n\r\nexport const postReservation = (bookInfo: BookingInfo) => axAuth({\r\n    url: API_URL + \"/api/reservations\",\r\n    method: \"POST\",\r\n    data: JSON.stringify({\r\n        \"propertyId\": bookInfo.roomId,\r\n        \"fromDate\" : bookInfo.bookFromDate,\r\n        \"toDate\" : bookInfo.bookToDate,\r\n        \"adultNum\": bookInfo.guest,\r\n        \"childrenNum\" : bookInfo.children\r\n    }),        \r\n    headers: {\r\n        'Content-Type': \"application/json\"\r\n    }\r\n});\r\n\r\nexport const deleteImage = (delHash: string) => axAuth({\r\n    method: \"DELETE\",\r\n    url: `https://api.imgur.com/3/image/${delHash}`,\r\n})\r\n\r\nexport const authenticate = (req: LoginRequest) => {\r\n    return axAuth.post<UserResponse>(API_URL + \"/api/user/authenticate\", {\r\n            \"email\": req.email,\r\n            \"password\": req.password\r\n        });\r\n}\r\n\r\nexport const registerHost = () => axAuth.post<UserResponse>(API_URL + \"/api/user/register-host\");\r\n\r\nexport const register = (req: RegisterRequest) =>{\r\n    return axios.post<UserResponse>(API_URL + \"/api/user/register-user\", {\r\n        \"email\": req.email,\r\n        \"password\": req.password,\r\n        \"confirmPassword\": req.confirmPassword\r\n    })\r\n}\r\n\r\nexport const fetchPropertiesView = async (typeId: string | undefined, query: SearchQuery) => {\r\n    let URI = `/api/properties`;\r\n    console.log(query);\r\n    return axios.get<RoomCard[]>(API_URL + URI,{\r\n        params: {\r\n            typeId : typeId,\r\n            city: query.city,\r\n            from: query.from,\r\n            to: query.to,\r\n            guestNum : query.guestNum,\r\n            childrenNum: query.childrenNum,\r\n        }\r\n    });\r\n}\r\n\r\nexport const fetchCities = async () => {\r\n    // const res = await ax({\r\n    //     method: \"GET\",\r\n    //     url: URL + \"api/city\",\r\n    //     timeout: 5000\r\n    // });\r\n    // return res;\r\n    const res = await fetch(API_URL + \"/api/cities\");\r\n    const data = res.json();\r\n    return data;\r\n}\r\n\r\nexport const fetchPropertyTypes = async () => {\r\n    const res = await fetch(API_URL + \"/api/propertytypes\");\r\n    const data: PropertyTypeType[] = await res.json();\r\n    return data;\r\n}\r\n\r\nexport const fetchPropertyById = async (id: string) => {\r\n    return axAuth.get<Room>(API_URL + \"/api/properties/\" + id);\r\n}\r\n\r\nexport const fetchPropertiesSaved = () => {\r\n    return axAuth.get<RoomCard[]>(API_URL + \"/api/properties/saved\");\r\n}\r\n\r\nexport const fetchOwnerProperty = async () => axAuth.get<RoomCard[]>(API_URL + \"/api/properties/host\");\r\n\r\nexport const fetchPropertiesByPropStatusId = async (statusId?: string) => {\r\n    return axAuth.get<RoomCard[]>(API_URL + \"/api/properties/not-active\", {\r\n        params: statusId && statusId\r\n    });\r\n} \r\n\r\nexport const fetchUserReservation = async () => {\r\n    return axAuth.get<ReservationResponse[]>(API_URL + \"/api/reservations/user\");\r\n}\r\n\r\nexport const fetchPricing = (bookInfo: BookingInfo) => {\r\n    console.log(bookInfo);\r\n    return axios.get<CheckPricingResponse>(API_URL + \"/api/reservations/check-pricing\",{\r\n        params: {\r\n            fromDate: bookInfo.bookFromDate,\r\n            toDate: bookInfo.bookToDate,\r\n            propertyId: bookInfo.roomId,\r\n            guestNum: bookInfo.guest,\r\n            childrenNum: bookInfo.children\r\n        }\r\n    })\r\n}\r\n\r\nexport const fetchReviewsForProperty = async (propId?: string) => {\r\n    return axAuth.get<Review[]>(API_URL + `/api/reviews`, {\r\n        params: {\r\n            propertyId: propId,\r\n        }\r\n    });\r\n}\r\n\r\nexport const fetchServices = async () => axAuth.get<Service[]>(API_URL + \"/api/properties/services\");\r\n\r\n\r\nexport const deleteReservation = async (resId: string) => {\r\n    return axAuth.delete(API_URL + \"/api/reservations/\" + resId);\r\n}\r\n\r\nexport const closeProperty = async (propId: string) => {\r\n    return axAuth.put(API_URL + \"/api/properties/toggle-close/\" + propId);\r\n}\r\n\r\nexport const useQueryParam = () => {\r\n    return new URLSearchParams(useLocation().search);\r\n}\r\n\r\n\r\ninterface ToggleLikeProps {\r\n    roomId: string,\r\n    token: string,\r\n}\r\n\r\ntype ToggleLikeResponse = {\r\n    liked: boolean\r\n}\r\n\r\nexport const toggleLike = ({roomId, token}: ToggleLikeProps) => {\r\n    return axAuth.post<ToggleLikeResponse>(`${API_URL}/api/likes/${roomId}`,{},{\r\n        headers:{\r\n            Authorization: `Bearer ${token}`\r\n        }\r\n    });\r\n}\r\n\r\nexport const validateToken = (token: string) => {\r\n    return fetch(`${API_URL}/api/user/validate-token`, {\r\n        headers: {\r\n            Authorization: `Bearer ${token}`\r\n        }\r\n    })\r\n}","E:\\Repos\\hostel-chakra\\Hostel\\src\\Pages\\PreviewRoomPage.tsx",[],"E:\\Repos\\hostel-chakra\\Hostel\\src\\Pages\\RegisterHostPage.tsx",[],"E:\\Repos\\hostel-chakra\\Hostel\\src\\Pages\\OwnerListProperty.tsx",[],"E:\\Repos\\hostel-chakra\\Hostel\\src\\Components\\FloatingForm.tsx",[],"E:\\Repos\\hostel-chakra\\Hostel\\src\\Components\\AlertDialog.tsx",[],"E:\\Repos\\hostel-chakra\\Hostel\\src\\Pages\\VerificationPage.tsx",["350","351","352"],"import { Box, BoxProps } from '@chakra-ui/react';\r\nimport React from 'react'\r\nimport { useQuery } from 'react-query';\r\nimport { fetchPropertiesByPropStatusId } from '../API';\r\n\r\ntype VerificationPageProps = {\r\n\r\n}\r\n\r\nconst VerificationPage = (props: BoxProps) => {\r\n    const [propStatusId, setPropStatusId] = React.useState<string>()\r\n\r\n    const roomQry = useQuery([\"notActive\", propStatusId], () => {\r\n        return fetchPropertiesByPropStatusId(propStatusId);\r\n    }, {\r\n        onSuccess: (rs) => {\r\n\r\n        }\r\n    })\r\n\r\n    return (\r\n        <Box {...props}>\r\n        </Box>\r\n    )\r\n}\r\n\r\nexport default VerificationPage;",{"ruleId":"353","replacedBy":"354"},{"ruleId":"355","replacedBy":"356"},{"ruleId":"353","replacedBy":"357"},{"ruleId":"355","replacedBy":"358"},{"ruleId":"359","severity":1,"message":"360","line":7,"column":3,"nodeType":"361","messageId":"362","endLine":7,"endColumn":21},{"ruleId":"359","severity":1,"message":"363","line":9,"column":37,"nodeType":"361","messageId":"362","endLine":9,"endColumn":50},{"ruleId":"359","severity":1,"message":"364","line":9,"column":87,"nodeType":"361","messageId":"362","endLine":9,"endColumn":97},{"ruleId":"359","severity":1,"message":"365","line":15,"column":10,"nodeType":"361","messageId":"362","endLine":15,"endColumn":14},{"ruleId":"359","severity":1,"message":"366","line":5,"column":10,"nodeType":"361","messageId":"362","endLine":5,"endColumn":14},{"ruleId":"359","severity":1,"message":"367","line":5,"column":16,"nodeType":"361","messageId":"362","endLine":5,"endColumn":24},{"ruleId":"359","severity":1,"message":"368","line":6,"column":10,"nodeType":"361","messageId":"362","endLine":6,"endColumn":23},{"ruleId":"359","severity":1,"message":"369","line":35,"column":13,"nodeType":"361","messageId":"362","endLine":35,"endColumn":17},{"ruleId":"359","severity":1,"message":"370","line":35,"column":19,"nodeType":"361","messageId":"362","endLine":35,"endColumn":26},{"ruleId":"359","severity":1,"message":"371","line":35,"column":28,"nodeType":"361","messageId":"362","endLine":35,"endColumn":33},{"ruleId":"372","severity":1,"message":"373","line":143,"column":46,"nodeType":"374","messageId":"375","endLine":143,"endColumn":48},{"ruleId":"372","severity":1,"message":"373","line":159,"column":64,"nodeType":"374","messageId":"375","endLine":159,"endColumn":66},{"ruleId":"372","severity":1,"message":"373","line":160,"column":58,"nodeType":"374","messageId":"375","endLine":160,"endColumn":60},{"ruleId":"359","severity":1,"message":"376","line":257,"column":24,"nodeType":"361","messageId":"362","endLine":257,"endColumn":32},{"ruleId":"372","severity":1,"message":"377","line":273,"column":47,"nodeType":"374","messageId":"375","endLine":273,"endColumn":49},{"ruleId":"359","severity":1,"message":"378","line":287,"column":7,"nodeType":"361","messageId":"362","endLine":287,"endColumn":25},{"ruleId":"359","severity":1,"message":"379","line":1,"column":58,"nodeType":"361","messageId":"362","endLine":1,"endColumn":61},{"ruleId":"359","severity":1,"message":"380","line":1,"column":15,"nodeType":"361","messageId":"362","endLine":1,"endColumn":31},{"ruleId":"359","severity":1,"message":"381","line":1,"column":33,"nodeType":"361","messageId":"362","endLine":1,"endColumn":40},{"ruleId":"359","severity":1,"message":"382","line":1,"column":50,"nodeType":"361","messageId":"362","endLine":1,"endColumn":64},{"ruleId":"359","severity":1,"message":"383","line":1,"column":66,"nodeType":"361","messageId":"362","endLine":1,"endColumn":88},{"ruleId":"359","severity":1,"message":"384","line":1,"column":90,"nodeType":"361","messageId":"362","endLine":1,"endColumn":112},{"ruleId":"359","severity":1,"message":"385","line":1,"column":114,"nodeType":"361","messageId":"362","endLine":1,"endColumn":125},{"ruleId":"359","severity":1,"message":"386","line":1,"column":127,"nodeType":"361","messageId":"362","endLine":1,"endColumn":143},{"ruleId":"359","severity":1,"message":"387","line":1,"column":145,"nodeType":"361","messageId":"362","endLine":1,"endColumn":163},{"ruleId":"359","severity":1,"message":"388","line":1,"column":165,"nodeType":"361","messageId":"362","endLine":1,"endColumn":171},{"ruleId":"359","severity":1,"message":"389","line":1,"column":173,"nodeType":"361","messageId":"362","endLine":1,"endColumn":179},{"ruleId":"359","severity":1,"message":"390","line":1,"column":181,"nodeType":"361","messageId":"362","endLine":1,"endColumn":198},{"ruleId":"359","severity":1,"message":"391","line":1,"column":200,"nodeType":"361","messageId":"362","endLine":1,"endColumn":211},{"ruleId":"359","severity":1,"message":"392","line":1,"column":213,"nodeType":"361","messageId":"362","endLine":1,"endColumn":224},{"ruleId":"359","severity":1,"message":"393","line":8,"column":10,"nodeType":"361","messageId":"362","endLine":8,"endColumn":21},{"ruleId":"359","severity":1,"message":"394","line":17,"column":11,"nodeType":"361","messageId":"362","endLine":17,"endColumn":19},{"ruleId":"395","severity":1,"message":"396","line":36,"column":8,"nodeType":"397","endLine":36,"endColumn":10,"suggestions":"398"},{"ruleId":"359","severity":1,"message":"399","line":1,"column":15,"nodeType":"361","messageId":"362","endLine":1,"endColumn":19},{"ruleId":"359","severity":1,"message":"400","line":1,"column":21,"nodeType":"361","messageId":"362","endLine":1,"endColumn":25},{"ruleId":"359","severity":1,"message":"401","line":1,"column":47,"nodeType":"361","messageId":"362","endLine":1,"endColumn":53},{"ruleId":"359","severity":1,"message":"402","line":1,"column":79,"nodeType":"361","messageId":"362","endLine":1,"endColumn":85},{"ruleId":"359","severity":1,"message":"366","line":3,"column":10,"nodeType":"361","messageId":"362","endLine":3,"endColumn":14},{"ruleId":"359","severity":1,"message":"403","line":7,"column":10,"nodeType":"361","messageId":"362","endLine":7,"endColumn":17},{"ruleId":"359","severity":1,"message":"404","line":1,"column":23,"nodeType":"361","messageId":"362","endLine":1,"endColumn":29},{"ruleId":"359","severity":1,"message":"405","line":2,"column":8,"nodeType":"361","messageId":"362","endLine":2,"endColumn":13},{"ruleId":"359","severity":1,"message":"367","line":6,"column":10,"nodeType":"361","messageId":"362","endLine":6,"endColumn":18},{"ruleId":"359","severity":1,"message":"406","line":26,"column":7,"nodeType":"361","messageId":"362","endLine":26,"endColumn":32},{"ruleId":"359","severity":1,"message":"407","line":33,"column":38,"nodeType":"361","messageId":"362","endLine":33,"endColumn":44},{"ruleId":"395","severity":1,"message":"408","line":45,"column":8,"nodeType":"397","endLine":45,"endColumn":14,"suggestions":"409"},{"ruleId":"359","severity":1,"message":"410","line":2,"column":41,"nodeType":"361","messageId":"362","endLine":2,"endColumn":49},{"ruleId":"359","severity":1,"message":"411","line":17,"column":13,"nodeType":"361","messageId":"362","endLine":17,"endColumn":21},{"ruleId":"359","severity":1,"message":"412","line":18,"column":11,"nodeType":"361","messageId":"362","endLine":18,"endColumn":30},{"ruleId":"359","severity":1,"message":"413","line":19,"column":11,"nodeType":"361","messageId":"362","endLine":19,"endColumn":28},{"ruleId":"359","severity":1,"message":"414","line":41,"column":7,"nodeType":"361","messageId":"362","endLine":41,"endColumn":36},{"ruleId":"359","severity":1,"message":"415","line":48,"column":7,"nodeType":"361","messageId":"362","endLine":48,"endColumn":10},{"ruleId":"359","severity":1,"message":"404","line":1,"column":33,"nodeType":"361","messageId":"362","endLine":1,"endColumn":39},{"ruleId":"359","severity":1,"message":"360","line":1,"column":47,"nodeType":"361","messageId":"362","endLine":1,"endColumn":65},{"ruleId":"359","severity":1,"message":"416","line":1,"column":67,"nodeType":"361","messageId":"362","endLine":1,"endColumn":84},{"ruleId":"359","severity":1,"message":"417","line":7,"column":7,"nodeType":"361","messageId":"362","endLine":7,"endColumn":12},{"ruleId":"359","severity":1,"message":"418","line":18,"column":7,"nodeType":"361","messageId":"362","endLine":18,"endColumn":41},{"ruleId":"359","severity":1,"message":"401","line":1,"column":35,"nodeType":"361","messageId":"362","endLine":1,"endColumn":41},{"ruleId":"359","severity":1,"message":"419","line":1,"column":59,"nodeType":"361","messageId":"362","endLine":1,"endColumn":71},{"ruleId":"359","severity":1,"message":"420","line":1,"column":29,"nodeType":"361","messageId":"362","endLine":1,"endColumn":40},{"ruleId":"359","severity":1,"message":"421","line":1,"column":42,"nodeType":"361","messageId":"362","endLine":1,"endColumn":46},{"ruleId":"359","severity":1,"message":"404","line":1,"column":91,"nodeType":"361","messageId":"362","endLine":1,"endColumn":97},{"ruleId":"359","severity":1,"message":"404","line":1,"column":25,"nodeType":"361","messageId":"362","endLine":1,"endColumn":31},{"ruleId":"359","severity":1,"message":"422","line":1,"column":33,"nodeType":"361","messageId":"362","endLine":1,"endColumn":39},{"ruleId":"359","severity":1,"message":"381","line":1,"column":41,"nodeType":"361","messageId":"362","endLine":1,"endColumn":48},{"ruleId":"359","severity":1,"message":"423","line":1,"column":50,"nodeType":"361","messageId":"362","endLine":1,"endColumn":57},{"ruleId":"359","severity":1,"message":"424","line":1,"column":59,"nodeType":"361","messageId":"362","endLine":1,"endColumn":71},{"ruleId":"359","severity":1,"message":"425","line":1,"column":79,"nodeType":"361","messageId":"362","endLine":1,"endColumn":94},{"ruleId":"359","severity":1,"message":"366","line":1,"column":96,"nodeType":"361","messageId":"362","endLine":1,"endColumn":100},{"ruleId":"359","severity":1,"message":"426","line":1,"column":102,"nodeType":"361","messageId":"362","endLine":1,"endColumn":112},{"ruleId":"359","severity":1,"message":"427","line":1,"column":114,"nodeType":"361","messageId":"362","endLine":1,"endColumn":129},{"ruleId":"359","severity":1,"message":"416","line":1,"column":163,"nodeType":"361","messageId":"362","endLine":1,"endColumn":180},{"ruleId":"359","severity":1,"message":"428","line":1,"column":182,"nodeType":"361","messageId":"362","endLine":1,"endColumn":190},{"ruleId":"359","severity":1,"message":"429","line":3,"column":10,"nodeType":"361","messageId":"362","endLine":3,"endColumn":21},{"ruleId":"359","severity":1,"message":"404","line":1,"column":37,"nodeType":"361","messageId":"362","endLine":1,"endColumn":43},{"ruleId":"359","severity":1,"message":"365","line":13,"column":10,"nodeType":"361","messageId":"362","endLine":13,"endColumn":14},{"ruleId":"359","severity":1,"message":"410","line":4,"column":15,"nodeType":"361","messageId":"362","endLine":4,"endColumn":23},{"ruleId":"359","severity":1,"message":"430","line":2,"column":10,"nodeType":"361","messageId":"362","endLine":2,"endColumn":18},{"ruleId":"359","severity":1,"message":"431","line":9,"column":8,"nodeType":"361","messageId":"362","endLine":9,"endColumn":17},{"ruleId":"359","severity":1,"message":"432","line":22,"column":6,"nodeType":"361","messageId":"362","endLine":22,"endColumn":21},{"ruleId":"359","severity":1,"message":"433","line":41,"column":7,"nodeType":"361","messageId":"362","endLine":41,"endColumn":18},{"ruleId":"359","severity":1,"message":"434","line":45,"column":13,"nodeType":"361","messageId":"362","endLine":45,"endColumn":17},{"ruleId":"359","severity":1,"message":"404","line":1,"column":23,"nodeType":"361","messageId":"362","endLine":1,"endColumn":29},{"ruleId":"359","severity":1,"message":"401","line":1,"column":35,"nodeType":"361","messageId":"362","endLine":1,"endColumn":41},{"ruleId":"359","severity":1,"message":"419","line":1,"column":59,"nodeType":"361","messageId":"362","endLine":1,"endColumn":71},{"ruleId":"359","severity":1,"message":"399","line":1,"column":10,"nodeType":"361","messageId":"362","endLine":1,"endColumn":14},{"ruleId":"359","severity":1,"message":"400","line":1,"column":16,"nodeType":"361","messageId":"362","endLine":1,"endColumn":20},{"ruleId":"359","severity":1,"message":"401","line":1,"column":22,"nodeType":"361","messageId":"362","endLine":1,"endColumn":28},{"ruleId":"359","severity":1,"message":"404","line":1,"column":37,"nodeType":"361","messageId":"362","endLine":1,"endColumn":43},{"ruleId":"359","severity":1,"message":"435","line":6,"column":7,"nodeType":"361","messageId":"362","endLine":6,"endColumn":32},{"ruleId":"353","replacedBy":"436"},{"ruleId":"355","replacedBy":"437"},{"ruleId":"359","severity":1,"message":"438","line":77,"column":7,"nodeType":"361","messageId":"362","endLine":77,"endColumn":19},{"ruleId":"359","severity":1,"message":"439","line":5,"column":23,"nodeType":"361","messageId":"362","endLine":5,"endColumn":37},{"ruleId":"359","severity":1,"message":"440","line":33,"column":11,"nodeType":"361","messageId":"362","endLine":33,"endColumn":18},{"ruleId":"395","severity":1,"message":"441","line":62,"column":8,"nodeType":"397","endLine":62,"endColumn":10,"suggestions":"442"},{"ruleId":"359","severity":1,"message":"379","line":1,"column":10,"nodeType":"361","messageId":"362","endLine":1,"endColumn":13},{"ruleId":"359","severity":1,"message":"443","line":1,"column":90,"nodeType":"361","messageId":"362","endLine":1,"endColumn":103},{"ruleId":"444","severity":1,"message":"445","line":23,"column":38,"nodeType":"446","messageId":"447","endLine":23,"endColumn":39,"suggestions":"448"},{"ruleId":"444","severity":1,"message":"445","line":23,"column":63,"nodeType":"446","messageId":"447","endLine":23,"endColumn":64,"suggestions":"449"},{"ruleId":"444","severity":1,"message":"445","line":23,"column":72,"nodeType":"446","messageId":"447","endLine":23,"endColumn":73,"suggestions":"450"},{"ruleId":"444","severity":1,"message":"445","line":23,"column":76,"nodeType":"446","messageId":"447","endLine":23,"endColumn":77,"suggestions":"451"},{"ruleId":"359","severity":1,"message":"452","line":1,"column":62,"nodeType":"361","messageId":"362","endLine":1,"endColumn":68},{"ruleId":"359","severity":1,"message":"453","line":4,"column":19,"nodeType":"361","messageId":"362","endLine":4,"endColumn":25},{"ruleId":"359","severity":1,"message":"454","line":6,"column":10,"nodeType":"361","messageId":"362","endLine":6,"endColumn":21},{"ruleId":"359","severity":1,"message":"455","line":7,"column":85,"nodeType":"361","messageId":"362","endLine":7,"endColumn":95},{"ruleId":"359","severity":1,"message":"371","line":131,"column":19,"nodeType":"361","messageId":"362","endLine":131,"endColumn":24},{"ruleId":"359","severity":1,"message":"456","line":10,"column":40,"nodeType":"361","messageId":"362","endLine":10,"endColumn":50},{"ruleId":"359","severity":1,"message":"457","line":10,"column":78,"nodeType":"361","messageId":"362","endLine":10,"endColumn":87},{"ruleId":"359","severity":1,"message":"458","line":41,"column":30,"nodeType":"361","messageId":"362","endLine":41,"endColumn":39},{"ruleId":"359","severity":1,"message":"407","line":41,"column":41,"nodeType":"361","messageId":"362","endLine":41,"endColumn":47},{"ruleId":"359","severity":1,"message":"370","line":49,"column":29,"nodeType":"361","messageId":"362","endLine":49,"endColumn":36},{"ruleId":"395","severity":1,"message":"459","line":100,"column":8,"nodeType":"397","endLine":100,"endColumn":18,"suggestions":"460"},{"ruleId":"461","severity":1,"message":"462","line":183,"column":34,"nodeType":"463","messageId":"464","endLine":183,"endColumn":36},{"ruleId":"372","severity":1,"message":"377","line":359,"column":104,"nodeType":"374","messageId":"375","endLine":359,"endColumn":106},{"ruleId":"359","severity":1,"message":"465","line":1,"column":17,"nodeType":"361","messageId":"362","endLine":1,"endColumn":30},{"ruleId":"359","severity":1,"message":"466","line":7,"column":7,"nodeType":"361","messageId":"362","endLine":7,"endColumn":26},{"ruleId":"359","severity":1,"message":"467","line":44,"column":6,"nodeType":"361","messageId":"362","endLine":44,"endColumn":19},{"ruleId":"359","severity":1,"message":"468","line":6,"column":6,"nodeType":"361","messageId":"362","endLine":6,"endColumn":27},{"ruleId":"359","severity":1,"message":"469","line":11,"column":26,"nodeType":"361","messageId":"362","endLine":11,"endColumn":41},{"ruleId":"359","severity":1,"message":"470","line":13,"column":11,"nodeType":"361","messageId":"362","endLine":13,"endColumn":18},"no-native-reassign",["471"],"no-negated-in-lhs",["472"],["471"],["472"],"@typescript-eslint/no-unused-vars","'useBreakpointValue' is defined but never used.","Identifier","unusedVar","'BrowserRouter' is defined but never used.","'useHistory' is defined but never used.","'mode' is defined but never used.","'Link' is defined but never used.","'Redirect' is defined but never used.","'closeProperty' is defined but never used.","'data' is assigned a value but never used.","'isError' is assigned a value but never used.","'error' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'boxProps' is assigned a value but never used.","Expected '!==' and instead saw '!='.","'testReview' is assigned a value but never used.","'Box' is defined but never used.","'CircularProgress' is defined but never used.","'Divider' is defined but never used.","'InputLeftAddon' is defined but never used.","'NumberDecrementStepper' is defined but never used.","'NumberIncrementStepper' is defined but never used.","'NumberInput' is defined but never used.","'NumberInputField' is defined but never used.","'NumberInputStepper' is defined but never used.","'Portal' is defined but never used.","'Slider' is defined but never used.","'SliderFilledTrack' is defined but never used.","'SliderThumb' is defined but never used.","'SliderTrack' is defined but never used.","'MdGraphicEq' is defined but never used.","'queryStr' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook React.useEffect has a missing dependency: 'location.state'. Either include it or remove the dependency array.","ArrayExpression",["473"],"'Flex' is defined but never used.","'Grid' is defined but never used.","'Spacer' is defined but never used.","'Button' is defined but never used.","'isError' is defined but never used.","'Center' is defined but never used.","'axios' is defined but never used.","'defaultValue' is assigned a value but never used.","'status' is assigned a value but never used.","React Hook React.useEffect has a missing dependency: 'props'. Either include it or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside React.useEffect.",["474"],"'DarkMode' is defined but never used.","'pathname' is assigned a value but never used.","'bgColorMenuWhenHome' is assigned a value but never used.","'colorMenuWhenHome' is assigned a value but never used.","'defaultRooms' is assigned a value but never used.","'str' is assigned a value but never used.","'useColorModeValue' is defined but never used.","'today' is assigned a value but never used.","'defaultSchedules' is assigned a value but never used.","'StackDivider' is defined but never used.","'LinkOverlay' is defined but never used.","'Text' is defined but never used.","'chakra' is defined but never used.","'Heading' is defined but never used.","'HeadingProps' is defined but never used.","'HTMLChakraProps' is defined but never used.","'SimpleGrid' is defined but never used.","'SimpleGridProps' is defined but never used.","'useToken' is defined but never used.","'BsHeartFill' is defined but never used.","'userInfo' is defined but never used.","'SearchBar' is defined but never used.","'SingleRoomProps' is defined but never used.","'GetRoomById' is assigned a value but never used.","'slug' is assigned a value but never used.","'defaultRoom' is assigned a value but never used.",["471"],["472"],"'fetchPincode' is assigned a value but never used.","'useQueryClient' is defined but never used.","'history' is assigned a value but never used.","React Hook React.useEffect has missing dependencies: 'loginAsync' and 'logoutAsync'. Either include them or remove the dependency array.",["475"],"'useDisclosure' is defined but never used.","no-useless-escape","Unnecessary escape character: \\\".","Literal","unnecessaryEscape",["476","477"],["478","479"],["480","481"],["482","483"],"'HStack' is defined but never used.","'FaStar' is defined but never used.","'useLocation' is defined but never used.","'toggleLike' is defined but never used.","'RouteProps' is defined but never used.","'useParams' is defined but never used.","'isLoading' is assigned a value but never used.","React Hook React.useEffect has a missing dependency: 'query'. Either include it or remove the dependency array.",["484"],"array-callback-return","Array.prototype.find() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","'AxiosResponse' is defined but never used.","'API_IMAGE_CLIENT_ID' is assigned a value but never used.","'ReviewRequest' is defined but never used.","'VerificationPageProps' is defined but never used.","'setPropStatusId' is assigned a value but never used.","'roomQry' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"485","fix":"486"},{"desc":"487","fix":"488"},{"desc":"489","fix":"490"},{"messageId":"491","fix":"492","desc":"493"},{"messageId":"494","fix":"495","desc":"496"},{"messageId":"491","fix":"497","desc":"493"},{"messageId":"494","fix":"498","desc":"496"},{"messageId":"491","fix":"499","desc":"493"},{"messageId":"494","fix":"500","desc":"496"},{"messageId":"491","fix":"501","desc":"493"},{"messageId":"494","fix":"502","desc":"496"},{"desc":"503","fix":"504"},"Update the dependencies array to be: [location.state]",{"range":"505","text":"506"},"Update the dependencies array to be: [form, props]",{"range":"507","text":"508"},"Update the dependencies array to be: [loginAsync, logoutAsync]",{"range":"509","text":"510"},"removeEscape",{"range":"511","text":"512"},"Remove the `\\`. This maintains the current functionality.","escapeBackslash",{"range":"513","text":"514"},"Replace the `\\` with `\\\\` to include the actual backslash character.",{"range":"515","text":"512"},{"range":"516","text":"514"},{"range":"517","text":"512"},{"range":"518","text":"514"},{"range":"519","text":"512"},{"range":"520","text":"514"},"Update the dependencies array to be: [location, query]",{"range":"521","text":"522"},[1533,1535],"[location.state]",[1382,1388],"[form, props]",[2086,2088],"[loginAsync, logoutAsync]",[727,728],"",[727,727],"\\",[752,753],[752,752],[761,762],[761,761],[765,766],[765,765],[3913,3923],"[location, query]"]