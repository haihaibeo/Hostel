[{"E:\\Repos\\hostel-chakra\\Hostel\\src\\index.tsx":"1","E:\\Repos\\hostel-chakra\\Hostel\\src\\reportWebVitals.ts":"2","E:\\Repos\\hostel-chakra\\Hostel\\src\\serviceWorker.ts":"3","E:\\Repos\\hostel-chakra\\Hostel\\src\\App.tsx":"4","E:\\Repos\\hostel-chakra\\Hostel\\src\\Pages\\SingleRoom.tsx":"5","E:\\Repos\\hostel-chakra\\Hostel\\src\\Pages\\ErrorPage.tsx":"6","E:\\Repos\\hostel-chakra\\Hostel\\src\\ColorModeSwitcher.tsx":"7","E:\\Repos\\hostel-chakra\\Hostel\\src\\Logo.tsx":"8","E:\\Repos\\hostel-chakra\\Hostel\\src\\Pages\\HomePage.tsx":"9","E:\\Repos\\hostel-chakra\\Hostel\\src\\Pages\\RoomsPage.tsx":"10","E:\\Repos\\hostel-chakra\\Hostel\\src\\Components\\HomeComponents\\PropertyTypeList.tsx":"11","E:\\Repos\\hostel-chakra\\Hostel\\src\\Components\\NavComponents\\SearchBar.tsx":"12","E:\\Repos\\hostel-chakra\\Hostel\\src\\Components\\NavComponents\\Navbar.tsx":"13","E:\\Repos\\hostel-chakra\\Hostel\\src\\Components\\FilterComponents\\RoomCardList.tsx":"14","E:\\Repos\\hostel-chakra\\Hostel\\src\\Components\\NavComponents\\PickRangeDay.tsx":"15","E:\\Repos\\hostel-chakra\\Hostel\\src\\Components\\NavComponents\\PopDetail.tsx":"16","E:\\Repos\\hostel-chakra\\Hostel\\src\\Components\\FilterComponents\\RoomCard.tsx":"17","E:\\Repos\\hostel-chakra\\Hostel\\src\\Components\\NavComponents\\Footer.tsx":"18","E:\\Repos\\hostel-chakra\\Hostel\\src\\Components\\SingleRoomComponents\\MyRoomBadge.tsx":"19","e:\\Repos\\hostel-chakra\\Hostel\\src\\index.tsx":"20","e:\\Repos\\hostel-chakra\\Hostel\\src\\reportWebVitals.ts":"21","e:\\Repos\\hostel-chakra\\Hostel\\src\\serviceWorker.ts":"22","e:\\Repos\\hostel-chakra\\Hostel\\src\\App.tsx":"23","e:\\Repos\\hostel-chakra\\Hostel\\src\\Pages\\HomePage.tsx":"24","e:\\Repos\\hostel-chakra\\Hostel\\src\\Pages\\SingleRoom.tsx":"25","e:\\Repos\\hostel-chakra\\Hostel\\src\\Pages\\RoomsPage.tsx":"26","e:\\Repos\\hostel-chakra\\Hostel\\src\\Pages\\ErrorPage.tsx":"27","e:\\Repos\\hostel-chakra\\Hostel\\src\\Components\\NavComponents\\Footer.tsx":"28","e:\\Repos\\hostel-chakra\\Hostel\\src\\Components\\NavComponents\\SearchBar.tsx":"29","e:\\Repos\\hostel-chakra\\Hostel\\src\\Components\\NavComponents\\PickRangeDay.tsx":"30","e:\\Repos\\hostel-chakra\\Hostel\\src\\Components\\NavComponents\\Navbar.tsx":"31","e:\\Repos\\hostel-chakra\\Hostel\\src\\Components\\NavComponents\\PopDetail.tsx":"32","e:\\Repos\\hostel-chakra\\Hostel\\src\\Components\\HomeComponents\\PropertyTypeList.tsx":"33","e:\\Repos\\hostel-chakra\\Hostel\\src\\Components\\SingleRoomComponents\\MyRoomBadge.tsx":"34","e:\\Repos\\hostel-chakra\\Hostel\\src\\Components\\FilterComponents\\RoomCardList.tsx":"35","e:\\Repos\\hostel-chakra\\Hostel\\src\\Logo.tsx":"36","e:\\Repos\\hostel-chakra\\Hostel\\src\\ColorModeSwitcher.tsx":"37","e:\\Repos\\hostel-chakra\\Hostel\\src\\Components\\FilterComponents\\RoomCard.tsx":"38","E:\\Repos\\hostel-chakra\\Hostel\\src\\Components\\LoginButton.tsx":"39","E:\\Repos\\hostel-chakra\\Hostel\\src\\Components\\RegisterButton.tsx":"40","E:\\Repos\\hostel-chakra\\Hostel\\src\\Components\\RegisterForm.tsx":"41","E:\\Repos\\hostel-chakra\\Hostel\\src\\Contexts\\AuthContext.tsx":"42","E:\\Repos\\hostel-chakra\\Hostel\\src\\Components\\LoginForm.tsx":"43"},{"size":862,"mtime":1613928821144,"results":"44","hashOfConfig":"45"},{"size":431,"mtime":1612286281167,"results":"46","hashOfConfig":"45"},{"size":5404,"mtime":1612286281167,"results":"47","hashOfConfig":"45"},{"size":1691,"mtime":1616102627911,"results":"48","hashOfConfig":"45"},{"size":12778,"mtime":1615989375378,"results":"49","hashOfConfig":"45"},{"size":173,"mtime":1612286281165,"results":"50","hashOfConfig":"45"},{"size":773,"mtime":1612286281164,"results":"51","hashOfConfig":"45"},{"size":614,"mtime":1612286281165,"results":"52","hashOfConfig":"45"},{"size":1187,"mtime":1613423994602,"results":"53","hashOfConfig":"45"},{"size":826,"mtime":1613605467202,"results":"54","hashOfConfig":"45"},{"size":3204,"mtime":1615548216264,"results":"55","hashOfConfig":"45"},{"size":4914,"mtime":1615479910772,"results":"56","hashOfConfig":"45"},{"size":1277,"mtime":1616109169932,"results":"57","hashOfConfig":"45"},{"size":1319,"mtime":1615243153335,"results":"58","hashOfConfig":"45"},{"size":3977,"mtime":1613608465743,"results":"59","hashOfConfig":"45"},{"size":3126,"mtime":1613423216595,"results":"60","hashOfConfig":"45"},{"size":3097,"mtime":1615545996552,"results":"61","hashOfConfig":"45"},{"size":690,"mtime":1613435526288,"results":"62","hashOfConfig":"45"},{"size":1847,"mtime":1613599095669,"results":"63","hashOfConfig":"45"},{"size":862,"mtime":1612286281166,"results":"64","hashOfConfig":"65"},{"size":431,"mtime":1612286281167,"results":"66","hashOfConfig":"65"},{"size":5404,"mtime":1612286281167,"results":"67","hashOfConfig":"65"},{"size":1405,"mtime":1613435563432,"results":"68","hashOfConfig":"65"},{"size":1187,"mtime":1613423994602,"results":"69","hashOfConfig":"65"},{"size":11934,"mtime":1613608974661,"results":"70","hashOfConfig":"65"},{"size":826,"mtime":1613605467202,"results":"71","hashOfConfig":"65"},{"size":173,"mtime":1612286281165,"results":"72","hashOfConfig":"65"},{"size":690,"mtime":1613435526288,"results":"73","hashOfConfig":"65"},{"size":3214,"mtime":1613608551630,"results":"74","hashOfConfig":"65"},{"size":3977,"mtime":1613608465743,"results":"75","hashOfConfig":"65"},{"size":1768,"mtime":1613606848363,"results":"76","hashOfConfig":"65"},{"size":3126,"mtime":1613423216595,"results":"77","hashOfConfig":"65"},{"size":1475,"mtime":1613423216593,"results":"78","hashOfConfig":"65"},{"size":1847,"mtime":1613599095669,"results":"79","hashOfConfig":"65"},{"size":1318,"mtime":1613606682010,"results":"80","hashOfConfig":"65"},{"size":614,"mtime":1612286281165,"results":"81","hashOfConfig":"65"},{"size":773,"mtime":1612286281164,"results":"82","hashOfConfig":"65"},{"size":3020,"mtime":1613608660633,"results":"83","hashOfConfig":"65"},{"size":1137,"mtime":1616102915010,"results":"84","hashOfConfig":"45"},{"size":997,"mtime":1616100395255,"results":"85","hashOfConfig":"45"},{"size":6298,"mtime":1616103124415,"results":"86","hashOfConfig":"45"},{"size":1823,"mtime":1616109722590,"results":"87","hashOfConfig":"45"},{"size":1561,"mtime":1616110039665,"results":"88","hashOfConfig":"45"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"91"},"13hiuhw",{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"91"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"91"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"98","messages":"99","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"100","usedDeprecatedRules":"91"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"91"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"91"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"91"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"109","usedDeprecatedRules":"91"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"91"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"114","usedDeprecatedRules":"91"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"117","usedDeprecatedRules":"91"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"120","messages":"121","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"91"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"124","usedDeprecatedRules":"91"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"127","usedDeprecatedRules":"91"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"130","usedDeprecatedRules":"91"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"91"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"135","usedDeprecatedRules":"91"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"99iabf",{"filePath":"138","messages":"139","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"140","messages":"141","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"142","messages":"143","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"144","messages":"145","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"146","messages":"147","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"148","messages":"149","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"150","messages":"151","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"152","messages":"153","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"154","messages":"155","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"156","messages":"157","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"158","messages":"159","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"160","messages":"161","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"162","messages":"163","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"164","messages":"165","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"166","messages":"167","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"168","messages":"169","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"170","messages":"171","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"172","messages":"173","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"174","messages":"175","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"176","messages":"177","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"178","messages":"179","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"180","messages":"181","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"182","messages":"183","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"E:\\Repos\\hostel-chakra\\Hostel\\src\\index.tsx",[],["184","185"],"E:\\Repos\\hostel-chakra\\Hostel\\src\\reportWebVitals.ts",[],"E:\\Repos\\hostel-chakra\\Hostel\\src\\serviceWorker.ts",[],"E:\\Repos\\hostel-chakra\\Hostel\\src\\App.tsx",["186","187"],"E:\\Repos\\hostel-chakra\\Hostel\\src\\Pages\\SingleRoom.tsx",["188","189","190"],"import { Box, Button, Divider, Grid, GridItem, Spacer, Image, Popover, PopoverContent, PopoverTrigger, HStack, Flex, VStack, Avatar } from '@chakra-ui/react';\r\nimport { userInfo } from 'os';\r\nimport React from 'react'\r\nimport { BsStarFill, BsStar, BsHeart } from 'react-icons/bs';\r\nimport { Link, useParams } from 'react-router-dom';\r\nimport Navbar from '../Components/NavComponents/Navbar';\r\nimport PickRangeDay from '../Components/NavComponents/PickRangeDay';\r\nimport PopDetail from '../Components/NavComponents/PopDetail';\r\nimport SearchBar from '../Components/NavComponents/SearchBar';\r\nimport MyRoomBadge, { defaultRoomBadges } from '../Components/SingleRoomComponents/MyRoomBadge';\r\n\r\ntype SlugProps = {\r\n    slug: string;\r\n}\r\n\r\ninterface RoomType extends RoomCardType {\r\n    images: string[];\r\n    roomIntroduction: string;\r\n    roomBadges?: RoomBadge[];\r\n}\r\n\r\ntype SingleRoomProps = {\r\n    room: RoomType;\r\n}\r\n\r\ntype OwnerInfo = {\r\n    id: string;\r\n    name: string;\r\n}\r\n\r\ntype BookingInfo = {\r\n    roomId?: string;\r\n    userId?: string;\r\n    bookFromDate?: Date;\r\n    bookToDate?: Date;\r\n    children: number;\r\n    adult: number;\r\n    roomQuant: number;\r\n}\r\n\r\nconst SingleRoom: React.FC<SingleRoomProps> = ({ room, children }) => {\r\n    room = defaultRoom;\r\n    const { slug } = useParams<SlugProps>();\r\n    const [bookInfo, setBookInfo] = React.useState<BookingInfo>({ adult: 1, children: 0, roomQuant: 1 });\r\n    const [owner, setOwner] = React.useState<OwnerInfo>();\r\n\r\n    React.useEffect(() => {\r\n        setOwner(defaultOwner);\r\n    }, [])\r\n\r\n    const updateDate = (from?: Date, to?: Date) => {\r\n        setBookInfo(s => ({\r\n            ...s,\r\n            bookFromDate: from,\r\n            bookToDate: to\r\n        }));\r\n    }\r\n\r\n    const updatePeople = (adult: number, children: number, room: number) => {\r\n        setBookInfo((s) => ({\r\n            ...s,\r\n            adult: adult,\r\n            children: children,\r\n            roomQuant: room\r\n        }));\r\n    }\r\n\r\n    return (\r\n        <Box mx=\"10%\" mt=\"5\">\r\n            <Navbar></Navbar>\r\n            <Divider my=\"5\" />\r\n\r\n            {/* title */}\r\n            <Box as=\"h2\" fontSize=\"3xl\" fontWeight=\"semibold\">{room.name}</Box>\r\n\r\n            {/* rating, location, like button */}\r\n            <Box d=\"flex\" mt=\"1\" flexDir={{ base: \"column\", sm: \"row\" }}>\r\n                <Box d=\"flex\" alignItems=\"start\">\r\n                    <Box d=\"flex\" flexDir={{ base: \"column\", sm: \"row\" }}>\r\n                        <Box d=\"flex\" flexDir={{ base: \"row\" }}>\r\n                            {Array(5).fill(\"\").map((_, i) => {\r\n                                return (i < room.totalReview - 1 ? <BsStarFill key={i} colorRendering=\"teal.400\" /> : <BsStar key={i} />)\r\n                            })}\r\n                        </Box>\r\n                        <Box as=\"span\" ml=\"2\" color=\"gray.500\">{room.totalReview} reviews</Box>\r\n                    </Box>\r\n                    <Spacer />\r\n                    <Link to=\"/\">\r\n                        <Button variant=\"link\">\r\n                            <Box mx=\"4\">&bull;</Box>\r\n                            {room.location}\r\n                        </Button>\r\n                    </Link>\r\n                </Box>\r\n\r\n                <Spacer />\r\n\r\n                <Button alignSelf=\"start\" variant=\"ghost\" size=\"sm\" leftIcon={<BsHeart />}>Like</Button>\r\n            </Box>\r\n\r\n            {/* image display */}\r\n            <Box borderRadius=\"lg\" overflow=\"hidden\" mt=\"4\">\r\n                <Grid gap=\"2\" h=\"40%\" maxH=\"450px\" objectFit=\"cover\"\r\n                    templateRows=\"repeat(2, 1fr)\"\r\n                    templateColumns=\"repeat(4, 1fr)\">\r\n\r\n                    {/* <GridItem colSpan={2} rowSpan={2} overflow=\"hidden\" >\r\n                        <Image src={room.images[0]} h=\"auto\" height=\"100%\" w=\"100%\" objectFit=\"cover\"></Image>\r\n                    </GridItem> */}\r\n\r\n                    {room.images.map((image, i) => {\r\n                        return (\r\n                            <GridItem key={i} colSpan={i === 0 ? 2 : 1} rowSpan={i === 0 ? 2 : 1} overflow=\"hidden\" >\r\n                                <Image src={image} h=\"auto\" height=\"100%\" w=\"100%\" objectFit=\"cover\" loading=\"lazy\"></Image>\r\n                            </GridItem>\r\n                        )\r\n                    })}\r\n\r\n                    {/* <GridItem colSpan={1} rowSpan={1} overflow=\"hidden\" >\r\n                        <Image src={room.images[1]} h=\"auto\" height=\"100%\" w=\"100%\" objectFit=\"cover\"></Image>\r\n                    </GridItem>\r\n                    <GridItem colSpan={1} rowSpan={1} overflow=\"hidden\" >\r\n                        <Image src={room.images[2]} h=\"auto\" height=\"100%\" w=\"100%\" objectFit=\"cover\"></Image>\r\n                    </GridItem>\r\n                    <GridItem colSpan={1} rowSpan={1} overflow=\"hidden\" >\r\n                        <Image src={room.images[3]} h=\"auto\" height=\"100%\" w=\"100%\" objectFit=\"cover\"></Image>\r\n                    </GridItem>\r\n                    <GridItem colSpan={1} rowSpan={1} overflow=\"hidden\" >\r\n                        <Image src={room.images[4]} h=\"auto\" height=\"100%\" w=\"100%\" objectFit=\"cover\"></Image>\r\n                    </GridItem> */}\r\n                </Grid>\r\n            </Box>\r\n\r\n            {/* info  */}\r\n            <Box mt=\"4\" d={[\"flex\", \"flex\", \"flex\", \"block\"]} flexDir=\"column-reverse\">\r\n                {/* floating form */}\r\n                <Box w={[\"100%\", \"100%\", \"100%\", \"35%\"]} boxShadow=\"2xl\" mt={{ base: \"4\", lg: \"0\" }} top=\"30%\" float={{ lg: \"right\" }} position={{ lg: \"sticky\" }}\r\n                    borderRadius=\"lg\"\r\n                    display=\"inline-flex\" flexDir=\"column\" zIndex={1} borderWidth=\"thin\"\r\n                    p=\"4\" alignContent=\"center\" justifyContent=\"center\">\r\n                    <Flex alignItems=\"baseline\">\r\n                        <Box as=\"h2\" fontFamily=\"mono\" fontSize=\"3xl\" fontWeight=\"semibold\">{room.formattedPrice}\r\n                        </Box>\r\n                        <Box as=\"span\" color=\"gray.500\">\r\n                            /per night\r\n                        </Box>\r\n                        <Spacer />\r\n                        <Box d=\"flex\" alignItems=\"center\">\r\n                            {Array(5).fill(\"\").map((_, i) => {\r\n                                return (i < room.totalReview - 1 ? <BsStarFill key={i} colorRendering=\"teal.400\" /> : <BsStar key={i} />)\r\n                            })}\r\n                        </Box>\r\n                    </Flex>\r\n\r\n                    <Box mt=\"4\">\r\n                        <Popover closeOnBlur={true}>\r\n                            <PopoverTrigger>\r\n                                <HStack spacing=\"0\">\r\n                                    <Button variant=\"outline\" borderTopLeftRadius=\"lg\"\r\n                                        size=\"lg\" w=\"100%\"\r\n                                        _focusVisible={{ border: \"0\" }}\r\n                                        borderRadius=\"0\">\r\n                                        {bookInfo?.bookFromDate?.toDateString() || \"From\"}\r\n                                    </Button>\r\n                                    <Button variant=\"outline\" borderTopRightRadius=\"lg\"\r\n                                        size=\"lg\" w=\"100%\"\r\n                                        _focusVisible={{ border: \"0\" }}\r\n                                        borderRadius=\"0\">\r\n                                        {bookInfo?.bookToDate?.toDateString() || \"To\"}\r\n                                    </Button>\r\n                                </HStack>\r\n                            </PopoverTrigger>\r\n                            <PopoverContent flexWrap=\"nowrap\" alignItems=\"center\" w={[\"100%\", \"100%\", \"200%\", \"200%\"]} left={[\"0%\", \"0%\", \"-50%\", \"-50%\"]} borderRadius=\"0\" bg=\"inherit\" bgColor=\"rgba(66, 153, 225, 0.8)\">\r\n                                <PickRangeDay updateDate={updateDate} />\r\n                            </PopoverContent>\r\n                        </Popover>\r\n                        <Popover>\r\n                            <PopoverTrigger>\r\n                                <Button variant=\"outline\" w=\"100%\" size=\"lg\" borderRadius=\"0\" borderBottomRadius=\"lg\" px=\"2\">{bookInfo.adult + ' adult(s) - ' + bookInfo.children + ' child(s) - ' + bookInfo.roomQuant + ' room(s)'}</Button>\r\n                            </PopoverTrigger>\r\n                            <PopoverContent flexWrap=\"nowrap\" borderRadius=\"0\" bg=\"inherit\" bgColor=\"rgba(66, 153, 225, 0.8)\">\r\n                                <PopDetail updatePeople={updatePeople} adult={bookInfo.adult} bedRoom={bookInfo.roomQuant} children={bookInfo.children}></PopDetail>\r\n                            </PopoverContent>\r\n                        </Popover>\r\n                    </Box>\r\n\r\n                    <Button variant=\"solid\" colorScheme=\"green\" alignSelf=\"stretch\" mt=\"4\">Check for reservation</Button>\r\n                </Box>\r\n\r\n                {/* Detail information about this room */}\r\n                <Box height=\"1000px\" w={[\"100%\", \"100%\", \"100%\", \"60%\"]}>\r\n                    {/* name, avatar */}\r\n                    <Flex alignItems=\"center\">\r\n                        <VStack alignItems=\"start\">\r\n                            <Box as=\"h1\" fontSize=\"2xl\" fontWeight=\"semibold\" >{\"Owner: \" + owner?.name}</Box>\r\n                            <HStack>\r\n                                {room.services.map((s, i) => {\r\n                                    return (\r\n                                        <Box\r\n                                            key={i}\r\n                                            color=\"gray.500\"\r\n                                            fontWeight=\"semibold\"\r\n                                            letterSpacing=\"wide\"\r\n                                            fontSize=\"xs\"\r\n                                            textTransform=\"uppercase\"\r\n                                            ml=\"2\"\r\n                                            isTruncated\r\n                                        >{s} {room.services[room.services.length - 1] !== s && <>&bull;</>} </Box>\r\n                                    )\r\n                                })}\r\n                            </HStack>\r\n                        </VStack>\r\n\r\n                        <Spacer />\r\n                        <Avatar name={owner?.name}></Avatar>\r\n                    </Flex>\r\n                    <Divider my=\"3\" />\r\n\r\n                    {/* room badges */}\r\n                    {room.roomBadges?.map((b, i) => {\r\n                        return <MyRoomBadge id={b.id} key={i}></MyRoomBadge>\r\n                    })}\r\n                    <Divider my=\"3\" />\r\n\r\n                    {/* room introduction */}\r\n                    <Box as=\"h5\" fontWeight=\"semibold\" fontSize=\"2xl\">More about room</Box>\r\n                    <Box as=\"p\">{room.roomIntroduction}</Box>\r\n                    <Divider my=\"3\" />\r\n\r\n                    {/* another datepicker here */}\r\n                    <Box w=\"100%\" display={{ base: \"none\", sm: \"block\", md: \"block\" }}>\r\n                        <PickRangeDay updateDate={updateDate}></PickRangeDay>\r\n                    </Box>\r\n                </Box>\r\n            </Box>\r\n        </Box>\r\n    )\r\n}\r\n\r\nconst badges: RoomBadge[] = defaultRoomBadges;\r\n\r\nconst defaultRoom: RoomType = {\r\n    id: \"random-id-12321\",\r\n    name: \"Crystal palace\",\r\n    thumbnailUrl: \"https://bit.ly/2Z4KKcF\",\r\n    images: [\"https://picsum.photos/1100/1000\", \"https://picsum.photos/700/1200\",\r\n        \"https://picsum.photos/1000/1000\", \"https://picsum.photos/1200/1000\",\r\n        \"https://picsum.photos/1100/900\"],\r\n    thumbnailAlt: \"rear view house with pool\",\r\n    roomIntroduction: \"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Vestibulum congue eros id ligula porta, id fermentum ligula semper. Pellentesque eget pulvinar justo. Phasellus eu risus dolor. Aliquam mollis urna vel lectus ornare, nec ultricies augue gravida. Nunc dignissim diam vel massa cursus condimentum. Nulla pharetra molestie nunc, ac hendrerit felis posuere a. Sed finibus magna ut nibh luctus, ac dapibus mauris cursus. Sed eu porttitor lacus. Nulla venenatis erat quis orci consectetur efficitur. Phasellus nisl nisl, luctus et sapien nec, dictum feugiat felis. Nam nec ullamcorper mi, eu vulputate justo. Nullam nibh ipsum, dictum at commodo nec, molestie et ipsum. Aliquam sit amet tincidunt augue, sit amet consectetur mi.\",\r\n    description: \"Best place in town\",\r\n    location: \"Dark side, the moon\",\r\n    totalReview: 4,\r\n    totalStar: 23,\r\n    formattedPrice: \"2021.00$\",\r\n    services: [\"Pet\", \"Kitchen\", \"Breakfast\", \"Wifi\"],\r\n    roomBadges: badges,\r\n}\r\n\r\n\r\n\r\nconst defaultOwner: OwnerInfo = {\r\n    id: \"1234\",\r\n    name: \"Ivanov Ivan Ivanovich\",\r\n}\r\n\r\nexport default SingleRoom;","E:\\Repos\\hostel-chakra\\Hostel\\src\\Pages\\ErrorPage.tsx",[],"E:\\Repos\\hostel-chakra\\Hostel\\src\\ColorModeSwitcher.tsx",[],"E:\\Repos\\hostel-chakra\\Hostel\\src\\Logo.tsx",[],"E:\\Repos\\hostel-chakra\\Hostel\\src\\Pages\\HomePage.tsx",["191"],"import React from 'react'\r\nimport PropertyTypeList from '../Components/HomeComponents/PropertyTypeList'\r\nimport SearchBar from '../Components/NavComponents/SearchBar';\r\nimport { Box, DarkMode } from \"@chakra-ui/react\"\r\nimport BG from \"../Images/HomeBG.webp\";\r\nimport Navbar from '../Components/NavComponents/Navbar';\r\n\r\nconst px = \"10%\";\r\n\r\nconst HomePage = () => {\r\n    return (\r\n        <Box>\r\n            <Box minH={[\"50vh\", \"75vh\", \"85vh\"]} style={{ background: \"url('\" + BG + \"') center/cover no-repeat\" }}>\r\n                <Box px={px} pt=\"5\">\r\n                    <Navbar></Navbar>\r\n                    <SearchBar />\r\n                    <Box as=\"h1\" fontFamily=\"mono\" opacity=\"0.5\" fontWeight=\"bold\" fontSize={[\"3xl\", \"4xl\", \"6xl\", \"8xl\"]}\r\n                        position=\"relative\" mt={[\"5vh\", \"10vh\", \"20vh\", \"30vh\"]}>EXPLORE AROUND</Box>\r\n                </Box>\r\n            </Box>\r\n            <Box px={px} mt=\"10\">\r\n                <Box as=\"h2\" fontWeight=\"bold\" fontSize=\"4xl\" mb=\"5\">\r\n                    LIVE ANYWHERE\r\n                </Box>\r\n                <PropertyTypeList></PropertyTypeList>\r\n            </Box>\r\n        </Box>\r\n    )\r\n}\r\nexport default HomePage;","E:\\Repos\\hostel-chakra\\Hostel\\src\\Pages\\RoomsPage.tsx",[],"E:\\Repos\\hostel-chakra\\Hostel\\src\\Components\\HomeComponents\\PropertyTypeList.tsx",["192","193","194","195"],"import { Box, Flex, Grid, Link as ChakraLink, Spacer, VStack, Image, Tooltip } from '@chakra-ui/react';\r\nimport React from 'react';\r\nimport { Link } from \"react-router-dom\"\r\nimport Slider, { Settings } from 'react-slick';\r\nimport \"slick-carousel/slick/slick.css\";\r\nimport \"slick-carousel/slick/slick-theme.css\";\r\nimport { isError, useQuery } from 'react-query';\r\n\r\nvar settings: Settings = {\r\n    dots: true,\r\n    infinite: true,\r\n    speed: 500,\r\n    slidesToShow: 4,\r\n    slidesToScroll: 1,\r\n    initialSlide: 0,\r\n    swipeToSlide: true,\r\n    responsive: [\r\n        {\r\n            breakpoint: 1024,\r\n            settings: {\r\n                slidesToShow: 4,\r\n                slidesToScroll: 1,\r\n                infinite: true,\r\n                dots: true\r\n            }\r\n        },\r\n        {\r\n            breakpoint: 600,\r\n            settings: {\r\n                slidesToShow: 3,\r\n                slidesToScroll: 1,\r\n                initialSlide: 2\r\n            }\r\n        },\r\n        {\r\n            breakpoint: 480,\r\n            settings: {\r\n                slidesToShow: 1,\r\n                slidesToScroll: 1\r\n            }\r\n        }\r\n    ]\r\n};\r\n\r\nconst fetchPropertyTypes = async () => {\r\n    const url = \"http://localhost:44343\"\r\n    const res = await fetch(url + \"/api/propertytypes\");\r\n    const data: PropertyTypeType[] = await res.json();\r\n    return data;\r\n}\r\n\r\nconst PropertyTypeList = () => {\r\n    const { data, isError } = useQuery<unknown, unknown, PropertyTypeType[]>(\"propertypeList\", fetchPropertyTypes);\r\n    console.log(data);\r\n\r\n    if (isError) return <Box>Something's wrong</Box>\r\n    return (\r\n        <div>\r\n            <Slider {...settings}>\r\n                {data?.map((d, key) => <PropertyType type={d} key={key} />)}\r\n            </Slider>\r\n        </div>\r\n    )\r\n}\r\n\r\ntype PropertyTypeProps = {\r\n    type: PropertyTypeType;\r\n}\r\n\r\ntype PropertyTypeType = {\r\n    id: string;\r\n    propertyType: string;\r\n    thumbnailImg: string;\r\n    description: string;\r\n    count: number;\r\n}\r\n\r\nconst PropertyType: React.FC<PropertyTypeProps> = ({ type, children }) => {\r\n    return (\r\n        <VStack alignItems=\"start\" p=\"4\">\r\n            <ChakraLink as={Link} to={'/rooms?typeId=' + type.id}>\r\n                <Tooltip hasArrow placement=\"top\" aria-label={\"tooltips\"} label={type.description} openDelay={500}>\r\n                    <Box>\r\n                        <Box maxW=\"sm\" maxH=\"sm\" minH=\"100px\">\r\n                            <Image width=\"inherit\" height=\"inherit\" src={type.thumbnailImg} objectFit=\"cover\"></Image>\r\n                        </Box>\r\n\r\n                        <Box\r\n                            mt=\"1\"\r\n                            fontWeight=\"semibold\"\r\n                            as=\"h4\"\r\n                            lineHeight=\"tight\"\r\n                            isTruncated\r\n                        >\r\n                            {type.propertyType}\r\n                        </Box>\r\n                    </Box>\r\n                </Tooltip>\r\n            </ChakraLink>\r\n            <Box color=\"gray.500\" fontSize=\"md\">\r\n                {type.count + \" \" + type.propertyType + \"\"}\r\n            </Box>\r\n        </VStack>\r\n    )\r\n}\r\n\r\nexport default PropertyTypeList;","E:\\Repos\\hostel-chakra\\Hostel\\src\\Components\\NavComponents\\SearchBar.tsx",["196","197"],"import { Box, Button, Center, Flex, Input, InputGroup, InputLeftElement, InputRightElement, Popover, PopoverContent, PopoverTrigger, Spinner } from '@chakra-ui/react';\r\nimport axios from 'axios';\r\nimport React from 'react';\r\nimport { BsSearch } from 'react-icons/bs';\r\nimport { useQuery } from 'react-query';\r\n// import 'react-day-picker/lib/style.css';\r\nimport PickRangeDay from './PickRangeDay';\r\nimport PopDetail from './PopDetail';\r\n\r\ntype CityResponse = {\r\n    cityName: string;\r\n    cityId: string;\r\n    countryName: string;\r\n    countryId: string;\r\n}\r\n\r\ntype SearchBarProps = {\r\n    country?: string;\r\n    city?: string;\r\n    from?: Date;\r\n    to?: Date;\r\n    adultNum?: number;\r\n    childrenNum?: number;\r\n    bedRoom?: number;\r\n}\r\n\r\nconst defaultValue: SearchBarProps = {\r\n    adultNum: 1,\r\n    childrenNum: 0,\r\n    bedRoom: 1\r\n}\r\n\r\nconst URL = \"http://localhost:44343\";\r\n\r\nconst fetchCities = async () => {\r\n    // const res = await axios({\r\n    //     method: \"GET\",\r\n    //     url: URL + \"api/city\",\r\n    //     timeout: 5000\r\n    // });\r\n    // return res;\r\n    const res = await fetch(URL + \"/api/cities\");\r\n    const data = res.json();\r\n    return data;\r\n}\r\n\r\nconst SearchBar = () => {\r\n    const { data: cities, isLoading, status } = useQuery<unknown, unknown, CityResponse[]>(\"cities\", fetchCities);\r\n    // console.log(cities);\r\n    const [form, setForm] = React.useState<SearchBarProps>(defaultValue);\r\n    const cityRef = React.useRef<HTMLInputElement>(null);\r\n\r\n    // if (isLoading) return <>loading...</>;\r\n\r\n    const UpdateDate = (from?: Date, to?: Date) => {\r\n        setForm(s => ({\r\n            ...s,\r\n            from: from,\r\n            to: to\r\n        }))\r\n    }\r\n\r\n    const UpdatePeople = (adult: number, children: number, room: number) => {\r\n        setForm(s => ({\r\n            ...s,\r\n            childrenNum: children,\r\n            adultNum: adult,\r\n            bedRoom: room\r\n        }))\r\n        console.log(adult, children, room);\r\n    }\r\n\r\n    return (<div>\r\n        <Box p=\"2\" border=\"1px\" borderColor=\"yellow.400\" style={{ backdropFilter: \"blur(5px)\" }}>\r\n            <Flex display={{ lg: \"flex\" }} alignItems=\"center\">\r\n                <InputGroup>\r\n                    <InputLeftElement pointerEvents=\"none\" children={<BsSearch />} />\r\n                    <Input list=\"datalist-cities\" placeholder=\"Country\" size=\"lg\" borderRadius=\"0\" ref={cityRef} />\r\n                    {isLoading ? <InputRightElement children={<Spinner alignSelf=\"center\" />}></InputRightElement> :\r\n                        <datalist id=\"datalist-cities\" style={{}}>\r\n                            <Box>\r\n                                {cities?.map(c => {\r\n                                    return <option key={c.cityId} value={c.cityName} />\r\n                                })}\r\n                                {status === 'error' && <>\r\n                                    <option value=\"Hanoi\" />\r\n                                    <option value=\"Moscow\" />\r\n                                    <option value=\"Danang\" />\r\n                                    <option value=\"Ivanovo\" />\r\n                                </>}\r\n                            </Box>\r\n                        </datalist>\r\n                    }\r\n                </InputGroup>\r\n                <Popover closeOnBlur={true}>\r\n                    <PopoverTrigger>\r\n                        <Button variant=\"outline\" w={[\"100%\", \"100%\", \"100%\", \"150%\"]} size=\"lg\" _focusVisible={{ border: \"0\" }} borderRadius=\"0\" px=\"2\">{form?.from?.toDateString() || \"From\"} - {form?.to?.toDateString() || \"To\"}</Button>\r\n                    </PopoverTrigger>\r\n                    <PopoverContent flexWrap=\"nowrap\" alignItems=\"center\" w={[\"100%\", \"100%\", \"200%\", \"200%\"]} left={[\"0%\", \"0%\", \"-50%\", \"-50%\"]} borderRadius=\"0\" bgColor=\"rgba(66, 153, 225, 0.5)\">\r\n                        <PickRangeDay updateDate={UpdateDate} />\r\n                    </PopoverContent>\r\n                </Popover>\r\n                <Popover>\r\n                    <PopoverTrigger>\r\n                        <Button variant=\"outline\" w={[\"100%\", \"100%\", \"100%\", \"150%\"]} size=\"lg\" borderRadius=\"0\" px=\"2\">{form.adultNum + ' adult(s) - ' + form.childrenNum + ' child(s) - ' + form.bedRoom + ' room(s)'}</Button>\r\n                    </PopoverTrigger>\r\n                    <PopoverContent flexWrap=\"nowrap\" borderRadius=\"0\" bg=\"inherit\" bgColor=\"rgba(66, 153, 225, 0.8)\">\r\n                        <PopDetail updatePeople={UpdatePeople} adult={form.adultNum!} bedRoom={form.bedRoom!} children={form.childrenNum!}></PopDetail>\r\n                    </PopoverContent>\r\n                </Popover>\r\n                <Button alignSelf=\"center\" size=\"lg\" minW=\"100px\" ml={[0, 0, 0, 2]}\r\n                    mt={[2, 2, 2, 0]} w={[\"100%\", \"100%\", \"100%\", \"30%\"]} borderRadius=\"0\">Search</Button>\r\n            </Flex>\r\n        </Box>\r\n    </div>)\r\n}\r\n\r\nexport default SearchBar;","E:\\Repos\\hostel-chakra\\Hostel\\src\\Components\\NavComponents\\Navbar.tsx",[],"E:\\Repos\\hostel-chakra\\Hostel\\src\\Components\\FilterComponents\\RoomCardList.tsx",[],"E:\\Repos\\hostel-chakra\\Hostel\\src\\Components\\NavComponents\\PickRangeDay.tsx",["198"],"import { Box, Button, Center, Flex } from '@chakra-ui/react';\r\nimport React from 'react'\r\nimport DayPicker from 'react-day-picker';\r\nimport { DateUtils } from \"react-day-picker\";\r\nimport 'react-day-picker/lib/style.css';\r\ntype PickRangeDayState = {\r\n    from?: Date;\r\n    to?: Date;\r\n    enteredTo?: Date; // keep track of the last day for mouseEnter\r\n}\r\n\r\ntype PickRangeDayProps = {\r\n    from?: Date,\r\n    to?: Date,\r\n    updateDate: (from?: Date, to?: Date) => void,\r\n}\r\n\r\nconst defaultDate: PickRangeDayState = {\r\n    from: undefined,\r\n    to: undefined,\r\n    enteredTo: undefined\r\n}\r\n\r\nconst PickRangeDay: React.FC<PickRangeDayProps> = ({ from, to, updateDate }) => {\r\n    const [state, setState] = React.useState<PickRangeDayState>({ from: from, to: to });\r\n\r\n    React.useEffect(() => {\r\n        updateDate(state.from, state.to);\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [state.from, state.to]);\r\n\r\n    const isSelectingFirstDay = (day: Date, from?: Date, to?: Date) => {\r\n        const isBeforeFirstDay = from && DateUtils.isDayBefore(day, from);\r\n        const isRangeSelected = from && to;\r\n        return !from || isBeforeFirstDay || isRangeSelected;\r\n    }\r\n\r\n    const handleDayMouseEnter = (day: Date) => {\r\n        const { from, to } = state;\r\n        if (!isSelectingFirstDay(day, from, to)) {\r\n            setState(s => ({\r\n                ...s,\r\n                enteredTo: day,\r\n            }));\r\n        }\r\n    }\r\n\r\n    const handleDayClick = (day: Date) => {\r\n        const today = new Date(Date.now());\r\n        if (day < today) return;\r\n        const { from, to } = state;\r\n        if (from && to && day >= from && day <= to) {\r\n            handleResetClick();\r\n            return;\r\n        }\r\n        if (isSelectingFirstDay(day, from, to)) {\r\n            setState({\r\n                from: day,\r\n                to: undefined,\r\n                enteredTo: undefined,\r\n            });\r\n        } else {\r\n            setState(s => ({\r\n                ...s,\r\n                to: day,\r\n                enteredTo: day,\r\n            }));\r\n        }\r\n    }\r\n\r\n    const handleResetClick = () => {\r\n        setState(defaultDate);\r\n    }\r\n\r\n    const selected = [state.from, { from: state.from, to: state.enteredTo }];\r\n\r\n    const disabled = {\r\n        before: new Date(Date.now())\r\n    }\r\n\r\n    const modifiers = {\r\n        start: state.from,\r\n        end: state.enteredTo,\r\n    }\r\n\r\n    const modifierStyles = {\r\n        start: {\r\n            backgroundColor: '#19456b',\r\n        },\r\n        end: {\r\n            backgroundColor: '#19456b',\r\n        },\r\n        disable: {\r\n            backgroundColor: '#ffffff',\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Box style={{ backdropFilter: \"blur(5px)\" }} alignSelf=\"stretch\">\r\n            <Flex alignItems=\"stretch\" flexDir=\"column\">\r\n                <DayPicker\r\n                    modifiersStyles={modifierStyles}\r\n                    numberOfMonths={2}\r\n                    fromMonth={state.from}\r\n                    modifiers={modifiers as any}\r\n                    onDayClick={handleDayClick}\r\n                    disabledDays={disabled}\r\n                    onDayMouseEnter={handleDayMouseEnter}\r\n                    selectedDays={selected as any}>\r\n                </DayPicker>\r\n            </Flex>\r\n            <Flex justifyContent=\"center\" alignItems=\"center\">\r\n                {!state.from && !state.to && 'Please select the first day.'}\r\n                {state.from && !state.to && 'Please select the last day.'}\r\n                {state.from &&\r\n                    state.to &&\r\n                    `Selected from ${state.from.toLocaleDateString()} to\r\n                ${state.to.toLocaleDateString()}`}{' '}\r\n                {state.from && state.to && (\r\n                    <Button onClick={handleResetClick}>\r\n                        Reset\r\n                    </Button>\r\n                )}\r\n            </Flex>\r\n        </Box>\r\n    )\r\n}\r\n\r\nexport default PickRangeDay;","E:\\Repos\\hostel-chakra\\Hostel\\src\\Components\\NavComponents\\PopDetail.tsx",["199","200"],"import { Box, Flex, VStack, Text, Spacer, Square, Button, StackDivider } from '@chakra-ui/react';\r\nimport React from 'react';\r\n\r\ntype PopDetailState = {\r\n    adult: number;\r\n    children: number;\r\n    bedRoom: number;\r\n}\r\n\r\ninterface PopDetailProps extends PopDetailState {\r\n    updatePeople: (adult: number, children: number, room: number) => void;\r\n}\r\n\r\nconst PopDetail: React.FC<PopDetailProps> = ({ adult, children, bedRoom, updatePeople }) => {\r\n    return (\r\n        <div>\r\n            <Box p=\"4\" style={{ backdropFilter: \"blur(5px)\" }}>\r\n                <VStack align=\"stretch\" spacing={4}>\r\n                    <Flex alignItems=\"center\">\r\n                        <Text mr=\"auto\" fontSize=\"md\">Adult</Text>\r\n                        <Square border=\"1px\" borderColor=\"yellow.400\">\r\n                            <Button variant=\"ghost\" borderRadius=\"0\" disabled={adult <= 1 ? true : false}\r\n                                onClick={() => updatePeople(--adult, children, bedRoom)}>-</Button>\r\n                        </Square>\r\n                        <Text mx=\"4\" fontSize=\"md\">{adult}</Text>\r\n                        <Square border=\"1px\" borderColor=\"yellow.400\">\r\n                            <Button variant=\"ghost\" borderRadius=\"0\"\r\n                                onClick={() => updatePeople(++adult, children, bedRoom)}>+</Button>\r\n                        </Square>\r\n                    </Flex>\r\n                    <Flex alignItems=\"center\">\r\n                        <Text mr=\"auto\" fontSize=\"md\">Children</Text>\r\n                        <Square border=\"1px\" borderColor=\"yellow.400\">\r\n                            <Button variant=\"ghost\" borderRadius=\"0\" disabled={children <= 0 ? true : false}\r\n                                onClick={() => updatePeople(adult, --children, bedRoom)}>-</Button>\r\n                        </Square>\r\n                        <Text mx=\"4\" fontSize=\"md\">{children}</Text>\r\n                        <Square border=\"1px\" borderColor=\"yellow.400\">\r\n                            <Button variant=\"ghost\" borderRadius=\"0\"\r\n                                onClick={() => updatePeople(adult, ++children, bedRoom)}>+</Button>\r\n                        </Square>\r\n                    </Flex>\r\n                    <Flex alignItems=\"center\">\r\n                        <Text mr=\"auto\" fontSize=\"md\">Room</Text>\r\n                        <Square border=\"1px\" borderColor=\"yellow.400\">\r\n                            <Button variant=\"ghost\" borderRadius=\"0\" disabled={bedRoom <= 1 ? true : false}\r\n                                onClick={() => updatePeople(adult, children, --bedRoom)}>-</Button>\r\n                        </Square>\r\n                        <Text mx=\"4\" fontSize=\"md\">{bedRoom}</Text>\r\n                        <Square border=\"1px\" borderColor=\"yellow.400\">\r\n                            <Button variant=\"ghost\" borderRadius=\"0\"\r\n                                onClick={() => updatePeople(adult, children, ++bedRoom)}>+</Button>\r\n                        </Square>\r\n                    </Flex>\r\n                </VStack>\r\n            </Box>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default PopDetail;","E:\\Repos\\hostel-chakra\\Hostel\\src\\Components\\FilterComponents\\RoomCard.tsx",["201"],"import { Badge, Box, Image } from '@chakra-ui/react';\r\nimport React from 'react';\r\nimport { BsStar, BsStarFill } from 'react-icons/bs';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst defaultRoom: RoomCardType = {\r\n    id: \"random-id-12321\",\r\n    name: \"Crystal palace\",\r\n    thumbnailUrl: \"https://bit.ly/2Z4KKcF\",\r\n    thumbnailAlt: \"rear view house with pool\",\r\n    description: \"Best place in town\",\r\n    location: \"Dark side, the moon\",\r\n    totalReview: 4,\r\n    totalStar: 23,\r\n    formattedPrice: \"2021.00$\",\r\n    services: [\"Pet\", \"Kitchen\", \"Breakfast\", \"Wifi\"]\r\n}\r\n\r\ntype RoomCardProps = {\r\n    room: RoomCardType;\r\n}\r\n\r\nconst RoomCard: React.FC<RoomCardProps> = ({ room, children }) => {\r\n    return (\r\n        <Link to={\"/rooms/\" + room.id}>\r\n            <Box overflow=\"hidden\" borderWidth=\"1px\" borderRadius=\"lg\">\r\n                <Image src={room.thumbnailUrl} alt={room.thumbnailAlt} />\r\n                <Box p=\"4\">\r\n                    <Box d=\"flex\" alignItems=\"baseline\">\r\n                        <Badge borderRadius=\"full\" px=\"2\" colorScheme=\"teal\">\r\n                            New\r\n                        </Badge>\r\n                        {room.services.map((s, key) => {\r\n                            return (\r\n                                <Box\r\n                                    key={key}\r\n                                    color=\"gray.500\"\r\n                                    fontWeight=\"semibold\"\r\n                                    letterSpacing=\"wide\"\r\n                                    fontSize=\"xs\"\r\n                                    textTransform=\"uppercase\"\r\n                                    ml=\"2\"\r\n                                    isTruncated\r\n                                >{s} {room.services[room.services.length - 1] !== s && <>&bull;</>} </Box>\r\n                            )\r\n                        })}\r\n                    </Box>\r\n\r\n                    <Box\r\n                        mt=\"1\"\r\n                        fontWeight=\"semibold\"\r\n                        as=\"h4\"\r\n                        lineHeight=\"tight\"\r\n                        isTruncated\r\n                    >\r\n                        {room.name}\r\n                    </Box>\r\n                    <Box\r\n                        as=\"h3\"\r\n                        lineHeight=\"tight\"\r\n                        isTruncated\r\n                    >\r\n                        {room.description}\r\n                    </Box>\r\n                    <Box d='flex' justifyContent=\"space-between\">\r\n                        <Box as=\"h4\" fontSize=\"3xl\">\r\n                            {room.formattedPrice}\r\n                        </Box>\r\n\r\n                        <Box d=\"flex\" alignItems=\"center\">\r\n                            {Array(5).fill(\"\").map((_, i) => {\r\n                                return (i < room.totalReview - 1 ? <BsStarFill key={i} colorRendering=\"teal.400\" /> : <BsStar key={i} />)\r\n                            })}\r\n                        </Box>\r\n                    </Box>\r\n                </Box>\r\n            </Box>\r\n        </Link>\r\n    )\r\n}\r\n\r\nexport default RoomCard;","E:\\Repos\\hostel-chakra\\Hostel\\src\\Components\\NavComponents\\Footer.tsx",[],"E:\\Repos\\hostel-chakra\\Hostel\\src\\Components\\SingleRoomComponents\\MyRoomBadge.tsx",["202"],"import { Box, Icon, HStack, VStack, Center } from '@chakra-ui/react'\r\nimport React from 'react'\r\nimport { IconType } from 'react-icons'\r\nimport { RiStarLine, RiUserStarLine } from \"react-icons/ri\";\r\n\r\ntype MyRoomBadgeProps = {\r\n    id: string;\r\n}\r\n\r\nconst MyRoomBadge: React.FC<MyRoomBadgeProps> = ({ id }) => {\r\n    const [icon, setIcon] = React.useState<IconType>();\r\n    const [badge, setBadge] = React.useState<RoomBadge>();\r\n\r\n    React.useEffect(() => {\r\n        let foundBadge = defaultRoomBadges.find(b => b.id === id);\r\n        setBadge(foundBadge);\r\n        switch (id) {\r\n            case \"1\":\r\n                setIcon(RiUserStarLine);\r\n                break;\r\n\r\n            default:\r\n                setIcon(RiStarLine);\r\n                break;\r\n        }\r\n    }, [id])\r\n\r\n    return (\r\n        <HStack alignContent=\"center\" spacing=\"0\" mb=\"2\">\r\n            <Icon d=\"flex\" boxSize=\"10\" alignItems=\"center\" justifyContent=\"center\" mt=\"2\" ml=\"2\">{icon}</Icon>\r\n            <VStack alignItems=\"start\" spacing=\"0\">\r\n                <Box as=\"h4\" fontSize=\"md\" fontWeight=\"semibold\">{badge?.title}</Box>\r\n                <Box as=\"h5\" fontSize=\"sm\" m=\"0\">{badge?.description}</Box>\r\n            </VStack>\r\n        </HStack>\r\n    )\r\n}\r\n\r\nexport const defaultRoomBadges: RoomBadge[] = [\r\n    {\r\n        id: \"1\",\r\n        title: \"Helpful owner\",\r\n        description: \"Owner provides best services\"\r\n    },\r\n    {\r\n        id: \"2\",\r\n        title: \"Extra clean\",\r\n        description: \"Owner follows our strict policies of enhanced clealiness\"\r\n    },\r\n    {\r\n        id: \"3\",\r\n        title: \"Not smoking\",\r\n        description: \"Owner does not allow smoking inside\"\r\n    },\r\n    {\r\n        id: \"4\",\r\n        title: \"Free cancelation\",\r\n        description: \"You can cancel with full refund in 24 hours\"\r\n    }\r\n]\r\n\r\nexport default MyRoomBadge;","e:\\Repos\\hostel-chakra\\Hostel\\src\\index.tsx",[],"e:\\Repos\\hostel-chakra\\Hostel\\src\\reportWebVitals.ts",[],"e:\\Repos\\hostel-chakra\\Hostel\\src\\serviceWorker.ts",[],"e:\\Repos\\hostel-chakra\\Hostel\\src\\App.tsx",["203"],"e:\\Repos\\hostel-chakra\\Hostel\\src\\Pages\\HomePage.tsx",["204"],"e:\\Repos\\hostel-chakra\\Hostel\\src\\Pages\\SingleRoom.tsx",["205","206","207","208","209"],"e:\\Repos\\hostel-chakra\\Hostel\\src\\Pages\\RoomsPage.tsx",[],"e:\\Repos\\hostel-chakra\\Hostel\\src\\Pages\\ErrorPage.tsx",[],"e:\\Repos\\hostel-chakra\\Hostel\\src\\Components\\NavComponents\\Footer.tsx",[],"e:\\Repos\\hostel-chakra\\Hostel\\src\\Components\\NavComponents\\SearchBar.tsx",[],"e:\\Repos\\hostel-chakra\\Hostel\\src\\Components\\NavComponents\\PickRangeDay.tsx",["210"],"e:\\Repos\\hostel-chakra\\Hostel\\src\\Components\\NavComponents\\Navbar.tsx",[],"e:\\Repos\\hostel-chakra\\Hostel\\src\\Components\\NavComponents\\PopDetail.tsx",["211","212"],"e:\\Repos\\hostel-chakra\\Hostel\\src\\Components\\HomeComponents\\PropertyTypeList.tsx",["213","214","215"],"e:\\Repos\\hostel-chakra\\Hostel\\src\\Components\\SingleRoomComponents\\MyRoomBadge.tsx",["216"],"e:\\Repos\\hostel-chakra\\Hostel\\src\\Components\\FilterComponents\\RoomCardList.tsx",[],"e:\\Repos\\hostel-chakra\\Hostel\\src\\Logo.tsx",[],"e:\\Repos\\hostel-chakra\\Hostel\\src\\ColorModeSwitcher.tsx",[],"e:\\Repos\\hostel-chakra\\Hostel\\src\\Components\\FilterComponents\\RoomCard.tsx",["217"],"E:\\Repos\\hostel-chakra\\Hostel\\src\\Components\\LoginButton.tsx",["218","219","220","221","222"],"E:\\Repos\\hostel-chakra\\Hostel\\src\\Components\\RegisterButton.tsx",[],"E:\\Repos\\hostel-chakra\\Hostel\\src\\Components\\RegisterForm.tsx",["223"],"E:\\Repos\\hostel-chakra\\Hostel\\src\\Contexts\\AuthContext.tsx",[],"E:\\Repos\\hostel-chakra\\Hostel\\src\\Components\\LoginForm.tsx",["224"],{"ruleId":"225","replacedBy":"226"},{"ruleId":"227","replacedBy":"228"},{"ruleId":"229","severity":1,"message":"230","line":7,"column":37,"nodeType":"231","messageId":"232","endLine":7,"endColumn":50},{"ruleId":"229","severity":1,"message":"233","line":13,"column":10,"nodeType":"231","messageId":"232","endLine":13,"endColumn":14},{"ruleId":"229","severity":1,"message":"234","line":2,"column":10,"nodeType":"231","messageId":"232","endLine":2,"endColumn":18},{"ruleId":"229","severity":1,"message":"235","line":9,"column":8,"nodeType":"231","messageId":"232","endLine":9,"endColumn":17},{"ruleId":"229","severity":1,"message":"236","line":43,"column":13,"nodeType":"231","messageId":"232","endLine":43,"endColumn":17},{"ruleId":"229","severity":1,"message":"237","line":4,"column":15,"nodeType":"231","messageId":"232","endLine":4,"endColumn":23},{"ruleId":"229","severity":1,"message":"238","line":1,"column":15,"nodeType":"231","messageId":"232","endLine":1,"endColumn":19},{"ruleId":"229","severity":1,"message":"239","line":1,"column":21,"nodeType":"231","messageId":"232","endLine":1,"endColumn":25},{"ruleId":"229","severity":1,"message":"240","line":1,"column":47,"nodeType":"231","messageId":"232","endLine":1,"endColumn":53},{"ruleId":"229","severity":1,"message":"241","line":7,"column":10,"nodeType":"231","messageId":"232","endLine":7,"endColumn":17},{"ruleId":"229","severity":1,"message":"242","line":1,"column":23,"nodeType":"231","messageId":"232","endLine":1,"endColumn":29},{"ruleId":"229","severity":1,"message":"243","line":2,"column":8,"nodeType":"231","messageId":"232","endLine":2,"endColumn":13},{"ruleId":"229","severity":1,"message":"242","line":1,"column":23,"nodeType":"231","messageId":"232","endLine":1,"endColumn":29},{"ruleId":"229","severity":1,"message":"240","line":1,"column":35,"nodeType":"231","messageId":"232","endLine":1,"endColumn":41},{"ruleId":"229","severity":1,"message":"244","line":1,"column":59,"nodeType":"231","messageId":"232","endLine":1,"endColumn":71},{"ruleId":"229","severity":1,"message":"245","line":6,"column":7,"nodeType":"231","messageId":"232","endLine":6,"endColumn":32},{"ruleId":"229","severity":1,"message":"242","line":1,"column":37,"nodeType":"231","messageId":"232","endLine":1,"endColumn":43},{"ruleId":"229","severity":1,"message":"233","line":13,"column":10,"nodeType":"231","messageId":"232","endLine":13,"endColumn":14},{"ruleId":"229","severity":1,"message":"237","line":4,"column":15,"nodeType":"231","messageId":"232","endLine":4,"endColumn":23},{"ruleId":"229","severity":1,"message":"234","line":2,"column":10,"nodeType":"231","messageId":"232","endLine":2,"endColumn":18},{"ruleId":"229","severity":1,"message":"235","line":9,"column":8,"nodeType":"231","messageId":"232","endLine":9,"endColumn":17},{"ruleId":"229","severity":1,"message":"246","line":22,"column":6,"nodeType":"231","messageId":"232","endLine":22,"endColumn":21},{"ruleId":"229","severity":1,"message":"247","line":41,"column":7,"nodeType":"231","messageId":"232","endLine":41,"endColumn":18},{"ruleId":"229","severity":1,"message":"236","line":45,"column":13,"nodeType":"231","messageId":"232","endLine":45,"endColumn":17},{"ruleId":"229","severity":1,"message":"242","line":1,"column":23,"nodeType":"231","messageId":"232","endLine":1,"endColumn":29},{"ruleId":"229","severity":1,"message":"240","line":1,"column":35,"nodeType":"231","messageId":"232","endLine":1,"endColumn":41},{"ruleId":"229","severity":1,"message":"244","line":1,"column":59,"nodeType":"231","messageId":"232","endLine":1,"endColumn":71},{"ruleId":"229","severity":1,"message":"238","line":1,"column":10,"nodeType":"231","messageId":"232","endLine":1,"endColumn":14},{"ruleId":"229","severity":1,"message":"239","line":1,"column":16,"nodeType":"231","messageId":"232","endLine":1,"endColumn":20},{"ruleId":"229","severity":1,"message":"240","line":1,"column":22,"nodeType":"231","messageId":"232","endLine":1,"endColumn":28},{"ruleId":"229","severity":1,"message":"242","line":1,"column":37,"nodeType":"231","messageId":"232","endLine":1,"endColumn":43},{"ruleId":"229","severity":1,"message":"245","line":6,"column":7,"nodeType":"231","messageId":"232","endLine":6,"endColumn":32},{"ruleId":"229","severity":1,"message":"248","line":1,"column":10,"nodeType":"231","messageId":"232","endLine":1,"endColumn":21},{"ruleId":"229","severity":1,"message":"249","line":1,"column":23,"nodeType":"231","messageId":"232","endLine":1,"endColumn":32},{"ruleId":"229","severity":1,"message":"250","line":2,"column":23,"nodeType":"231","messageId":"232","endLine":2,"endColumn":28},{"ruleId":"229","severity":1,"message":"251","line":2,"column":80,"nodeType":"231","messageId":"232","endLine":2,"endColumn":91},{"ruleId":"229","severity":1,"message":"252","line":4,"column":10,"nodeType":"231","messageId":"232","endLine":4,"endColumn":22},{"ruleId":"229","severity":1,"message":"253","line":77,"column":7,"nodeType":"231","messageId":"232","endLine":77,"endColumn":19},{"ruleId":"229","severity":1,"message":"254","line":11,"column":23,"nodeType":"231","messageId":"232","endLine":11,"endColumn":35},"no-native-reassign",["255"],"no-negated-in-lhs",["256"],"@typescript-eslint/no-unused-vars","'BrowserRouter' is defined but never used.","Identifier","unusedVar","'mode' is defined but never used.","'userInfo' is defined but never used.","'SearchBar' is defined but never used.","'slug' is assigned a value but never used.","'DarkMode' is defined but never used.","'Flex' is defined but never used.","'Grid' is defined but never used.","'Spacer' is defined but never used.","'isError' is defined but never used.","'Center' is defined but never used.","'axios' is defined but never used.","'StackDivider' is defined but never used.","'defaultRoom' is assigned a value but never used.","'SingleRoomProps' is defined but never used.","'GetRoomById' is assigned a value but never used.","'FormControl' is defined but never used.","'FormLabel' is defined but never used.","'Input' is defined but never used.","'ModalFooter' is defined but never used.","'FaArrowRight' is defined but never used.","'fetchPincode' is assigned a value but never used.","'setLoginForm' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]